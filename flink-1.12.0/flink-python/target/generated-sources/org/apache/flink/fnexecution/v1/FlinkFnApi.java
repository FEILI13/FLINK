// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flink-fn-execution.proto

package org.apache.flink.fnexecution.v1;

public final class FlinkFnApi {
  private FlinkFnApi() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface InputOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Input)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
     * @return Whether the udf field is set.
     */
    boolean hasUdf();
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
     * @return The udf.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction getUdf();
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder getUdfOrBuilder();

    /**
     * <code>int32 inputOffset = 2;</code>
     * @return The inputOffset.
     */
    int getInputOffset();

    /**
     * <code>bytes inputConstant = 3;</code>
     * @return The inputConstant.
     */
    com.google.protobuf.ByteString getInputConstant();

    public org.apache.flink.fnexecution.v1.FlinkFnApi.Input.InputCase getInputCase();
  }
  /**
   * Protobuf type {@code org.apache.flink.fn_execution.v1.Input}
   */
  public  static final class Input extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Input)
      InputOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Input.newBuilder() to construct.
    private Input(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Input() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Input();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Input(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder subBuilder = null;
              if (inputCase_ == 1) {
                subBuilder = ((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) input_).toBuilder();
              }
              input_ =
                  input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) input_);
                input_ = subBuilder.buildPartial();
              }
              inputCase_ = 1;
              break;
            }
            case 16: {
              inputCase_ = 2;
              input_ = input.readInt32();
              break;
            }
            case 26: {
              inputCase_ = 3;
              input_ = input.readBytes();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Input_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Input_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.fnexecution.v1.FlinkFnApi.Input.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder.class);
    }

    private int inputCase_ = 0;
    private java.lang.Object input_;
    public enum InputCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      UDF(1),
      INPUTOFFSET(2),
      INPUTCONSTANT(3),
      INPUT_NOT_SET(0);
      private final int value;
      private InputCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static InputCase valueOf(int value) {
        return forNumber(value);
      }

      public static InputCase forNumber(int value) {
        switch (value) {
          case 1: return UDF;
          case 2: return INPUTOFFSET;
          case 3: return INPUTCONSTANT;
          case 0: return INPUT_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public InputCase
    getInputCase() {
      return InputCase.forNumber(
          inputCase_);
    }

    public static final int UDF_FIELD_NUMBER = 1;
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
     * @return Whether the udf field is set.
     */
    public boolean hasUdf() {
      return inputCase_ == 1;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
     * @return The udf.
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction getUdf() {
      if (inputCase_ == 1) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) input_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.getDefaultInstance();
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder getUdfOrBuilder() {
      if (inputCase_ == 1) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) input_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.getDefaultInstance();
    }

    public static final int INPUTOFFSET_FIELD_NUMBER = 2;
    /**
     * <code>int32 inputOffset = 2;</code>
     * @return The inputOffset.
     */
    public int getInputOffset() {
      if (inputCase_ == 2) {
        return (java.lang.Integer) input_;
      }
      return 0;
    }

    public static final int INPUTCONSTANT_FIELD_NUMBER = 3;
    /**
     * <code>bytes inputConstant = 3;</code>
     * @return The inputConstant.
     */
    public com.google.protobuf.ByteString getInputConstant() {
      if (inputCase_ == 3) {
        return (com.google.protobuf.ByteString) input_;
      }
      return com.google.protobuf.ByteString.EMPTY;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (inputCase_ == 1) {
        output.writeMessage(1, (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) input_);
      }
      if (inputCase_ == 2) {
        output.writeInt32(
            2, (int)((java.lang.Integer) input_));
      }
      if (inputCase_ == 3) {
        output.writeBytes(
            3, (com.google.protobuf.ByteString) input_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (inputCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) input_);
      }
      if (inputCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(
              2, (int)((java.lang.Integer) input_));
      }
      if (inputCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(
              3, (com.google.protobuf.ByteString) input_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Input)) {
        return super.equals(obj);
      }
      org.apache.flink.fnexecution.v1.FlinkFnApi.Input other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Input) obj;

      if (!getInputCase().equals(other.getInputCase())) return false;
      switch (inputCase_) {
        case 1:
          if (!getUdf()
              .equals(other.getUdf())) return false;
          break;
        case 2:
          if (getInputOffset()
              != other.getInputOffset()) return false;
          break;
        case 3:
          if (!getInputConstant()
              .equals(other.getInputConstant())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (inputCase_) {
        case 1:
          hash = (37 * hash) + UDF_FIELD_NUMBER;
          hash = (53 * hash) + getUdf().hashCode();
          break;
        case 2:
          hash = (37 * hash) + INPUTOFFSET_FIELD_NUMBER;
          hash = (53 * hash) + getInputOffset();
          break;
        case 3:
          hash = (37 * hash) + INPUTCONSTANT_FIELD_NUMBER;
          hash = (53 * hash) + getInputConstant().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Input prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Input}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Input)
        org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Input_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Input_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Input.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder.class);
      }

      // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Input.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        inputCase_ = 0;
        input_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Input_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Input getDefaultInstanceForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Input.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Input build() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.Input result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Input buildPartial() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.Input result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Input(this);
        if (inputCase_ == 1) {
          if (udfBuilder_ == null) {
            result.input_ = input_;
          } else {
            result.input_ = udfBuilder_.build();
          }
        }
        if (inputCase_ == 2) {
          result.input_ = input_;
        }
        if (inputCase_ == 3) {
          result.input_ = input_;
        }
        result.inputCase_ = inputCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Input) {
          return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Input)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Input other) {
        if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Input.getDefaultInstance()) return this;
        switch (other.getInputCase()) {
          case UDF: {
            mergeUdf(other.getUdf());
            break;
          }
          case INPUTOFFSET: {
            setInputOffset(other.getInputOffset());
            break;
          }
          case INPUTCONSTANT: {
            setInputConstant(other.getInputConstant());
            break;
          }
          case INPUT_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.fnexecution.v1.FlinkFnApi.Input parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.Input) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int inputCase_ = 0;
      private java.lang.Object input_;
      public InputCase
          getInputCase() {
        return InputCase.forNumber(
            inputCase_);
      }

      public Builder clearInput() {
        inputCase_ = 0;
        input_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder> udfBuilder_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
       * @return Whether the udf field is set.
       */
      public boolean hasUdf() {
        return inputCase_ == 1;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
       * @return The udf.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction getUdf() {
        if (udfBuilder_ == null) {
          if (inputCase_ == 1) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) input_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.getDefaultInstance();
        } else {
          if (inputCase_ == 1) {
            return udfBuilder_.getMessage();
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
       */
      public Builder setUdf(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction value) {
        if (udfBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          input_ = value;
          onChanged();
        } else {
          udfBuilder_.setMessage(value);
        }
        inputCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
       */
      public Builder setUdf(
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder builderForValue) {
        if (udfBuilder_ == null) {
          input_ = builderForValue.build();
          onChanged();
        } else {
          udfBuilder_.setMessage(builderForValue.build());
        }
        inputCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
       */
      public Builder mergeUdf(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction value) {
        if (udfBuilder_ == null) {
          if (inputCase_ == 1 &&
              input_ != org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.getDefaultInstance()) {
            input_ = org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) input_)
                .mergeFrom(value).buildPartial();
          } else {
            input_ = value;
          }
          onChanged();
        } else {
          if (inputCase_ == 1) {
            udfBuilder_.mergeFrom(value);
          }
          udfBuilder_.setMessage(value);
        }
        inputCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
       */
      public Builder clearUdf() {
        if (udfBuilder_ == null) {
          if (inputCase_ == 1) {
            inputCase_ = 0;
            input_ = null;
            onChanged();
          }
        } else {
          if (inputCase_ == 1) {
            inputCase_ = 0;
            input_ = null;
          }
          udfBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder getUdfBuilder() {
        return getUdfFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder getUdfOrBuilder() {
        if ((inputCase_ == 1) && (udfBuilder_ != null)) {
          return udfBuilder_.getMessageOrBuilder();
        } else {
          if (inputCase_ == 1) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) input_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder> 
          getUdfFieldBuilder() {
        if (udfBuilder_ == null) {
          if (!(inputCase_ == 1)) {
            input_ = org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.getDefaultInstance();
          }
          udfBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder>(
                  (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) input_,
                  getParentForChildren(),
                  isClean());
          input_ = null;
        }
        inputCase_ = 1;
        onChanged();;
        return udfBuilder_;
      }

      /**
       * <code>int32 inputOffset = 2;</code>
       * @return The inputOffset.
       */
      public int getInputOffset() {
        if (inputCase_ == 2) {
          return (java.lang.Integer) input_;
        }
        return 0;
      }
      /**
       * <code>int32 inputOffset = 2;</code>
       * @param value The inputOffset to set.
       * @return This builder for chaining.
       */
      public Builder setInputOffset(int value) {
        inputCase_ = 2;
        input_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 inputOffset = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearInputOffset() {
        if (inputCase_ == 2) {
          inputCase_ = 0;
          input_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>bytes inputConstant = 3;</code>
       * @return The inputConstant.
       */
      public com.google.protobuf.ByteString getInputConstant() {
        if (inputCase_ == 3) {
          return (com.google.protobuf.ByteString) input_;
        }
        return com.google.protobuf.ByteString.EMPTY;
      }
      /**
       * <code>bytes inputConstant = 3;</code>
       * @param value The inputConstant to set.
       * @return This builder for chaining.
       */
      public Builder setInputConstant(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  inputCase_ = 3;
        input_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes inputConstant = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearInputConstant() {
        if (inputCase_ == 3) {
          inputCase_ = 0;
          input_ = null;
          onChanged();
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Input)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Input)
    private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Input DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Input();
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Input>
        PARSER = new com.google.protobuf.AbstractParser<Input>() {
      @java.lang.Override
      public Input parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Input(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Input> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Input> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.Input getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UserDefinedFunctionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.UserDefinedFunction)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The serialized representation of the user-defined function
     * </pre>
     *
     * <code>bytes payload = 1;</code>
     * @return The payload.
     */
    com.google.protobuf.ByteString getPayload();

    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input> 
        getInputsList();
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.Input getInputs(int index);
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    int getInputsCount();
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder> 
        getInputsOrBuilderList();
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder getInputsOrBuilder(
        int index);

    /**
     * <pre>
     * The index of the over window used in pandas batch over window aggregation
     * </pre>
     *
     * <code>int32 window_index = 3;</code>
     * @return The windowIndex.
     */
    int getWindowIndex();
  }
  /**
   * <pre>
   * User-defined function definition. It supports chaining functions, that's, the execution
   * result of one user-defined function as the input of another user-defined function.
   * </pre>
   *
   * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedFunction}
   */
  public  static final class UserDefinedFunction extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.UserDefinedFunction)
      UserDefinedFunctionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UserDefinedFunction.newBuilder() to construct.
    private UserDefinedFunction(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UserDefinedFunction() {
      payload_ = com.google.protobuf.ByteString.EMPTY;
      inputs_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UserDefinedFunction();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private UserDefinedFunction(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {

              payload_ = input.readBytes();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                inputs_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.Input>();
                mutable_bitField0_ |= 0x00000001;
              }
              inputs_.add(
                  input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.Input.parser(), extensionRegistry));
              break;
            }
            case 24: {

              windowIndex_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          inputs_ = java.util.Collections.unmodifiableList(inputs_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunction_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunction_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder.class);
    }

    public static final int PAYLOAD_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString payload_;
    /**
     * <pre>
     * The serialized representation of the user-defined function
     * </pre>
     *
     * <code>bytes payload = 1;</code>
     * @return The payload.
     */
    public com.google.protobuf.ByteString getPayload() {
      return payload_;
    }

    public static final int INPUTS_FIELD_NUMBER = 2;
    private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input> inputs_;
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input> getInputsList() {
      return inputs_;
    }
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder> 
        getInputsOrBuilderList() {
      return inputs_;
    }
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    public int getInputsCount() {
      return inputs_.size();
    }
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.Input getInputs(int index) {
      return inputs_.get(index);
    }
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder getInputsOrBuilder(
        int index) {
      return inputs_.get(index);
    }

    public static final int WINDOW_INDEX_FIELD_NUMBER = 3;
    private int windowIndex_;
    /**
     * <pre>
     * The index of the over window used in pandas batch over window aggregation
     * </pre>
     *
     * <code>int32 window_index = 3;</code>
     * @return The windowIndex.
     */
    public int getWindowIndex() {
      return windowIndex_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!payload_.isEmpty()) {
        output.writeBytes(1, payload_);
      }
      for (int i = 0; i < inputs_.size(); i++) {
        output.writeMessage(2, inputs_.get(i));
      }
      if (windowIndex_ != 0) {
        output.writeInt32(3, windowIndex_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!payload_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, payload_);
      }
      for (int i = 0; i < inputs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, inputs_.get(i));
      }
      if (windowIndex_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, windowIndex_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction)) {
        return super.equals(obj);
      }
      org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction other = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) obj;

      if (!getPayload()
          .equals(other.getPayload())) return false;
      if (!getInputsList()
          .equals(other.getInputsList())) return false;
      if (getWindowIndex()
          != other.getWindowIndex()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PAYLOAD_FIELD_NUMBER;
      hash = (53 * hash) + getPayload().hashCode();
      if (getInputsCount() > 0) {
        hash = (37 * hash) + INPUTS_FIELD_NUMBER;
        hash = (53 * hash) + getInputsList().hashCode();
      }
      hash = (37 * hash) + WINDOW_INDEX_FIELD_NUMBER;
      hash = (53 * hash) + getWindowIndex();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * User-defined function definition. It supports chaining functions, that's, the execution
     * result of one user-defined function as the input of another user-defined function.
     * </pre>
     *
     * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedFunction}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.UserDefinedFunction)
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunction_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunction_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder.class);
      }

      // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getInputsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        payload_ = com.google.protobuf.ByteString.EMPTY;

        if (inputsBuilder_ == null) {
          inputs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          inputsBuilder_.clear();
        }
        windowIndex_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunction_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction getDefaultInstanceForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction build() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction buildPartial() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction result = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction(this);
        int from_bitField0_ = bitField0_;
        result.payload_ = payload_;
        if (inputsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            inputs_ = java.util.Collections.unmodifiableList(inputs_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.inputs_ = inputs_;
        } else {
          result.inputs_ = inputsBuilder_.build();
        }
        result.windowIndex_ = windowIndex_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) {
          return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction other) {
        if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.getDefaultInstance()) return this;
        if (other.getPayload() != com.google.protobuf.ByteString.EMPTY) {
          setPayload(other.getPayload());
        }
        if (inputsBuilder_ == null) {
          if (!other.inputs_.isEmpty()) {
            if (inputs_.isEmpty()) {
              inputs_ = other.inputs_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureInputsIsMutable();
              inputs_.addAll(other.inputs_);
            }
            onChanged();
          }
        } else {
          if (!other.inputs_.isEmpty()) {
            if (inputsBuilder_.isEmpty()) {
              inputsBuilder_.dispose();
              inputsBuilder_ = null;
              inputs_ = other.inputs_;
              bitField0_ = (bitField0_ & ~0x00000001);
              inputsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getInputsFieldBuilder() : null;
            } else {
              inputsBuilder_.addAllMessages(other.inputs_);
            }
          }
        }
        if (other.getWindowIndex() != 0) {
          setWindowIndex(other.getWindowIndex());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString payload_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * The serialized representation of the user-defined function
       * </pre>
       *
       * <code>bytes payload = 1;</code>
       * @return The payload.
       */
      public com.google.protobuf.ByteString getPayload() {
        return payload_;
      }
      /**
       * <pre>
       * The serialized representation of the user-defined function
       * </pre>
       *
       * <code>bytes payload = 1;</code>
       * @param value The payload to set.
       * @return This builder for chaining.
       */
      public Builder setPayload(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        payload_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The serialized representation of the user-defined function
       * </pre>
       *
       * <code>bytes payload = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPayload() {
        
        payload_ = getDefaultInstance().getPayload();
        onChanged();
        return this;
      }

      private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input> inputs_ =
        java.util.Collections.emptyList();
      private void ensureInputsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          inputs_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.Input>(inputs_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.Input, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder> inputsBuilder_;

      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input> getInputsList() {
        if (inputsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(inputs_);
        } else {
          return inputsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public int getInputsCount() {
        if (inputsBuilder_ == null) {
          return inputs_.size();
        } else {
          return inputsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Input getInputs(int index) {
        if (inputsBuilder_ == null) {
          return inputs_.get(index);
        } else {
          return inputsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder setInputs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Input value) {
        if (inputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputsIsMutable();
          inputs_.set(index, value);
          onChanged();
        } else {
          inputsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder setInputs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder builderForValue) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.set(index, builderForValue.build());
          onChanged();
        } else {
          inputsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder addInputs(org.apache.flink.fnexecution.v1.FlinkFnApi.Input value) {
        if (inputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputsIsMutable();
          inputs_.add(value);
          onChanged();
        } else {
          inputsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder addInputs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Input value) {
        if (inputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputsIsMutable();
          inputs_.add(index, value);
          onChanged();
        } else {
          inputsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder addInputs(
          org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder builderForValue) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.add(builderForValue.build());
          onChanged();
        } else {
          inputsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder addInputs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder builderForValue) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.add(index, builderForValue.build());
          onChanged();
        } else {
          inputsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder addAllInputs(
          java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.Input> values) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, inputs_);
          onChanged();
        } else {
          inputsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder clearInputs() {
        if (inputsBuilder_ == null) {
          inputs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          inputsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder removeInputs(int index) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.remove(index);
          onChanged();
        } else {
          inputsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder getInputsBuilder(
          int index) {
        return getInputsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder getInputsOrBuilder(
          int index) {
        if (inputsBuilder_ == null) {
          return inputs_.get(index);  } else {
          return inputsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder> 
           getInputsOrBuilderList() {
        if (inputsBuilder_ != null) {
          return inputsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(inputs_);
        }
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder addInputsBuilder() {
        return getInputsFieldBuilder().addBuilder(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Input.getDefaultInstance());
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder addInputsBuilder(
          int index) {
        return getInputsFieldBuilder().addBuilder(
            index, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.getDefaultInstance());
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder> 
           getInputsBuilderList() {
        return getInputsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.Input, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder> 
          getInputsFieldBuilder() {
        if (inputsBuilder_ == null) {
          inputsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.Input, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder>(
                  inputs_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          inputs_ = null;
        }
        return inputsBuilder_;
      }

      private int windowIndex_ ;
      /**
       * <pre>
       * The index of the over window used in pandas batch over window aggregation
       * </pre>
       *
       * <code>int32 window_index = 3;</code>
       * @return The windowIndex.
       */
      public int getWindowIndex() {
        return windowIndex_;
      }
      /**
       * <pre>
       * The index of the over window used in pandas batch over window aggregation
       * </pre>
       *
       * <code>int32 window_index = 3;</code>
       * @param value The windowIndex to set.
       * @return This builder for chaining.
       */
      public Builder setWindowIndex(int value) {
        
        windowIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The index of the over window used in pandas batch over window aggregation
       * </pre>
       *
       * <code>int32 window_index = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearWindowIndex() {
        
        windowIndex_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.UserDefinedFunction)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.UserDefinedFunction)
    private static final org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction();
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UserDefinedFunction>
        PARSER = new com.google.protobuf.AbstractParser<UserDefinedFunction>() {
      @java.lang.Override
      public UserDefinedFunction parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new UserDefinedFunction(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<UserDefinedFunction> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UserDefinedFunction> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UserDefinedFunctionsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.UserDefinedFunctions)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
     */
    java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction> 
        getUdfsList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction getUdfs(int index);
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
     */
    int getUdfsCount();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
     */
    java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder> 
        getUdfsOrBuilderList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder getUdfsOrBuilder(
        int index);

    /**
     * <code>bool metric_enabled = 2;</code>
     * @return The metricEnabled.
     */
    boolean getMetricEnabled();

    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
     */
    java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow> 
        getWindowsList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow getWindows(int index);
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
     */
    int getWindowsCount();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
     */
    java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindowOrBuilder> 
        getWindowsOrBuilderList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindowOrBuilder getWindowsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * A list of user-defined functions to be executed in a batch.
   * </pre>
   *
   * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedFunctions}
   */
  public  static final class UserDefinedFunctions extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.UserDefinedFunctions)
      UserDefinedFunctionsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UserDefinedFunctions.newBuilder() to construct.
    private UserDefinedFunctions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UserDefinedFunctions() {
      udfs_ = java.util.Collections.emptyList();
      windows_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UserDefinedFunctions();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private UserDefinedFunctions(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                udfs_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction>();
                mutable_bitField0_ |= 0x00000001;
              }
              udfs_.add(
                  input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.parser(), extensionRegistry));
              break;
            }
            case 16: {

              metricEnabled_ = input.readBool();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                windows_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow>();
                mutable_bitField0_ |= 0x00000002;
              }
              windows_.add(
                  input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          udfs_ = java.util.Collections.unmodifiableList(udfs_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          windows_ = java.util.Collections.unmodifiableList(windows_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunctions_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunctions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions.Builder.class);
    }

    public static final int UDFS_FIELD_NUMBER = 1;
    private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction> udfs_;
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
     */
    public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction> getUdfsList() {
      return udfs_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
     */
    public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder> 
        getUdfsOrBuilderList() {
      return udfs_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
     */
    public int getUdfsCount() {
      return udfs_.size();
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction getUdfs(int index) {
      return udfs_.get(index);
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder getUdfsOrBuilder(
        int index) {
      return udfs_.get(index);
    }

    public static final int METRIC_ENABLED_FIELD_NUMBER = 2;
    private boolean metricEnabled_;
    /**
     * <code>bool metric_enabled = 2;</code>
     * @return The metricEnabled.
     */
    public boolean getMetricEnabled() {
      return metricEnabled_;
    }

    public static final int WINDOWS_FIELD_NUMBER = 3;
    private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow> windows_;
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
     */
    public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow> getWindowsList() {
      return windows_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
     */
    public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindowOrBuilder> 
        getWindowsOrBuilderList() {
      return windows_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
     */
    public int getWindowsCount() {
      return windows_.size();
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow getWindows(int index) {
      return windows_.get(index);
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindowOrBuilder getWindowsOrBuilder(
        int index) {
      return windows_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < udfs_.size(); i++) {
        output.writeMessage(1, udfs_.get(i));
      }
      if (metricEnabled_ != false) {
        output.writeBool(2, metricEnabled_);
      }
      for (int i = 0; i < windows_.size(); i++) {
        output.writeMessage(3, windows_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < udfs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, udfs_.get(i));
      }
      if (metricEnabled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, metricEnabled_);
      }
      for (int i = 0; i < windows_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, windows_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions)) {
        return super.equals(obj);
      }
      org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions other = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions) obj;

      if (!getUdfsList()
          .equals(other.getUdfsList())) return false;
      if (getMetricEnabled()
          != other.getMetricEnabled()) return false;
      if (!getWindowsList()
          .equals(other.getWindowsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getUdfsCount() > 0) {
        hash = (37 * hash) + UDFS_FIELD_NUMBER;
        hash = (53 * hash) + getUdfsList().hashCode();
      }
      hash = (37 * hash) + METRIC_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getMetricEnabled());
      if (getWindowsCount() > 0) {
        hash = (37 * hash) + WINDOWS_FIELD_NUMBER;
        hash = (53 * hash) + getWindowsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A list of user-defined functions to be executed in a batch.
     * </pre>
     *
     * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedFunctions}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.UserDefinedFunctions)
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunctions_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunctions_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions.Builder.class);
      }

      // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getUdfsFieldBuilder();
          getWindowsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (udfsBuilder_ == null) {
          udfs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          udfsBuilder_.clear();
        }
        metricEnabled_ = false;

        if (windowsBuilder_ == null) {
          windows_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          windowsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunctions_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions getDefaultInstanceForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions build() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions buildPartial() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions result = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions(this);
        int from_bitField0_ = bitField0_;
        if (udfsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            udfs_ = java.util.Collections.unmodifiableList(udfs_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.udfs_ = udfs_;
        } else {
          result.udfs_ = udfsBuilder_.build();
        }
        result.metricEnabled_ = metricEnabled_;
        if (windowsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            windows_ = java.util.Collections.unmodifiableList(windows_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.windows_ = windows_;
        } else {
          result.windows_ = windowsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions) {
          return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions other) {
        if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions.getDefaultInstance()) return this;
        if (udfsBuilder_ == null) {
          if (!other.udfs_.isEmpty()) {
            if (udfs_.isEmpty()) {
              udfs_ = other.udfs_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureUdfsIsMutable();
              udfs_.addAll(other.udfs_);
            }
            onChanged();
          }
        } else {
          if (!other.udfs_.isEmpty()) {
            if (udfsBuilder_.isEmpty()) {
              udfsBuilder_.dispose();
              udfsBuilder_ = null;
              udfs_ = other.udfs_;
              bitField0_ = (bitField0_ & ~0x00000001);
              udfsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getUdfsFieldBuilder() : null;
            } else {
              udfsBuilder_.addAllMessages(other.udfs_);
            }
          }
        }
        if (other.getMetricEnabled() != false) {
          setMetricEnabled(other.getMetricEnabled());
        }
        if (windowsBuilder_ == null) {
          if (!other.windows_.isEmpty()) {
            if (windows_.isEmpty()) {
              windows_ = other.windows_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureWindowsIsMutable();
              windows_.addAll(other.windows_);
            }
            onChanged();
          }
        } else {
          if (!other.windows_.isEmpty()) {
            if (windowsBuilder_.isEmpty()) {
              windowsBuilder_.dispose();
              windowsBuilder_ = null;
              windows_ = other.windows_;
              bitField0_ = (bitField0_ & ~0x00000002);
              windowsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getWindowsFieldBuilder() : null;
            } else {
              windowsBuilder_.addAllMessages(other.windows_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction> udfs_ =
        java.util.Collections.emptyList();
      private void ensureUdfsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          udfs_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction>(udfs_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder> udfsBuilder_;

      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction> getUdfsList() {
        if (udfsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(udfs_);
        } else {
          return udfsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public int getUdfsCount() {
        if (udfsBuilder_ == null) {
          return udfs_.size();
        } else {
          return udfsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction getUdfs(int index) {
        if (udfsBuilder_ == null) {
          return udfs_.get(index);
        } else {
          return udfsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public Builder setUdfs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction value) {
        if (udfsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUdfsIsMutable();
          udfs_.set(index, value);
          onChanged();
        } else {
          udfsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public Builder setUdfs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder builderForValue) {
        if (udfsBuilder_ == null) {
          ensureUdfsIsMutable();
          udfs_.set(index, builderForValue.build());
          onChanged();
        } else {
          udfsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public Builder addUdfs(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction value) {
        if (udfsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUdfsIsMutable();
          udfs_.add(value);
          onChanged();
        } else {
          udfsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public Builder addUdfs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction value) {
        if (udfsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUdfsIsMutable();
          udfs_.add(index, value);
          onChanged();
        } else {
          udfsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public Builder addUdfs(
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder builderForValue) {
        if (udfsBuilder_ == null) {
          ensureUdfsIsMutable();
          udfs_.add(builderForValue.build());
          onChanged();
        } else {
          udfsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public Builder addUdfs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder builderForValue) {
        if (udfsBuilder_ == null) {
          ensureUdfsIsMutable();
          udfs_.add(index, builderForValue.build());
          onChanged();
        } else {
          udfsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public Builder addAllUdfs(
          java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction> values) {
        if (udfsBuilder_ == null) {
          ensureUdfsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, udfs_);
          onChanged();
        } else {
          udfsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public Builder clearUdfs() {
        if (udfsBuilder_ == null) {
          udfs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          udfsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public Builder removeUdfs(int index) {
        if (udfsBuilder_ == null) {
          ensureUdfsIsMutable();
          udfs_.remove(index);
          onChanged();
        } else {
          udfsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder getUdfsBuilder(
          int index) {
        return getUdfsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder getUdfsOrBuilder(
          int index) {
        if (udfsBuilder_ == null) {
          return udfs_.get(index);  } else {
          return udfsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder> 
           getUdfsOrBuilderList() {
        if (udfsBuilder_ != null) {
          return udfsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(udfs_);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder addUdfsBuilder() {
        return getUdfsFieldBuilder().addBuilder(
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder addUdfsBuilder(
          int index) {
        return getUdfsFieldBuilder().addBuilder(
            index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder> 
           getUdfsBuilderList() {
        return getUdfsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder> 
          getUdfsFieldBuilder() {
        if (udfsBuilder_ == null) {
          udfsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder>(
                  udfs_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          udfs_ = null;
        }
        return udfsBuilder_;
      }

      private boolean metricEnabled_ ;
      /**
       * <code>bool metric_enabled = 2;</code>
       * @return The metricEnabled.
       */
      public boolean getMetricEnabled() {
        return metricEnabled_;
      }
      /**
       * <code>bool metric_enabled = 2;</code>
       * @param value The metricEnabled to set.
       * @return This builder for chaining.
       */
      public Builder setMetricEnabled(boolean value) {
        
        metricEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool metric_enabled = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMetricEnabled() {
        
        metricEnabled_ = false;
        onChanged();
        return this;
      }

      private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow> windows_ =
        java.util.Collections.emptyList();
      private void ensureWindowsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          windows_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow>(windows_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindowOrBuilder> windowsBuilder_;

      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow> getWindowsList() {
        if (windowsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(windows_);
        } else {
          return windowsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public int getWindowsCount() {
        if (windowsBuilder_ == null) {
          return windows_.size();
        } else {
          return windowsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow getWindows(int index) {
        if (windowsBuilder_ == null) {
          return windows_.get(index);
        } else {
          return windowsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public Builder setWindows(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow value) {
        if (windowsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWindowsIsMutable();
          windows_.set(index, value);
          onChanged();
        } else {
          windowsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public Builder setWindows(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder builderForValue) {
        if (windowsBuilder_ == null) {
          ensureWindowsIsMutable();
          windows_.set(index, builderForValue.build());
          onChanged();
        } else {
          windowsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public Builder addWindows(org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow value) {
        if (windowsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWindowsIsMutable();
          windows_.add(value);
          onChanged();
        } else {
          windowsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public Builder addWindows(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow value) {
        if (windowsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWindowsIsMutable();
          windows_.add(index, value);
          onChanged();
        } else {
          windowsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public Builder addWindows(
          org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder builderForValue) {
        if (windowsBuilder_ == null) {
          ensureWindowsIsMutable();
          windows_.add(builderForValue.build());
          onChanged();
        } else {
          windowsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public Builder addWindows(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder builderForValue) {
        if (windowsBuilder_ == null) {
          ensureWindowsIsMutable();
          windows_.add(index, builderForValue.build());
          onChanged();
        } else {
          windowsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public Builder addAllWindows(
          java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow> values) {
        if (windowsBuilder_ == null) {
          ensureWindowsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, windows_);
          onChanged();
        } else {
          windowsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public Builder clearWindows() {
        if (windowsBuilder_ == null) {
          windows_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          windowsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public Builder removeWindows(int index) {
        if (windowsBuilder_ == null) {
          ensureWindowsIsMutable();
          windows_.remove(index);
          onChanged();
        } else {
          windowsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder getWindowsBuilder(
          int index) {
        return getWindowsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindowOrBuilder getWindowsOrBuilder(
          int index) {
        if (windowsBuilder_ == null) {
          return windows_.get(index);  } else {
          return windowsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindowOrBuilder> 
           getWindowsOrBuilderList() {
        if (windowsBuilder_ != null) {
          return windowsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(windows_);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder addWindowsBuilder() {
        return getWindowsFieldBuilder().addBuilder(
            org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder addWindowsBuilder(
          int index) {
        return getWindowsFieldBuilder().addBuilder(
            index, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder> 
           getWindowsBuilderList() {
        return getWindowsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindowOrBuilder> 
          getWindowsFieldBuilder() {
        if (windowsBuilder_ == null) {
          windowsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindowOrBuilder>(
                  windows_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          windows_ = null;
        }
        return windowsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.UserDefinedFunctions)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.UserDefinedFunctions)
    private static final org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions();
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UserDefinedFunctions>
        PARSER = new com.google.protobuf.AbstractParser<UserDefinedFunctions>() {
      @java.lang.Override
      public UserDefinedFunctions parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new UserDefinedFunctions(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<UserDefinedFunctions> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UserDefinedFunctions> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OverWindowOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.OverWindow)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.org.apache.flink.fn_execution.v1.OverWindow.WindowType window_type = 1;</code>
     * @return The enum numeric value on the wire for windowType.
     */
    int getWindowTypeValue();
    /**
     * <code>.org.apache.flink.fn_execution.v1.OverWindow.WindowType window_type = 1;</code>
     * @return The windowType.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType getWindowType();

    /**
     * <code>int64 lower_boundary = 2;</code>
     * @return The lowerBoundary.
     */
    long getLowerBoundary();

    /**
     * <code>int64 upper_boundary = 3;</code>
     * @return The upperBoundary.
     */
    long getUpperBoundary();
  }
  /**
   * <pre>
   * Used to describe the info of over window in pandas batch over window aggregation
   * </pre>
   *
   * Protobuf type {@code org.apache.flink.fn_execution.v1.OverWindow}
   */
  public  static final class OverWindow extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.OverWindow)
      OverWindowOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use OverWindow.newBuilder() to construct.
    private OverWindow(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private OverWindow() {
      windowType_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new OverWindow();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private OverWindow(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              windowType_ = rawValue;
              break;
            }
            case 16: {

              lowerBoundary_ = input.readInt64();
              break;
            }
            case 24: {

              upperBoundary_ = input.readInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_OverWindow_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_OverWindow_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.class, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder.class);
    }

    /**
     * Protobuf enum {@code org.apache.flink.fn_execution.v1.OverWindow.WindowType}
     */
    public enum WindowType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>RANGE_UNBOUNDED = 0;</code>
       */
      RANGE_UNBOUNDED(0),
      /**
       * <code>RANGE_UNBOUNDED_PRECEDING = 1;</code>
       */
      RANGE_UNBOUNDED_PRECEDING(1),
      /**
       * <code>RANGE_UNBOUNDED_FOLLOWING = 2;</code>
       */
      RANGE_UNBOUNDED_FOLLOWING(2),
      /**
       * <code>RANGE_SLIDING = 3;</code>
       */
      RANGE_SLIDING(3),
      /**
       * <code>ROW_UNBOUNDED = 4;</code>
       */
      ROW_UNBOUNDED(4),
      /**
       * <code>ROW_UNBOUNDED_PRECEDING = 5;</code>
       */
      ROW_UNBOUNDED_PRECEDING(5),
      /**
       * <code>ROW_UNBOUNDED_FOLLOWING = 6;</code>
       */
      ROW_UNBOUNDED_FOLLOWING(6),
      /**
       * <code>ROW_SLIDING = 7;</code>
       */
      ROW_SLIDING(7),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>RANGE_UNBOUNDED = 0;</code>
       */
      public static final int RANGE_UNBOUNDED_VALUE = 0;
      /**
       * <code>RANGE_UNBOUNDED_PRECEDING = 1;</code>
       */
      public static final int RANGE_UNBOUNDED_PRECEDING_VALUE = 1;
      /**
       * <code>RANGE_UNBOUNDED_FOLLOWING = 2;</code>
       */
      public static final int RANGE_UNBOUNDED_FOLLOWING_VALUE = 2;
      /**
       * <code>RANGE_SLIDING = 3;</code>
       */
      public static final int RANGE_SLIDING_VALUE = 3;
      /**
       * <code>ROW_UNBOUNDED = 4;</code>
       */
      public static final int ROW_UNBOUNDED_VALUE = 4;
      /**
       * <code>ROW_UNBOUNDED_PRECEDING = 5;</code>
       */
      public static final int ROW_UNBOUNDED_PRECEDING_VALUE = 5;
      /**
       * <code>ROW_UNBOUNDED_FOLLOWING = 6;</code>
       */
      public static final int ROW_UNBOUNDED_FOLLOWING_VALUE = 6;
      /**
       * <code>ROW_SLIDING = 7;</code>
       */
      public static final int ROW_SLIDING_VALUE = 7;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static WindowType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static WindowType forNumber(int value) {
        switch (value) {
          case 0: return RANGE_UNBOUNDED;
          case 1: return RANGE_UNBOUNDED_PRECEDING;
          case 2: return RANGE_UNBOUNDED_FOLLOWING;
          case 3: return RANGE_SLIDING;
          case 4: return ROW_UNBOUNDED;
          case 5: return ROW_UNBOUNDED_PRECEDING;
          case 6: return ROW_UNBOUNDED_FOLLOWING;
          case 7: return ROW_SLIDING;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<WindowType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          WindowType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<WindowType>() {
              public WindowType findValueByNumber(int number) {
                return WindowType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.getDescriptor().getEnumTypes().get(0);
      }

      private static final WindowType[] VALUES = values();

      public static WindowType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private WindowType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.apache.flink.fn_execution.v1.OverWindow.WindowType)
    }

    public static final int WINDOW_TYPE_FIELD_NUMBER = 1;
    private int windowType_;
    /**
     * <code>.org.apache.flink.fn_execution.v1.OverWindow.WindowType window_type = 1;</code>
     * @return The enum numeric value on the wire for windowType.
     */
    public int getWindowTypeValue() {
      return windowType_;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.OverWindow.WindowType window_type = 1;</code>
     * @return The windowType.
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType getWindowType() {
      @SuppressWarnings("deprecation")
      org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType result = org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType.valueOf(windowType_);
      return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType.UNRECOGNIZED : result;
    }

    public static final int LOWER_BOUNDARY_FIELD_NUMBER = 2;
    private long lowerBoundary_;
    /**
     * <code>int64 lower_boundary = 2;</code>
     * @return The lowerBoundary.
     */
    public long getLowerBoundary() {
      return lowerBoundary_;
    }

    public static final int UPPER_BOUNDARY_FIELD_NUMBER = 3;
    private long upperBoundary_;
    /**
     * <code>int64 upper_boundary = 3;</code>
     * @return The upperBoundary.
     */
    public long getUpperBoundary() {
      return upperBoundary_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (windowType_ != org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType.RANGE_UNBOUNDED.getNumber()) {
        output.writeEnum(1, windowType_);
      }
      if (lowerBoundary_ != 0L) {
        output.writeInt64(2, lowerBoundary_);
      }
      if (upperBoundary_ != 0L) {
        output.writeInt64(3, upperBoundary_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (windowType_ != org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType.RANGE_UNBOUNDED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, windowType_);
      }
      if (lowerBoundary_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, lowerBoundary_);
      }
      if (upperBoundary_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, upperBoundary_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow)) {
        return super.equals(obj);
      }
      org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow other = (org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow) obj;

      if (windowType_ != other.windowType_) return false;
      if (getLowerBoundary()
          != other.getLowerBoundary()) return false;
      if (getUpperBoundary()
          != other.getUpperBoundary()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + WINDOW_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + windowType_;
      hash = (37 * hash) + LOWER_BOUNDARY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getLowerBoundary());
      hash = (37 * hash) + UPPER_BOUNDARY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getUpperBoundary());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Used to describe the info of over window in pandas batch over window aggregation
     * </pre>
     *
     * Protobuf type {@code org.apache.flink.fn_execution.v1.OverWindow}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.OverWindow)
        org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindowOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_OverWindow_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_OverWindow_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.class, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder.class);
      }

      // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        windowType_ = 0;

        lowerBoundary_ = 0L;

        upperBoundary_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_OverWindow_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow getDefaultInstanceForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow build() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow buildPartial() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow result = new org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow(this);
        result.windowType_ = windowType_;
        result.lowerBoundary_ = lowerBoundary_;
        result.upperBoundary_ = upperBoundary_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow) {
          return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow other) {
        if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.getDefaultInstance()) return this;
        if (other.windowType_ != 0) {
          setWindowTypeValue(other.getWindowTypeValue());
        }
        if (other.getLowerBoundary() != 0L) {
          setLowerBoundary(other.getLowerBoundary());
        }
        if (other.getUpperBoundary() != 0L) {
          setUpperBoundary(other.getUpperBoundary());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int windowType_ = 0;
      /**
       * <code>.org.apache.flink.fn_execution.v1.OverWindow.WindowType window_type = 1;</code>
       * @return The enum numeric value on the wire for windowType.
       */
      public int getWindowTypeValue() {
        return windowType_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.OverWindow.WindowType window_type = 1;</code>
       * @param value The enum numeric value on the wire for windowType to set.
       * @return This builder for chaining.
       */
      public Builder setWindowTypeValue(int value) {
        windowType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.OverWindow.WindowType window_type = 1;</code>
       * @return The windowType.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType getWindowType() {
        @SuppressWarnings("deprecation")
        org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType result = org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType.valueOf(windowType_);
        return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType.UNRECOGNIZED : result;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.OverWindow.WindowType window_type = 1;</code>
       * @param value The windowType to set.
       * @return This builder for chaining.
       */
      public Builder setWindowType(org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        windowType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.OverWindow.WindowType window_type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearWindowType() {
        
        windowType_ = 0;
        onChanged();
        return this;
      }

      private long lowerBoundary_ ;
      /**
       * <code>int64 lower_boundary = 2;</code>
       * @return The lowerBoundary.
       */
      public long getLowerBoundary() {
        return lowerBoundary_;
      }
      /**
       * <code>int64 lower_boundary = 2;</code>
       * @param value The lowerBoundary to set.
       * @return This builder for chaining.
       */
      public Builder setLowerBoundary(long value) {
        
        lowerBoundary_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 lower_boundary = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearLowerBoundary() {
        
        lowerBoundary_ = 0L;
        onChanged();
        return this;
      }

      private long upperBoundary_ ;
      /**
       * <code>int64 upper_boundary = 3;</code>
       * @return The upperBoundary.
       */
      public long getUpperBoundary() {
        return upperBoundary_;
      }
      /**
       * <code>int64 upper_boundary = 3;</code>
       * @param value The upperBoundary to set.
       * @return This builder for chaining.
       */
      public Builder setUpperBoundary(long value) {
        
        upperBoundary_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 upper_boundary = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearUpperBoundary() {
        
        upperBoundary_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.OverWindow)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.OverWindow)
    private static final org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow();
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<OverWindow>
        PARSER = new com.google.protobuf.AbstractParser<OverWindow>() {
      @java.lang.Override
      public OverWindow parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OverWindow(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<OverWindow> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<OverWindow> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UserDefinedDataStreamFunctionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.FunctionType function_type = 1;</code>
     * @return The enum numeric value on the wire for functionType.
     */
    int getFunctionTypeValue();
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.FunctionType function_type = 1;</code>
     * @return The functionType.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType getFunctionType();

    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
     * @return Whether the runtimeContext field is set.
     */
    boolean hasRuntimeContext();
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
     * @return The runtimeContext.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext getRuntimeContext();
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContextOrBuilder getRuntimeContextOrBuilder();

    /**
     * <code>bytes payload = 3;</code>
     * @return The payload.
     */
    com.google.protobuf.ByteString getPayload();

    /**
     * <code>bool metric_enabled = 4;</code>
     * @return The metricEnabled.
     */
    boolean getMetricEnabled();

    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
     * @return Whether the keyTypeInfo field is set.
     */
    boolean hasKeyTypeInfo();
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
     * @return The keyTypeInfo.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getKeyTypeInfo();
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getKeyTypeInfoOrBuilder();
  }
  /**
   * <pre>
   * User defined DataStream function definition.
   * </pre>
   *
   * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction}
   */
  public  static final class UserDefinedDataStreamFunction extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction)
      UserDefinedDataStreamFunctionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UserDefinedDataStreamFunction.newBuilder() to construct.
    private UserDefinedDataStreamFunction(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UserDefinedDataStreamFunction() {
      functionType_ = 0;
      payload_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UserDefinedDataStreamFunction();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private UserDefinedDataStreamFunction(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              functionType_ = rawValue;
              break;
            }
            case 18: {
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.Builder subBuilder = null;
              if (runtimeContext_ != null) {
                subBuilder = runtimeContext_.toBuilder();
              }
              runtimeContext_ = input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(runtimeContext_);
                runtimeContext_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {

              payload_ = input.readBytes();
              break;
            }
            case 32: {

              metricEnabled_ = input.readBool();
              break;
            }
            case 42: {
              org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder subBuilder = null;
              if (keyTypeInfo_ != null) {
                subBuilder = keyTypeInfo_.toBuilder();
              }
              keyTypeInfo_ = input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(keyTypeInfo_);
                keyTypeInfo_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.Builder.class);
    }

    /**
     * Protobuf enum {@code org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.FunctionType}
     */
    public enum FunctionType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>MAP = 0;</code>
       */
      MAP(0),
      /**
       * <code>FLAT_MAP = 1;</code>
       */
      FLAT_MAP(1),
      /**
       * <code>REDUCE = 2;</code>
       */
      REDUCE(2),
      /**
       * <code>CO_MAP = 3;</code>
       */
      CO_MAP(3),
      /**
       * <code>CO_FLAT_MAP = 4;</code>
       */
      CO_FLAT_MAP(4),
      /**
       * <code>PROCESS = 5;</code>
       */
      PROCESS(5),
      /**
       * <code>KEYED_PROCESS = 6;</code>
       */
      KEYED_PROCESS(6),
      /**
       * <code>TIMESTAMP_ASSIGNER = 7;</code>
       */
      TIMESTAMP_ASSIGNER(7),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>MAP = 0;</code>
       */
      public static final int MAP_VALUE = 0;
      /**
       * <code>FLAT_MAP = 1;</code>
       */
      public static final int FLAT_MAP_VALUE = 1;
      /**
       * <code>REDUCE = 2;</code>
       */
      public static final int REDUCE_VALUE = 2;
      /**
       * <code>CO_MAP = 3;</code>
       */
      public static final int CO_MAP_VALUE = 3;
      /**
       * <code>CO_FLAT_MAP = 4;</code>
       */
      public static final int CO_FLAT_MAP_VALUE = 4;
      /**
       * <code>PROCESS = 5;</code>
       */
      public static final int PROCESS_VALUE = 5;
      /**
       * <code>KEYED_PROCESS = 6;</code>
       */
      public static final int KEYED_PROCESS_VALUE = 6;
      /**
       * <code>TIMESTAMP_ASSIGNER = 7;</code>
       */
      public static final int TIMESTAMP_ASSIGNER_VALUE = 7;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static FunctionType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static FunctionType forNumber(int value) {
        switch (value) {
          case 0: return MAP;
          case 1: return FLAT_MAP;
          case 2: return REDUCE;
          case 3: return CO_MAP;
          case 4: return CO_FLAT_MAP;
          case 5: return PROCESS;
          case 6: return KEYED_PROCESS;
          case 7: return TIMESTAMP_ASSIGNER;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<FunctionType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          FunctionType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FunctionType>() {
              public FunctionType findValueByNumber(int number) {
                return FunctionType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.getDescriptor().getEnumTypes().get(0);
      }

      private static final FunctionType[] VALUES = values();

      public static FunctionType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private FunctionType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.FunctionType)
    }

    public interface JobParameterOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string key = 1;</code>
       * @return The key.
       */
      java.lang.String getKey();
      /**
       * <code>string key = 1;</code>
       * @return The bytes for key.
       */
      com.google.protobuf.ByteString
          getKeyBytes();

      /**
       * <code>string value = 2;</code>
       * @return The value.
       */
      java.lang.String getValue();
      /**
       * <code>string value = 2;</code>
       * @return The bytes for value.
       */
      com.google.protobuf.ByteString
          getValueBytes();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter}
     */
    public  static final class JobParameter extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter)
        JobParameterOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use JobParameter.newBuilder() to construct.
      private JobParameter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private JobParameter() {
        key_ = "";
        value_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new JobParameter();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private JobParameter(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                key_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                value_ = s;
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_JobParameter_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_JobParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter.Builder.class);
      }

      public static final int KEY_FIELD_NUMBER = 1;
      private volatile java.lang.Object key_;
      /**
       * <code>string key = 1;</code>
       * @return The key.
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          key_ = s;
          return s;
        }
      }
      /**
       * <code>string key = 1;</code>
       * @return The bytes for key.
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int VALUE_FIELD_NUMBER = 2;
      private volatile java.lang.Object value_;
      /**
       * <code>string value = 2;</code>
       * @return The value.
       */
      public java.lang.String getValue() {
        java.lang.Object ref = value_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          value_ = s;
          return s;
        }
      }
      /**
       * <code>string value = 2;</code>
       * @return The bytes for value.
       */
      public com.google.protobuf.ByteString
          getValueBytes() {
        java.lang.Object ref = value_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          value_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getKeyBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, key_);
        }
        if (!getValueBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, value_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getKeyBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, key_);
        }
        if (!getValueBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, value_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter other = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter) obj;

        if (!getKey()
            .equals(other.getKey())) return false;
        if (!getValue()
            .equals(other.getValue())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + KEY_FIELD_NUMBER;
        hash = (53 * hash) + getKey().hashCode();
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getValue().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter)
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameterOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_JobParameter_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_JobParameter_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          key_ = "";

          value_ = "";

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_JobParameter_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter result = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter(this);
          result.key_ = key_;
          result.value_ = value_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter.getDefaultInstance()) return this;
          if (!other.getKey().isEmpty()) {
            key_ = other.key_;
            onChanged();
          }
          if (!other.getValue().isEmpty()) {
            value_ = other.value_;
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object key_ = "";
        /**
         * <code>string key = 1;</code>
         * @return The key.
         */
        public java.lang.String getKey() {
          java.lang.Object ref = key_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            key_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string key = 1;</code>
         * @return The bytes for key.
         */
        public com.google.protobuf.ByteString
            getKeyBytes() {
          java.lang.Object ref = key_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            key_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string key = 1;</code>
         * @param value The key to set.
         * @return This builder for chaining.
         */
        public Builder setKey(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          key_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string key = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearKey() {
          
          key_ = getDefaultInstance().getKey();
          onChanged();
          return this;
        }
        /**
         * <code>string key = 1;</code>
         * @param value The bytes for key to set.
         * @return This builder for chaining.
         */
        public Builder setKeyBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          key_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object value_ = "";
        /**
         * <code>string value = 2;</code>
         * @return The value.
         */
        public java.lang.String getValue() {
          java.lang.Object ref = value_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            value_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string value = 2;</code>
         * @return The bytes for value.
         */
        public com.google.protobuf.ByteString
            getValueBytes() {
          java.lang.Object ref = value_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            value_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string value = 2;</code>
         * @param value The value to set.
         * @return This builder for chaining.
         */
        public Builder setValue(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          value_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string value = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearValue() {
          
          value_ = getDefaultInstance().getValue();
          onChanged();
          return this;
        }
        /**
         * <code>string value = 2;</code>
         * @param value The bytes for value to set.
         * @return This builder for chaining.
         */
        public Builder setValueBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          value_ = value;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<JobParameter>
          PARSER = new com.google.protobuf.AbstractParser<JobParameter>() {
        @java.lang.Override
        public JobParameter parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new JobParameter(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<JobParameter> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<JobParameter> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface RuntimeContextOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string task_name = 1;</code>
       * @return The taskName.
       */
      java.lang.String getTaskName();
      /**
       * <code>string task_name = 1;</code>
       * @return The bytes for taskName.
       */
      com.google.protobuf.ByteString
          getTaskNameBytes();

      /**
       * <code>string task_name_with_subtasks = 2;</code>
       * @return The taskNameWithSubtasks.
       */
      java.lang.String getTaskNameWithSubtasks();
      /**
       * <code>string task_name_with_subtasks = 2;</code>
       * @return The bytes for taskNameWithSubtasks.
       */
      com.google.protobuf.ByteString
          getTaskNameWithSubtasksBytes();

      /**
       * <code>int32 number_of_parallel_subtasks = 3;</code>
       * @return The numberOfParallelSubtasks.
       */
      int getNumberOfParallelSubtasks();

      /**
       * <code>int32 max_number_of_parallel_subtasks = 4;</code>
       * @return The maxNumberOfParallelSubtasks.
       */
      int getMaxNumberOfParallelSubtasks();

      /**
       * <code>int32 index_of_this_subtask = 5;</code>
       * @return The indexOfThisSubtask.
       */
      int getIndexOfThisSubtask();

      /**
       * <code>int32 attempt_number = 6;</code>
       * @return The attemptNumber.
       */
      int getAttemptNumber();

      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
       */
      java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter> 
          getJobParametersList();
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter getJobParameters(int index);
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
       */
      int getJobParametersCount();
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
       */
      java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameterOrBuilder> 
          getJobParametersOrBuilderList();
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameterOrBuilder getJobParametersOrBuilder(
          int index);
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext}
     */
    public  static final class RuntimeContext extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext)
        RuntimeContextOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use RuntimeContext.newBuilder() to construct.
      private RuntimeContext(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private RuntimeContext() {
        taskName_ = "";
        taskNameWithSubtasks_ = "";
        jobParameters_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new RuntimeContext();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private RuntimeContext(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                taskName_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                taskNameWithSubtasks_ = s;
                break;
              }
              case 24: {

                numberOfParallelSubtasks_ = input.readInt32();
                break;
              }
              case 32: {

                maxNumberOfParallelSubtasks_ = input.readInt32();
                break;
              }
              case 40: {

                indexOfThisSubtask_ = input.readInt32();
                break;
              }
              case 48: {

                attemptNumber_ = input.readInt32();
                break;
              }
              case 58: {
                if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                  jobParameters_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter>();
                  mutable_bitField0_ |= 0x00000001;
                }
                jobParameters_.add(
                    input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter.parser(), extensionRegistry));
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) != 0)) {
            jobParameters_ = java.util.Collections.unmodifiableList(jobParameters_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_RuntimeContext_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_RuntimeContext_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.Builder.class);
      }

      public static final int TASK_NAME_FIELD_NUMBER = 1;
      private volatile java.lang.Object taskName_;
      /**
       * <code>string task_name = 1;</code>
       * @return The taskName.
       */
      public java.lang.String getTaskName() {
        java.lang.Object ref = taskName_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          taskName_ = s;
          return s;
        }
      }
      /**
       * <code>string task_name = 1;</code>
       * @return The bytes for taskName.
       */
      public com.google.protobuf.ByteString
          getTaskNameBytes() {
        java.lang.Object ref = taskName_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          taskName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int TASK_NAME_WITH_SUBTASKS_FIELD_NUMBER = 2;
      private volatile java.lang.Object taskNameWithSubtasks_;
      /**
       * <code>string task_name_with_subtasks = 2;</code>
       * @return The taskNameWithSubtasks.
       */
      public java.lang.String getTaskNameWithSubtasks() {
        java.lang.Object ref = taskNameWithSubtasks_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          taskNameWithSubtasks_ = s;
          return s;
        }
      }
      /**
       * <code>string task_name_with_subtasks = 2;</code>
       * @return The bytes for taskNameWithSubtasks.
       */
      public com.google.protobuf.ByteString
          getTaskNameWithSubtasksBytes() {
        java.lang.Object ref = taskNameWithSubtasks_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          taskNameWithSubtasks_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int NUMBER_OF_PARALLEL_SUBTASKS_FIELD_NUMBER = 3;
      private int numberOfParallelSubtasks_;
      /**
       * <code>int32 number_of_parallel_subtasks = 3;</code>
       * @return The numberOfParallelSubtasks.
       */
      public int getNumberOfParallelSubtasks() {
        return numberOfParallelSubtasks_;
      }

      public static final int MAX_NUMBER_OF_PARALLEL_SUBTASKS_FIELD_NUMBER = 4;
      private int maxNumberOfParallelSubtasks_;
      /**
       * <code>int32 max_number_of_parallel_subtasks = 4;</code>
       * @return The maxNumberOfParallelSubtasks.
       */
      public int getMaxNumberOfParallelSubtasks() {
        return maxNumberOfParallelSubtasks_;
      }

      public static final int INDEX_OF_THIS_SUBTASK_FIELD_NUMBER = 5;
      private int indexOfThisSubtask_;
      /**
       * <code>int32 index_of_this_subtask = 5;</code>
       * @return The indexOfThisSubtask.
       */
      public int getIndexOfThisSubtask() {
        return indexOfThisSubtask_;
      }

      public static final int ATTEMPT_NUMBER_FIELD_NUMBER = 6;
      private int attemptNumber_;
      /**
       * <code>int32 attempt_number = 6;</code>
       * @return The attemptNumber.
       */
      public int getAttemptNumber() {
        return attemptNumber_;
      }

      public static final int JOB_PARAMETERS_FIELD_NUMBER = 7;
      private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter> jobParameters_;
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter> getJobParametersList() {
        return jobParameters_;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
       */
      public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameterOrBuilder> 
          getJobParametersOrBuilderList() {
        return jobParameters_;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
       */
      public int getJobParametersCount() {
        return jobParameters_.size();
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter getJobParameters(int index) {
        return jobParameters_.get(index);
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameterOrBuilder getJobParametersOrBuilder(
          int index) {
        return jobParameters_.get(index);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getTaskNameBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, taskName_);
        }
        if (!getTaskNameWithSubtasksBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, taskNameWithSubtasks_);
        }
        if (numberOfParallelSubtasks_ != 0) {
          output.writeInt32(3, numberOfParallelSubtasks_);
        }
        if (maxNumberOfParallelSubtasks_ != 0) {
          output.writeInt32(4, maxNumberOfParallelSubtasks_);
        }
        if (indexOfThisSubtask_ != 0) {
          output.writeInt32(5, indexOfThisSubtask_);
        }
        if (attemptNumber_ != 0) {
          output.writeInt32(6, attemptNumber_);
        }
        for (int i = 0; i < jobParameters_.size(); i++) {
          output.writeMessage(7, jobParameters_.get(i));
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getTaskNameBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, taskName_);
        }
        if (!getTaskNameWithSubtasksBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, taskNameWithSubtasks_);
        }
        if (numberOfParallelSubtasks_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, numberOfParallelSubtasks_);
        }
        if (maxNumberOfParallelSubtasks_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(4, maxNumberOfParallelSubtasks_);
        }
        if (indexOfThisSubtask_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(5, indexOfThisSubtask_);
        }
        if (attemptNumber_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(6, attemptNumber_);
        }
        for (int i = 0; i < jobParameters_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(7, jobParameters_.get(i));
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext other = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext) obj;

        if (!getTaskName()
            .equals(other.getTaskName())) return false;
        if (!getTaskNameWithSubtasks()
            .equals(other.getTaskNameWithSubtasks())) return false;
        if (getNumberOfParallelSubtasks()
            != other.getNumberOfParallelSubtasks()) return false;
        if (getMaxNumberOfParallelSubtasks()
            != other.getMaxNumberOfParallelSubtasks()) return false;
        if (getIndexOfThisSubtask()
            != other.getIndexOfThisSubtask()) return false;
        if (getAttemptNumber()
            != other.getAttemptNumber()) return false;
        if (!getJobParametersList()
            .equals(other.getJobParametersList())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + TASK_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getTaskName().hashCode();
        hash = (37 * hash) + TASK_NAME_WITH_SUBTASKS_FIELD_NUMBER;
        hash = (53 * hash) + getTaskNameWithSubtasks().hashCode();
        hash = (37 * hash) + NUMBER_OF_PARALLEL_SUBTASKS_FIELD_NUMBER;
        hash = (53 * hash) + getNumberOfParallelSubtasks();
        hash = (37 * hash) + MAX_NUMBER_OF_PARALLEL_SUBTASKS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxNumberOfParallelSubtasks();
        hash = (37 * hash) + INDEX_OF_THIS_SUBTASK_FIELD_NUMBER;
        hash = (53 * hash) + getIndexOfThisSubtask();
        hash = (37 * hash) + ATTEMPT_NUMBER_FIELD_NUMBER;
        hash = (53 * hash) + getAttemptNumber();
        if (getJobParametersCount() > 0) {
          hash = (37 * hash) + JOB_PARAMETERS_FIELD_NUMBER;
          hash = (53 * hash) + getJobParametersList().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext)
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContextOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_RuntimeContext_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_RuntimeContext_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getJobParametersFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          taskName_ = "";

          taskNameWithSubtasks_ = "";

          numberOfParallelSubtasks_ = 0;

          maxNumberOfParallelSubtasks_ = 0;

          indexOfThisSubtask_ = 0;

          attemptNumber_ = 0;

          if (jobParametersBuilder_ == null) {
            jobParameters_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            jobParametersBuilder_.clear();
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_RuntimeContext_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext result = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext(this);
          int from_bitField0_ = bitField0_;
          result.taskName_ = taskName_;
          result.taskNameWithSubtasks_ = taskNameWithSubtasks_;
          result.numberOfParallelSubtasks_ = numberOfParallelSubtasks_;
          result.maxNumberOfParallelSubtasks_ = maxNumberOfParallelSubtasks_;
          result.indexOfThisSubtask_ = indexOfThisSubtask_;
          result.attemptNumber_ = attemptNumber_;
          if (jobParametersBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0)) {
              jobParameters_ = java.util.Collections.unmodifiableList(jobParameters_);
              bitField0_ = (bitField0_ & ~0x00000001);
            }
            result.jobParameters_ = jobParameters_;
          } else {
            result.jobParameters_ = jobParametersBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.getDefaultInstance()) return this;
          if (!other.getTaskName().isEmpty()) {
            taskName_ = other.taskName_;
            onChanged();
          }
          if (!other.getTaskNameWithSubtasks().isEmpty()) {
            taskNameWithSubtasks_ = other.taskNameWithSubtasks_;
            onChanged();
          }
          if (other.getNumberOfParallelSubtasks() != 0) {
            setNumberOfParallelSubtasks(other.getNumberOfParallelSubtasks());
          }
          if (other.getMaxNumberOfParallelSubtasks() != 0) {
            setMaxNumberOfParallelSubtasks(other.getMaxNumberOfParallelSubtasks());
          }
          if (other.getIndexOfThisSubtask() != 0) {
            setIndexOfThisSubtask(other.getIndexOfThisSubtask());
          }
          if (other.getAttemptNumber() != 0) {
            setAttemptNumber(other.getAttemptNumber());
          }
          if (jobParametersBuilder_ == null) {
            if (!other.jobParameters_.isEmpty()) {
              if (jobParameters_.isEmpty()) {
                jobParameters_ = other.jobParameters_;
                bitField0_ = (bitField0_ & ~0x00000001);
              } else {
                ensureJobParametersIsMutable();
                jobParameters_.addAll(other.jobParameters_);
              }
              onChanged();
            }
          } else {
            if (!other.jobParameters_.isEmpty()) {
              if (jobParametersBuilder_.isEmpty()) {
                jobParametersBuilder_.dispose();
                jobParametersBuilder_ = null;
                jobParameters_ = other.jobParameters_;
                bitField0_ = (bitField0_ & ~0x00000001);
                jobParametersBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getJobParametersFieldBuilder() : null;
              } else {
                jobParametersBuilder_.addAllMessages(other.jobParameters_);
              }
            }
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.lang.Object taskName_ = "";
        /**
         * <code>string task_name = 1;</code>
         * @return The taskName.
         */
        public java.lang.String getTaskName() {
          java.lang.Object ref = taskName_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            taskName_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string task_name = 1;</code>
         * @return The bytes for taskName.
         */
        public com.google.protobuf.ByteString
            getTaskNameBytes() {
          java.lang.Object ref = taskName_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            taskName_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string task_name = 1;</code>
         * @param value The taskName to set.
         * @return This builder for chaining.
         */
        public Builder setTaskName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          taskName_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string task_name = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearTaskName() {
          
          taskName_ = getDefaultInstance().getTaskName();
          onChanged();
          return this;
        }
        /**
         * <code>string task_name = 1;</code>
         * @param value The bytes for taskName to set.
         * @return This builder for chaining.
         */
        public Builder setTaskNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          taskName_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object taskNameWithSubtasks_ = "";
        /**
         * <code>string task_name_with_subtasks = 2;</code>
         * @return The taskNameWithSubtasks.
         */
        public java.lang.String getTaskNameWithSubtasks() {
          java.lang.Object ref = taskNameWithSubtasks_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            taskNameWithSubtasks_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string task_name_with_subtasks = 2;</code>
         * @return The bytes for taskNameWithSubtasks.
         */
        public com.google.protobuf.ByteString
            getTaskNameWithSubtasksBytes() {
          java.lang.Object ref = taskNameWithSubtasks_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            taskNameWithSubtasks_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string task_name_with_subtasks = 2;</code>
         * @param value The taskNameWithSubtasks to set.
         * @return This builder for chaining.
         */
        public Builder setTaskNameWithSubtasks(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          taskNameWithSubtasks_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string task_name_with_subtasks = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearTaskNameWithSubtasks() {
          
          taskNameWithSubtasks_ = getDefaultInstance().getTaskNameWithSubtasks();
          onChanged();
          return this;
        }
        /**
         * <code>string task_name_with_subtasks = 2;</code>
         * @param value The bytes for taskNameWithSubtasks to set.
         * @return This builder for chaining.
         */
        public Builder setTaskNameWithSubtasksBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          taskNameWithSubtasks_ = value;
          onChanged();
          return this;
        }

        private int numberOfParallelSubtasks_ ;
        /**
         * <code>int32 number_of_parallel_subtasks = 3;</code>
         * @return The numberOfParallelSubtasks.
         */
        public int getNumberOfParallelSubtasks() {
          return numberOfParallelSubtasks_;
        }
        /**
         * <code>int32 number_of_parallel_subtasks = 3;</code>
         * @param value The numberOfParallelSubtasks to set.
         * @return This builder for chaining.
         */
        public Builder setNumberOfParallelSubtasks(int value) {
          
          numberOfParallelSubtasks_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 number_of_parallel_subtasks = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearNumberOfParallelSubtasks() {
          
          numberOfParallelSubtasks_ = 0;
          onChanged();
          return this;
        }

        private int maxNumberOfParallelSubtasks_ ;
        /**
         * <code>int32 max_number_of_parallel_subtasks = 4;</code>
         * @return The maxNumberOfParallelSubtasks.
         */
        public int getMaxNumberOfParallelSubtasks() {
          return maxNumberOfParallelSubtasks_;
        }
        /**
         * <code>int32 max_number_of_parallel_subtasks = 4;</code>
         * @param value The maxNumberOfParallelSubtasks to set.
         * @return This builder for chaining.
         */
        public Builder setMaxNumberOfParallelSubtasks(int value) {
          
          maxNumberOfParallelSubtasks_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 max_number_of_parallel_subtasks = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearMaxNumberOfParallelSubtasks() {
          
          maxNumberOfParallelSubtasks_ = 0;
          onChanged();
          return this;
        }

        private int indexOfThisSubtask_ ;
        /**
         * <code>int32 index_of_this_subtask = 5;</code>
         * @return The indexOfThisSubtask.
         */
        public int getIndexOfThisSubtask() {
          return indexOfThisSubtask_;
        }
        /**
         * <code>int32 index_of_this_subtask = 5;</code>
         * @param value The indexOfThisSubtask to set.
         * @return This builder for chaining.
         */
        public Builder setIndexOfThisSubtask(int value) {
          
          indexOfThisSubtask_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 index_of_this_subtask = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearIndexOfThisSubtask() {
          
          indexOfThisSubtask_ = 0;
          onChanged();
          return this;
        }

        private int attemptNumber_ ;
        /**
         * <code>int32 attempt_number = 6;</code>
         * @return The attemptNumber.
         */
        public int getAttemptNumber() {
          return attemptNumber_;
        }
        /**
         * <code>int32 attempt_number = 6;</code>
         * @param value The attemptNumber to set.
         * @return This builder for chaining.
         */
        public Builder setAttemptNumber(int value) {
          
          attemptNumber_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 attempt_number = 6;</code>
         * @return This builder for chaining.
         */
        public Builder clearAttemptNumber() {
          
          attemptNumber_ = 0;
          onChanged();
          return this;
        }

        private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter> jobParameters_ =
          java.util.Collections.emptyList();
        private void ensureJobParametersIsMutable() {
          if (!((bitField0_ & 0x00000001) != 0)) {
            jobParameters_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter>(jobParameters_);
            bitField0_ |= 0x00000001;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameterOrBuilder> jobParametersBuilder_;

        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
         */
        public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter> getJobParametersList() {
          if (jobParametersBuilder_ == null) {
            return java.util.Collections.unmodifiableList(jobParameters_);
          } else {
            return jobParametersBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
         */
        public int getJobParametersCount() {
          if (jobParametersBuilder_ == null) {
            return jobParameters_.size();
          } else {
            return jobParametersBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter getJobParameters(int index) {
          if (jobParametersBuilder_ == null) {
            return jobParameters_.get(index);
          } else {
            return jobParametersBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
         */
        public Builder setJobParameters(
            int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter value) {
          if (jobParametersBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureJobParametersIsMutable();
            jobParameters_.set(index, value);
            onChanged();
          } else {
            jobParametersBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
         */
        public Builder setJobParameters(
            int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter.Builder builderForValue) {
          if (jobParametersBuilder_ == null) {
            ensureJobParametersIsMutable();
            jobParameters_.set(index, builderForValue.build());
            onChanged();
          } else {
            jobParametersBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
         */
        public Builder addJobParameters(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter value) {
          if (jobParametersBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureJobParametersIsMutable();
            jobParameters_.add(value);
            onChanged();
          } else {
            jobParametersBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
         */
        public Builder addJobParameters(
            int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter value) {
          if (jobParametersBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureJobParametersIsMutable();
            jobParameters_.add(index, value);
            onChanged();
          } else {
            jobParametersBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
         */
        public Builder addJobParameters(
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter.Builder builderForValue) {
          if (jobParametersBuilder_ == null) {
            ensureJobParametersIsMutable();
            jobParameters_.add(builderForValue.build());
            onChanged();
          } else {
            jobParametersBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
         */
        public Builder addJobParameters(
            int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter.Builder builderForValue) {
          if (jobParametersBuilder_ == null) {
            ensureJobParametersIsMutable();
            jobParameters_.add(index, builderForValue.build());
            onChanged();
          } else {
            jobParametersBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
         */
        public Builder addAllJobParameters(
            java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter> values) {
          if (jobParametersBuilder_ == null) {
            ensureJobParametersIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, jobParameters_);
            onChanged();
          } else {
            jobParametersBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
         */
        public Builder clearJobParameters() {
          if (jobParametersBuilder_ == null) {
            jobParameters_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
          } else {
            jobParametersBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
         */
        public Builder removeJobParameters(int index) {
          if (jobParametersBuilder_ == null) {
            ensureJobParametersIsMutable();
            jobParameters_.remove(index);
            onChanged();
          } else {
            jobParametersBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter.Builder getJobParametersBuilder(
            int index) {
          return getJobParametersFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameterOrBuilder getJobParametersOrBuilder(
            int index) {
          if (jobParametersBuilder_ == null) {
            return jobParameters_.get(index);  } else {
            return jobParametersBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
         */
        public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameterOrBuilder> 
             getJobParametersOrBuilderList() {
          if (jobParametersBuilder_ != null) {
            return jobParametersBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(jobParameters_);
          }
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter.Builder addJobParametersBuilder() {
          return getJobParametersFieldBuilder().addBuilder(
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter.getDefaultInstance());
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter.Builder addJobParametersBuilder(
            int index) {
          return getJobParametersFieldBuilder().addBuilder(
              index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter.getDefaultInstance());
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.JobParameter job_parameters = 7;</code>
         */
        public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter.Builder> 
             getJobParametersBuilderList() {
          return getJobParametersFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameterOrBuilder> 
            getJobParametersFieldBuilder() {
          if (jobParametersBuilder_ == null) {
            jobParametersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameter.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.JobParameterOrBuilder>(
                    jobParameters_,
                    ((bitField0_ & 0x00000001) != 0),
                    getParentForChildren(),
                    isClean());
            jobParameters_ = null;
          }
          return jobParametersBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<RuntimeContext>
          PARSER = new com.google.protobuf.AbstractParser<RuntimeContext>() {
        @java.lang.Override
        public RuntimeContext parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new RuntimeContext(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<RuntimeContext> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<RuntimeContext> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int FUNCTION_TYPE_FIELD_NUMBER = 1;
    private int functionType_;
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.FunctionType function_type = 1;</code>
     * @return The enum numeric value on the wire for functionType.
     */
    public int getFunctionTypeValue() {
      return functionType_;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.FunctionType function_type = 1;</code>
     * @return The functionType.
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType getFunctionType() {
      @SuppressWarnings("deprecation")
      org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType result = org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType.valueOf(functionType_);
      return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType.UNRECOGNIZED : result;
    }

    public static final int RUNTIME_CONTEXT_FIELD_NUMBER = 2;
    private org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext runtimeContext_;
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
     * @return Whether the runtimeContext field is set.
     */
    public boolean hasRuntimeContext() {
      return runtimeContext_ != null;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
     * @return The runtimeContext.
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext getRuntimeContext() {
      return runtimeContext_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.getDefaultInstance() : runtimeContext_;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContextOrBuilder getRuntimeContextOrBuilder() {
      return getRuntimeContext();
    }

    public static final int PAYLOAD_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString payload_;
    /**
     * <code>bytes payload = 3;</code>
     * @return The payload.
     */
    public com.google.protobuf.ByteString getPayload() {
      return payload_;
    }

    public static final int METRIC_ENABLED_FIELD_NUMBER = 4;
    private boolean metricEnabled_;
    /**
     * <code>bool metric_enabled = 4;</code>
     * @return The metricEnabled.
     */
    public boolean getMetricEnabled() {
      return metricEnabled_;
    }

    public static final int KEY_TYPE_INFO_FIELD_NUMBER = 5;
    private org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo keyTypeInfo_;
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
     * @return Whether the keyTypeInfo field is set.
     */
    public boolean hasKeyTypeInfo() {
      return keyTypeInfo_ != null;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
     * @return The keyTypeInfo.
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getKeyTypeInfo() {
      return keyTypeInfo_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance() : keyTypeInfo_;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getKeyTypeInfoOrBuilder() {
      return getKeyTypeInfo();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (functionType_ != org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType.MAP.getNumber()) {
        output.writeEnum(1, functionType_);
      }
      if (runtimeContext_ != null) {
        output.writeMessage(2, getRuntimeContext());
      }
      if (!payload_.isEmpty()) {
        output.writeBytes(3, payload_);
      }
      if (metricEnabled_ != false) {
        output.writeBool(4, metricEnabled_);
      }
      if (keyTypeInfo_ != null) {
        output.writeMessage(5, getKeyTypeInfo());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (functionType_ != org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType.MAP.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, functionType_);
      }
      if (runtimeContext_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getRuntimeContext());
      }
      if (!payload_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, payload_);
      }
      if (metricEnabled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, metricEnabled_);
      }
      if (keyTypeInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getKeyTypeInfo());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction)) {
        return super.equals(obj);
      }
      org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction other = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction) obj;

      if (functionType_ != other.functionType_) return false;
      if (hasRuntimeContext() != other.hasRuntimeContext()) return false;
      if (hasRuntimeContext()) {
        if (!getRuntimeContext()
            .equals(other.getRuntimeContext())) return false;
      }
      if (!getPayload()
          .equals(other.getPayload())) return false;
      if (getMetricEnabled()
          != other.getMetricEnabled()) return false;
      if (hasKeyTypeInfo() != other.hasKeyTypeInfo()) return false;
      if (hasKeyTypeInfo()) {
        if (!getKeyTypeInfo()
            .equals(other.getKeyTypeInfo())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + FUNCTION_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + functionType_;
      if (hasRuntimeContext()) {
        hash = (37 * hash) + RUNTIME_CONTEXT_FIELD_NUMBER;
        hash = (53 * hash) + getRuntimeContext().hashCode();
      }
      hash = (37 * hash) + PAYLOAD_FIELD_NUMBER;
      hash = (53 * hash) + getPayload().hashCode();
      hash = (37 * hash) + METRIC_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getMetricEnabled());
      if (hasKeyTypeInfo()) {
        hash = (37 * hash) + KEY_TYPE_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getKeyTypeInfo().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * User defined DataStream function definition.
     * </pre>
     *
     * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction)
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunctionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.Builder.class);
      }

      // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        functionType_ = 0;

        if (runtimeContextBuilder_ == null) {
          runtimeContext_ = null;
        } else {
          runtimeContext_ = null;
          runtimeContextBuilder_ = null;
        }
        payload_ = com.google.protobuf.ByteString.EMPTY;

        metricEnabled_ = false;

        if (keyTypeInfoBuilder_ == null) {
          keyTypeInfo_ = null;
        } else {
          keyTypeInfo_ = null;
          keyTypeInfoBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction getDefaultInstanceForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction build() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction buildPartial() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction result = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction(this);
        result.functionType_ = functionType_;
        if (runtimeContextBuilder_ == null) {
          result.runtimeContext_ = runtimeContext_;
        } else {
          result.runtimeContext_ = runtimeContextBuilder_.build();
        }
        result.payload_ = payload_;
        result.metricEnabled_ = metricEnabled_;
        if (keyTypeInfoBuilder_ == null) {
          result.keyTypeInfo_ = keyTypeInfo_;
        } else {
          result.keyTypeInfo_ = keyTypeInfoBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction) {
          return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction other) {
        if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.getDefaultInstance()) return this;
        if (other.functionType_ != 0) {
          setFunctionTypeValue(other.getFunctionTypeValue());
        }
        if (other.hasRuntimeContext()) {
          mergeRuntimeContext(other.getRuntimeContext());
        }
        if (other.getPayload() != com.google.protobuf.ByteString.EMPTY) {
          setPayload(other.getPayload());
        }
        if (other.getMetricEnabled() != false) {
          setMetricEnabled(other.getMetricEnabled());
        }
        if (other.hasKeyTypeInfo()) {
          mergeKeyTypeInfo(other.getKeyTypeInfo());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int functionType_ = 0;
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.FunctionType function_type = 1;</code>
       * @return The enum numeric value on the wire for functionType.
       */
      public int getFunctionTypeValue() {
        return functionType_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.FunctionType function_type = 1;</code>
       * @param value The enum numeric value on the wire for functionType to set.
       * @return This builder for chaining.
       */
      public Builder setFunctionTypeValue(int value) {
        functionType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.FunctionType function_type = 1;</code>
       * @return The functionType.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType getFunctionType() {
        @SuppressWarnings("deprecation")
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType result = org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType.valueOf(functionType_);
        return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType.UNRECOGNIZED : result;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.FunctionType function_type = 1;</code>
       * @param value The functionType to set.
       * @return This builder for chaining.
       */
      public Builder setFunctionType(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        functionType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.FunctionType function_type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearFunctionType() {
        
        functionType_ = 0;
        onChanged();
        return this;
      }

      private org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext runtimeContext_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContextOrBuilder> runtimeContextBuilder_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
       * @return Whether the runtimeContext field is set.
       */
      public boolean hasRuntimeContext() {
        return runtimeContextBuilder_ != null || runtimeContext_ != null;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
       * @return The runtimeContext.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext getRuntimeContext() {
        if (runtimeContextBuilder_ == null) {
          return runtimeContext_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.getDefaultInstance() : runtimeContext_;
        } else {
          return runtimeContextBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
       */
      public Builder setRuntimeContext(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext value) {
        if (runtimeContextBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          runtimeContext_ = value;
          onChanged();
        } else {
          runtimeContextBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
       */
      public Builder setRuntimeContext(
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.Builder builderForValue) {
        if (runtimeContextBuilder_ == null) {
          runtimeContext_ = builderForValue.build();
          onChanged();
        } else {
          runtimeContextBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
       */
      public Builder mergeRuntimeContext(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext value) {
        if (runtimeContextBuilder_ == null) {
          if (runtimeContext_ != null) {
            runtimeContext_ =
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.newBuilder(runtimeContext_).mergeFrom(value).buildPartial();
          } else {
            runtimeContext_ = value;
          }
          onChanged();
        } else {
          runtimeContextBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
       */
      public Builder clearRuntimeContext() {
        if (runtimeContextBuilder_ == null) {
          runtimeContext_ = null;
          onChanged();
        } else {
          runtimeContext_ = null;
          runtimeContextBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.Builder getRuntimeContextBuilder() {
        
        onChanged();
        return getRuntimeContextFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContextOrBuilder getRuntimeContextOrBuilder() {
        if (runtimeContextBuilder_ != null) {
          return runtimeContextBuilder_.getMessageOrBuilder();
        } else {
          return runtimeContext_ == null ?
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.getDefaultInstance() : runtimeContext_;
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContextOrBuilder> 
          getRuntimeContextFieldBuilder() {
        if (runtimeContextBuilder_ == null) {
          runtimeContextBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContextOrBuilder>(
                  getRuntimeContext(),
                  getParentForChildren(),
                  isClean());
          runtimeContext_ = null;
        }
        return runtimeContextBuilder_;
      }

      private com.google.protobuf.ByteString payload_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes payload = 3;</code>
       * @return The payload.
       */
      public com.google.protobuf.ByteString getPayload() {
        return payload_;
      }
      /**
       * <code>bytes payload = 3;</code>
       * @param value The payload to set.
       * @return This builder for chaining.
       */
      public Builder setPayload(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        payload_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes payload = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearPayload() {
        
        payload_ = getDefaultInstance().getPayload();
        onChanged();
        return this;
      }

      private boolean metricEnabled_ ;
      /**
       * <code>bool metric_enabled = 4;</code>
       * @return The metricEnabled.
       */
      public boolean getMetricEnabled() {
        return metricEnabled_;
      }
      /**
       * <code>bool metric_enabled = 4;</code>
       * @param value The metricEnabled to set.
       * @return This builder for chaining.
       */
      public Builder setMetricEnabled(boolean value) {
        
        metricEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool metric_enabled = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearMetricEnabled() {
        
        metricEnabled_ = false;
        onChanged();
        return this;
      }

      private org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo keyTypeInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> keyTypeInfoBuilder_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
       * @return Whether the keyTypeInfo field is set.
       */
      public boolean hasKeyTypeInfo() {
        return keyTypeInfoBuilder_ != null || keyTypeInfo_ != null;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
       * @return The keyTypeInfo.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getKeyTypeInfo() {
        if (keyTypeInfoBuilder_ == null) {
          return keyTypeInfo_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance() : keyTypeInfo_;
        } else {
          return keyTypeInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
       */
      public Builder setKeyTypeInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo value) {
        if (keyTypeInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          keyTypeInfo_ = value;
          onChanged();
        } else {
          keyTypeInfoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
       */
      public Builder setKeyTypeInfo(
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder builderForValue) {
        if (keyTypeInfoBuilder_ == null) {
          keyTypeInfo_ = builderForValue.build();
          onChanged();
        } else {
          keyTypeInfoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
       */
      public Builder mergeKeyTypeInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo value) {
        if (keyTypeInfoBuilder_ == null) {
          if (keyTypeInfo_ != null) {
            keyTypeInfo_ =
              org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.newBuilder(keyTypeInfo_).mergeFrom(value).buildPartial();
          } else {
            keyTypeInfo_ = value;
          }
          onChanged();
        } else {
          keyTypeInfoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
       */
      public Builder clearKeyTypeInfo() {
        if (keyTypeInfoBuilder_ == null) {
          keyTypeInfo_ = null;
          onChanged();
        } else {
          keyTypeInfo_ = null;
          keyTypeInfoBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder getKeyTypeInfoBuilder() {
        
        onChanged();
        return getKeyTypeInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getKeyTypeInfoOrBuilder() {
        if (keyTypeInfoBuilder_ != null) {
          return keyTypeInfoBuilder_.getMessageOrBuilder();
        } else {
          return keyTypeInfo_ == null ?
              org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance() : keyTypeInfo_;
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> 
          getKeyTypeInfoFieldBuilder() {
        if (keyTypeInfoBuilder_ == null) {
          keyTypeInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder>(
                  getKeyTypeInfo(),
                  getParentForChildren(),
                  isClean());
          keyTypeInfo_ = null;
        }
        return keyTypeInfoBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction)
    private static final org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction();
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UserDefinedDataStreamFunction>
        PARSER = new com.google.protobuf.AbstractParser<UserDefinedDataStreamFunction>() {
      @java.lang.Override
      public UserDefinedDataStreamFunction parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new UserDefinedDataStreamFunction(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<UserDefinedDataStreamFunction> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UserDefinedDataStreamFunction> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UserDefinedAggregateFunctionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The serialized representation of the user-defined function
     * </pre>
     *
     * <code>bytes payload = 1;</code>
     * @return The payload.
     */
    com.google.protobuf.ByteString getPayload();

    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input> 
        getInputsList();
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.Input getInputs(int index);
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    int getInputsCount();
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder> 
        getInputsOrBuilderList();
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder getInputsOrBuilder(
        int index);

    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
     */
    java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec> 
        getSpecsList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec getSpecs(int index);
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
     */
    int getSpecsCount();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
     */
    java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpecOrBuilder> 
        getSpecsOrBuilderList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpecOrBuilder getSpecsOrBuilder(
        int index);

    /**
     * <code>int32 filter_arg = 4;</code>
     * @return The filterArg.
     */
    int getFilterArg();

    /**
     * <code>bool distinct = 5;</code>
     * @return The distinct.
     */
    boolean getDistinct();
  }
  /**
   * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction}
   */
  public  static final class UserDefinedAggregateFunction extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction)
      UserDefinedAggregateFunctionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UserDefinedAggregateFunction.newBuilder() to construct.
    private UserDefinedAggregateFunction(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UserDefinedAggregateFunction() {
      payload_ = com.google.protobuf.ByteString.EMPTY;
      inputs_ = java.util.Collections.emptyList();
      specs_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UserDefinedAggregateFunction();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private UserDefinedAggregateFunction(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {

              payload_ = input.readBytes();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                inputs_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.Input>();
                mutable_bitField0_ |= 0x00000001;
              }
              inputs_.add(
                  input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.Input.parser(), extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                specs_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec>();
                mutable_bitField0_ |= 0x00000002;
              }
              specs_.add(
                  input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.parser(), extensionRegistry));
              break;
            }
            case 32: {

              filterArg_ = input.readInt32();
              break;
            }
            case 40: {

              distinct_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          inputs_ = java.util.Collections.unmodifiableList(inputs_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          specs_ = java.util.Collections.unmodifiableList(specs_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder.class);
    }

    public interface DataViewSpecOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string name = 1;</code>
       * @return The name.
       */
      java.lang.String getName();
      /**
       * <code>string name = 1;</code>
       * @return The bytes for name.
       */
      com.google.protobuf.ByteString
          getNameBytes();

      /**
       * <code>int32 field_index = 2;</code>
       * @return The fieldIndex.
       */
      int getFieldIndex();

      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
       * @return Whether the listView field is set.
       */
      boolean hasListView();
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
       * @return The listView.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView getListView();
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListViewOrBuilder getListViewOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
       * @return Whether the mapView field is set.
       */
      boolean hasMapView();
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
       * @return The mapView.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView getMapView();
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapViewOrBuilder getMapViewOrBuilder();

      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.DataViewCase getDataViewCase();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec}
     */
    public  static final class DataViewSpec extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec)
        DataViewSpecOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use DataViewSpec.newBuilder() to construct.
      private DataViewSpec(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private DataViewSpec() {
        name_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new DataViewSpec();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private DataViewSpec(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                name_ = s;
                break;
              }
              case 16: {

                fieldIndex_ = input.readInt32();
                break;
              }
              case 26: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.Builder subBuilder = null;
                if (dataViewCase_ == 3) {
                  subBuilder = ((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) dataView_).toBuilder();
                }
                dataView_ =
                    input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) dataView_);
                  dataView_ = subBuilder.buildPartial();
                }
                dataViewCase_ = 3;
                break;
              }
              case 34: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.Builder subBuilder = null;
                if (dataViewCase_ == 4) {
                  subBuilder = ((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) dataView_).toBuilder();
                }
                dataView_ =
                    input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) dataView_);
                  dataView_ = subBuilder.buildPartial();
                }
                dataViewCase_ = 4;
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder.class);
      }

      public interface ListViewOrBuilder extends
          // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
         * @return Whether the elementType field is set.
         */
        boolean hasElementType();
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
         * @return The elementType.
         */
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getElementType();
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
         */
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getElementTypeOrBuilder();
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView}
       */
      public  static final class ListView extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView)
          ListViewOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use ListView.newBuilder() to construct.
        private ListView(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private ListView() {
        }

        @java.lang.Override
        @SuppressWarnings({"unused"})
        protected java.lang.Object newInstance(
            UnusedPrivateParameter unused) {
          return new ListView();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        private ListView(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          this();
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder subBuilder = null;
                  if (elementType_ != null) {
                    subBuilder = elementType_.toBuilder();
                  }
                  elementType_ = input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(elementType_);
                    elementType_ = subBuilder.buildPartial();
                  }

                  break;
                }
                default: {
                  if (!parseUnknownField(
                      input, unknownFields, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_ListView_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_ListView_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.Builder.class);
        }

        public static final int ELEMENT_TYPE_FIELD_NUMBER = 1;
        private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType elementType_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
         * @return Whether the elementType field is set.
         */
        public boolean hasElementType() {
          return elementType_ != null;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
         * @return The elementType.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getElementType() {
          return elementType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : elementType_;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getElementTypeOrBuilder() {
          return getElementType();
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (elementType_ != null) {
            output.writeMessage(1, getElementType());
          }
          unknownFields.writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (elementType_ != null) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(1, getElementType());
          }
          size += unknownFields.getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView)) {
            return super.equals(obj);
          }
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView other = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) obj;

          if (hasElementType() != other.hasElementType()) return false;
          if (hasElementType()) {
            if (!getElementType()
                .equals(other.getElementType())) return false;
          }
          if (!unknownFields.equals(other.unknownFields)) return false;
          return true;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          if (hasElementType()) {
            hash = (37 * hash) + ELEMENT_TYPE_FIELD_NUMBER;
            hash = (53 * hash) + getElementType().hashCode();
          }
          hash = (29 * hash) + unknownFields.hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView)
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListViewOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_ListView_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_ListView_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.Builder.class);
          }

          // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            if (elementTypeBuilder_ == null) {
              elementType_ = null;
            } else {
              elementType_ = null;
              elementTypeBuilder_ = null;
            }
            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_ListView_descriptor;
          }

          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView getDefaultInstanceForType() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.getDefaultInstance();
          }

          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView build() {
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView buildPartial() {
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView result = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView(this);
            if (elementTypeBuilder_ == null) {
              result.elementType_ = elementType_;
            } else {
              result.elementType_ = elementTypeBuilder_.build();
            }
            onBuilt();
            return result;
          }

          @java.lang.Override
          public Builder clone() {
            return super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) {
              return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView other) {
            if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.getDefaultInstance()) return this;
            if (other.hasElementType()) {
              mergeElementType(other.getElementType());
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) e.getUnfinishedMessage();
              throw e.unwrapIOException();
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }

          private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType elementType_;
          private com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> elementTypeBuilder_;
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
           * @return Whether the elementType field is set.
           */
          public boolean hasElementType() {
            return elementTypeBuilder_ != null || elementType_ != null;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
           * @return The elementType.
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getElementType() {
            if (elementTypeBuilder_ == null) {
              return elementType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : elementType_;
            } else {
              return elementTypeBuilder_.getMessage();
            }
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
           */
          public Builder setElementType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
            if (elementTypeBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              elementType_ = value;
              onChanged();
            } else {
              elementTypeBuilder_.setMessage(value);
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
           */
          public Builder setElementType(
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder builderForValue) {
            if (elementTypeBuilder_ == null) {
              elementType_ = builderForValue.build();
              onChanged();
            } else {
              elementTypeBuilder_.setMessage(builderForValue.build());
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
           */
          public Builder mergeElementType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
            if (elementTypeBuilder_ == null) {
              if (elementType_ != null) {
                elementType_ =
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.newBuilder(elementType_).mergeFrom(value).buildPartial();
              } else {
                elementType_ = value;
              }
              onChanged();
            } else {
              elementTypeBuilder_.mergeFrom(value);
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
           */
          public Builder clearElementType() {
            if (elementTypeBuilder_ == null) {
              elementType_ = null;
              onChanged();
            } else {
              elementType_ = null;
              elementTypeBuilder_ = null;
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder getElementTypeBuilder() {
            
            onChanged();
            return getElementTypeFieldBuilder().getBuilder();
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getElementTypeOrBuilder() {
            if (elementTypeBuilder_ != null) {
              return elementTypeBuilder_.getMessageOrBuilder();
            } else {
              return elementType_ == null ?
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : elementType_;
            }
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
           */
          private com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> 
              getElementTypeFieldBuilder() {
            if (elementTypeBuilder_ == null) {
              elementTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder>(
                      getElementType(),
                      getParentForChildren(),
                      isClean());
              elementType_ = null;
            }
            return elementTypeBuilder_;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView)
        }

        // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView)
        private static final org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView();
        }

        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<ListView>
            PARSER = new com.google.protobuf.AbstractParser<ListView>() {
          @java.lang.Override
          public ListView parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new ListView(input, extensionRegistry);
          }
        };

        public static com.google.protobuf.Parser<ListView> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<ListView> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      public interface MapViewOrBuilder extends
          // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         * @return Whether the keyType field is set.
         */
        boolean hasKeyType();
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         * @return The keyType.
         */
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getKeyType();
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         */
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getKeyTypeOrBuilder();

        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         * @return Whether the valueType field is set.
         */
        boolean hasValueType();
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         * @return The valueType.
         */
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getValueType();
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         */
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getValueTypeOrBuilder();
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView}
       */
      public  static final class MapView extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView)
          MapViewOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use MapView.newBuilder() to construct.
        private MapView(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private MapView() {
        }

        @java.lang.Override
        @SuppressWarnings({"unused"})
        protected java.lang.Object newInstance(
            UnusedPrivateParameter unused) {
          return new MapView();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        private MapView(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          this();
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder subBuilder = null;
                  if (keyType_ != null) {
                    subBuilder = keyType_.toBuilder();
                  }
                  keyType_ = input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(keyType_);
                    keyType_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 18: {
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder subBuilder = null;
                  if (valueType_ != null) {
                    subBuilder = valueType_.toBuilder();
                  }
                  valueType_ = input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(valueType_);
                    valueType_ = subBuilder.buildPartial();
                  }

                  break;
                }
                default: {
                  if (!parseUnknownField(
                      input, unknownFields, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_MapView_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_MapView_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.Builder.class);
        }

        public static final int KEY_TYPE_FIELD_NUMBER = 1;
        private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType keyType_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         * @return Whether the keyType field is set.
         */
        public boolean hasKeyType() {
          return keyType_ != null;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         * @return The keyType.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getKeyType() {
          return keyType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : keyType_;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getKeyTypeOrBuilder() {
          return getKeyType();
        }

        public static final int VALUE_TYPE_FIELD_NUMBER = 2;
        private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType valueType_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         * @return Whether the valueType field is set.
         */
        public boolean hasValueType() {
          return valueType_ != null;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         * @return The valueType.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getValueType() {
          return valueType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : valueType_;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getValueTypeOrBuilder() {
          return getValueType();
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (keyType_ != null) {
            output.writeMessage(1, getKeyType());
          }
          if (valueType_ != null) {
            output.writeMessage(2, getValueType());
          }
          unknownFields.writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (keyType_ != null) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(1, getKeyType());
          }
          if (valueType_ != null) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(2, getValueType());
          }
          size += unknownFields.getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView)) {
            return super.equals(obj);
          }
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView other = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) obj;

          if (hasKeyType() != other.hasKeyType()) return false;
          if (hasKeyType()) {
            if (!getKeyType()
                .equals(other.getKeyType())) return false;
          }
          if (hasValueType() != other.hasValueType()) return false;
          if (hasValueType()) {
            if (!getValueType()
                .equals(other.getValueType())) return false;
          }
          if (!unknownFields.equals(other.unknownFields)) return false;
          return true;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          if (hasKeyType()) {
            hash = (37 * hash) + KEY_TYPE_FIELD_NUMBER;
            hash = (53 * hash) + getKeyType().hashCode();
          }
          if (hasValueType()) {
            hash = (37 * hash) + VALUE_TYPE_FIELD_NUMBER;
            hash = (53 * hash) + getValueType().hashCode();
          }
          hash = (29 * hash) + unknownFields.hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView)
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapViewOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_MapView_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_MapView_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.Builder.class);
          }

          // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            if (keyTypeBuilder_ == null) {
              keyType_ = null;
            } else {
              keyType_ = null;
              keyTypeBuilder_ = null;
            }
            if (valueTypeBuilder_ == null) {
              valueType_ = null;
            } else {
              valueType_ = null;
              valueTypeBuilder_ = null;
            }
            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_MapView_descriptor;
          }

          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView getDefaultInstanceForType() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.getDefaultInstance();
          }

          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView build() {
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView buildPartial() {
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView result = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView(this);
            if (keyTypeBuilder_ == null) {
              result.keyType_ = keyType_;
            } else {
              result.keyType_ = keyTypeBuilder_.build();
            }
            if (valueTypeBuilder_ == null) {
              result.valueType_ = valueType_;
            } else {
              result.valueType_ = valueTypeBuilder_.build();
            }
            onBuilt();
            return result;
          }

          @java.lang.Override
          public Builder clone() {
            return super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) {
              return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView other) {
            if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.getDefaultInstance()) return this;
            if (other.hasKeyType()) {
              mergeKeyType(other.getKeyType());
            }
            if (other.hasValueType()) {
              mergeValueType(other.getValueType());
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) e.getUnfinishedMessage();
              throw e.unwrapIOException();
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }

          private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType keyType_;
          private com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> keyTypeBuilder_;
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
           * @return Whether the keyType field is set.
           */
          public boolean hasKeyType() {
            return keyTypeBuilder_ != null || keyType_ != null;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
           * @return The keyType.
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getKeyType() {
            if (keyTypeBuilder_ == null) {
              return keyType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : keyType_;
            } else {
              return keyTypeBuilder_.getMessage();
            }
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
           */
          public Builder setKeyType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
            if (keyTypeBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              keyType_ = value;
              onChanged();
            } else {
              keyTypeBuilder_.setMessage(value);
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
           */
          public Builder setKeyType(
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder builderForValue) {
            if (keyTypeBuilder_ == null) {
              keyType_ = builderForValue.build();
              onChanged();
            } else {
              keyTypeBuilder_.setMessage(builderForValue.build());
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
           */
          public Builder mergeKeyType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
            if (keyTypeBuilder_ == null) {
              if (keyType_ != null) {
                keyType_ =
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.newBuilder(keyType_).mergeFrom(value).buildPartial();
              } else {
                keyType_ = value;
              }
              onChanged();
            } else {
              keyTypeBuilder_.mergeFrom(value);
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
           */
          public Builder clearKeyType() {
            if (keyTypeBuilder_ == null) {
              keyType_ = null;
              onChanged();
            } else {
              keyType_ = null;
              keyTypeBuilder_ = null;
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder getKeyTypeBuilder() {
            
            onChanged();
            return getKeyTypeFieldBuilder().getBuilder();
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getKeyTypeOrBuilder() {
            if (keyTypeBuilder_ != null) {
              return keyTypeBuilder_.getMessageOrBuilder();
            } else {
              return keyType_ == null ?
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : keyType_;
            }
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
           */
          private com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> 
              getKeyTypeFieldBuilder() {
            if (keyTypeBuilder_ == null) {
              keyTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder>(
                      getKeyType(),
                      getParentForChildren(),
                      isClean());
              keyType_ = null;
            }
            return keyTypeBuilder_;
          }

          private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType valueType_;
          private com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> valueTypeBuilder_;
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
           * @return Whether the valueType field is set.
           */
          public boolean hasValueType() {
            return valueTypeBuilder_ != null || valueType_ != null;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
           * @return The valueType.
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getValueType() {
            if (valueTypeBuilder_ == null) {
              return valueType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : valueType_;
            } else {
              return valueTypeBuilder_.getMessage();
            }
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
           */
          public Builder setValueType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
            if (valueTypeBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              valueType_ = value;
              onChanged();
            } else {
              valueTypeBuilder_.setMessage(value);
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
           */
          public Builder setValueType(
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder builderForValue) {
            if (valueTypeBuilder_ == null) {
              valueType_ = builderForValue.build();
              onChanged();
            } else {
              valueTypeBuilder_.setMessage(builderForValue.build());
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
           */
          public Builder mergeValueType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
            if (valueTypeBuilder_ == null) {
              if (valueType_ != null) {
                valueType_ =
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.newBuilder(valueType_).mergeFrom(value).buildPartial();
              } else {
                valueType_ = value;
              }
              onChanged();
            } else {
              valueTypeBuilder_.mergeFrom(value);
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
           */
          public Builder clearValueType() {
            if (valueTypeBuilder_ == null) {
              valueType_ = null;
              onChanged();
            } else {
              valueType_ = null;
              valueTypeBuilder_ = null;
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder getValueTypeBuilder() {
            
            onChanged();
            return getValueTypeFieldBuilder().getBuilder();
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getValueTypeOrBuilder() {
            if (valueTypeBuilder_ != null) {
              return valueTypeBuilder_.getMessageOrBuilder();
            } else {
              return valueType_ == null ?
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : valueType_;
            }
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
           */
          private com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> 
              getValueTypeFieldBuilder() {
            if (valueTypeBuilder_ == null) {
              valueTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder>(
                      getValueType(),
                      getParentForChildren(),
                      isClean());
              valueType_ = null;
            }
            return valueTypeBuilder_;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView)
        }

        // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView)
        private static final org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView();
        }

        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<MapView>
            PARSER = new com.google.protobuf.AbstractParser<MapView>() {
          @java.lang.Override
          public MapView parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new MapView(input, extensionRegistry);
          }
        };

        public static com.google.protobuf.Parser<MapView> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<MapView> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      private int dataViewCase_ = 0;
      private java.lang.Object dataView_;
      public enum DataViewCase
          implements com.google.protobuf.Internal.EnumLite,
              com.google.protobuf.AbstractMessage.InternalOneOfEnum {
        LIST_VIEW(3),
        MAP_VIEW(4),
        DATAVIEW_NOT_SET(0);
        private final int value;
        private DataViewCase(int value) {
          this.value = value;
        }
        /**
         * @param value The number of the enum to look for.
         * @return The enum associated with the given number.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static DataViewCase valueOf(int value) {
          return forNumber(value);
        }

        public static DataViewCase forNumber(int value) {
          switch (value) {
            case 3: return LIST_VIEW;
            case 4: return MAP_VIEW;
            case 0: return DATAVIEW_NOT_SET;
            default: return null;
          }
        }
        public int getNumber() {
          return this.value;
        }
      };

      public DataViewCase
      getDataViewCase() {
        return DataViewCase.forNumber(
            dataViewCase_);
      }

      public static final int NAME_FIELD_NUMBER = 1;
      private volatile java.lang.Object name_;
      /**
       * <code>string name = 1;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        }
      }
      /**
       * <code>string name = 1;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int FIELD_INDEX_FIELD_NUMBER = 2;
      private int fieldIndex_;
      /**
       * <code>int32 field_index = 2;</code>
       * @return The fieldIndex.
       */
      public int getFieldIndex() {
        return fieldIndex_;
      }

      public static final int LIST_VIEW_FIELD_NUMBER = 3;
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
       * @return Whether the listView field is set.
       */
      public boolean hasListView() {
        return dataViewCase_ == 3;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
       * @return The listView.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView getListView() {
        if (dataViewCase_ == 3) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) dataView_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListViewOrBuilder getListViewOrBuilder() {
        if (dataViewCase_ == 3) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) dataView_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.getDefaultInstance();
      }

      public static final int MAP_VIEW_FIELD_NUMBER = 4;
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
       * @return Whether the mapView field is set.
       */
      public boolean hasMapView() {
        return dataViewCase_ == 4;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
       * @return The mapView.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView getMapView() {
        if (dataViewCase_ == 4) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) dataView_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapViewOrBuilder getMapViewOrBuilder() {
        if (dataViewCase_ == 4) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) dataView_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.getDefaultInstance();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getNameBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
        }
        if (fieldIndex_ != 0) {
          output.writeInt32(2, fieldIndex_);
        }
        if (dataViewCase_ == 3) {
          output.writeMessage(3, (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) dataView_);
        }
        if (dataViewCase_ == 4) {
          output.writeMessage(4, (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) dataView_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getNameBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
        }
        if (fieldIndex_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, fieldIndex_);
        }
        if (dataViewCase_ == 3) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) dataView_);
        }
        if (dataViewCase_ == 4) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) dataView_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec other = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec) obj;

        if (!getName()
            .equals(other.getName())) return false;
        if (getFieldIndex()
            != other.getFieldIndex()) return false;
        if (!getDataViewCase().equals(other.getDataViewCase())) return false;
        switch (dataViewCase_) {
          case 3:
            if (!getListView()
                .equals(other.getListView())) return false;
            break;
          case 4:
            if (!getMapView()
                .equals(other.getMapView())) return false;
            break;
          case 0:
          default:
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
        hash = (37 * hash) + FIELD_INDEX_FIELD_NUMBER;
        hash = (53 * hash) + getFieldIndex();
        switch (dataViewCase_) {
          case 3:
            hash = (37 * hash) + LIST_VIEW_FIELD_NUMBER;
            hash = (53 * hash) + getListView().hashCode();
            break;
          case 4:
            hash = (37 * hash) + MAP_VIEW_FIELD_NUMBER;
            hash = (53 * hash) + getMapView().hashCode();
            break;
          case 0:
          default:
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec)
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpecOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          name_ = "";

          fieldIndex_ = 0;

          dataViewCase_ = 0;
          dataView_ = null;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec result = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec(this);
          result.name_ = name_;
          result.fieldIndex_ = fieldIndex_;
          if (dataViewCase_ == 3) {
            if (listViewBuilder_ == null) {
              result.dataView_ = dataView_;
            } else {
              result.dataView_ = listViewBuilder_.build();
            }
          }
          if (dataViewCase_ == 4) {
            if (mapViewBuilder_ == null) {
              result.dataView_ = dataView_;
            } else {
              result.dataView_ = mapViewBuilder_.build();
            }
          }
          result.dataViewCase_ = dataViewCase_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.getDefaultInstance()) return this;
          if (!other.getName().isEmpty()) {
            name_ = other.name_;
            onChanged();
          }
          if (other.getFieldIndex() != 0) {
            setFieldIndex(other.getFieldIndex());
          }
          switch (other.getDataViewCase()) {
            case LIST_VIEW: {
              mergeListView(other.getListView());
              break;
            }
            case MAP_VIEW: {
              mergeMapView(other.getMapView());
              break;
            }
            case DATAVIEW_NOT_SET: {
              break;
            }
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int dataViewCase_ = 0;
        private java.lang.Object dataView_;
        public DataViewCase
            getDataViewCase() {
          return DataViewCase.forNumber(
              dataViewCase_);
        }

        public Builder clearDataView() {
          dataViewCase_ = 0;
          dataView_ = null;
          onChanged();
          return this;
        }


        private java.lang.Object name_ = "";
        /**
         * <code>string name = 1;</code>
         * @return The name.
         */
        public java.lang.String getName() {
          java.lang.Object ref = name_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            name_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string name = 1;</code>
         * @return The bytes for name.
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string name = 1;</code>
         * @param value The name to set.
         * @return This builder for chaining.
         */
        public Builder setName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          name_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string name = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearName() {
          
          name_ = getDefaultInstance().getName();
          onChanged();
          return this;
        }
        /**
         * <code>string name = 1;</code>
         * @param value The bytes for name to set.
         * @return This builder for chaining.
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          name_ = value;
          onChanged();
          return this;
        }

        private int fieldIndex_ ;
        /**
         * <code>int32 field_index = 2;</code>
         * @return The fieldIndex.
         */
        public int getFieldIndex() {
          return fieldIndex_;
        }
        /**
         * <code>int32 field_index = 2;</code>
         * @param value The fieldIndex to set.
         * @return This builder for chaining.
         */
        public Builder setFieldIndex(int value) {
          
          fieldIndex_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 field_index = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearFieldIndex() {
          
          fieldIndex_ = 0;
          onChanged();
          return this;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListViewOrBuilder> listViewBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
         * @return Whether the listView field is set.
         */
        public boolean hasListView() {
          return dataViewCase_ == 3;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
         * @return The listView.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView getListView() {
          if (listViewBuilder_ == null) {
            if (dataViewCase_ == 3) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) dataView_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.getDefaultInstance();
          } else {
            if (dataViewCase_ == 3) {
              return listViewBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
         */
        public Builder setListView(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView value) {
          if (listViewBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            dataView_ = value;
            onChanged();
          } else {
            listViewBuilder_.setMessage(value);
          }
          dataViewCase_ = 3;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
         */
        public Builder setListView(
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.Builder builderForValue) {
          if (listViewBuilder_ == null) {
            dataView_ = builderForValue.build();
            onChanged();
          } else {
            listViewBuilder_.setMessage(builderForValue.build());
          }
          dataViewCase_ = 3;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
         */
        public Builder mergeListView(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView value) {
          if (listViewBuilder_ == null) {
            if (dataViewCase_ == 3 &&
                dataView_ != org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.getDefaultInstance()) {
              dataView_ = org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) dataView_)
                  .mergeFrom(value).buildPartial();
            } else {
              dataView_ = value;
            }
            onChanged();
          } else {
            if (dataViewCase_ == 3) {
              listViewBuilder_.mergeFrom(value);
            }
            listViewBuilder_.setMessage(value);
          }
          dataViewCase_ = 3;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
         */
        public Builder clearListView() {
          if (listViewBuilder_ == null) {
            if (dataViewCase_ == 3) {
              dataViewCase_ = 0;
              dataView_ = null;
              onChanged();
            }
          } else {
            if (dataViewCase_ == 3) {
              dataViewCase_ = 0;
              dataView_ = null;
            }
            listViewBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.Builder getListViewBuilder() {
          return getListViewFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListViewOrBuilder getListViewOrBuilder() {
          if ((dataViewCase_ == 3) && (listViewBuilder_ != null)) {
            return listViewBuilder_.getMessageOrBuilder();
          } else {
            if (dataViewCase_ == 3) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) dataView_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListViewOrBuilder> 
            getListViewFieldBuilder() {
          if (listViewBuilder_ == null) {
            if (!(dataViewCase_ == 3)) {
              dataView_ = org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.getDefaultInstance();
            }
            listViewBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListViewOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) dataView_,
                    getParentForChildren(),
                    isClean());
            dataView_ = null;
          }
          dataViewCase_ = 3;
          onChanged();;
          return listViewBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapViewOrBuilder> mapViewBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
         * @return Whether the mapView field is set.
         */
        public boolean hasMapView() {
          return dataViewCase_ == 4;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
         * @return The mapView.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView getMapView() {
          if (mapViewBuilder_ == null) {
            if (dataViewCase_ == 4) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) dataView_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.getDefaultInstance();
          } else {
            if (dataViewCase_ == 4) {
              return mapViewBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
         */
        public Builder setMapView(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView value) {
          if (mapViewBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            dataView_ = value;
            onChanged();
          } else {
            mapViewBuilder_.setMessage(value);
          }
          dataViewCase_ = 4;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
         */
        public Builder setMapView(
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.Builder builderForValue) {
          if (mapViewBuilder_ == null) {
            dataView_ = builderForValue.build();
            onChanged();
          } else {
            mapViewBuilder_.setMessage(builderForValue.build());
          }
          dataViewCase_ = 4;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
         */
        public Builder mergeMapView(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView value) {
          if (mapViewBuilder_ == null) {
            if (dataViewCase_ == 4 &&
                dataView_ != org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.getDefaultInstance()) {
              dataView_ = org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) dataView_)
                  .mergeFrom(value).buildPartial();
            } else {
              dataView_ = value;
            }
            onChanged();
          } else {
            if (dataViewCase_ == 4) {
              mapViewBuilder_.mergeFrom(value);
            }
            mapViewBuilder_.setMessage(value);
          }
          dataViewCase_ = 4;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
         */
        public Builder clearMapView() {
          if (mapViewBuilder_ == null) {
            if (dataViewCase_ == 4) {
              dataViewCase_ = 0;
              dataView_ = null;
              onChanged();
            }
          } else {
            if (dataViewCase_ == 4) {
              dataViewCase_ = 0;
              dataView_ = null;
            }
            mapViewBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.Builder getMapViewBuilder() {
          return getMapViewFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapViewOrBuilder getMapViewOrBuilder() {
          if ((dataViewCase_ == 4) && (mapViewBuilder_ != null)) {
            return mapViewBuilder_.getMessageOrBuilder();
          } else {
            if (dataViewCase_ == 4) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) dataView_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapViewOrBuilder> 
            getMapViewFieldBuilder() {
          if (mapViewBuilder_ == null) {
            if (!(dataViewCase_ == 4)) {
              dataView_ = org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.getDefaultInstance();
            }
            mapViewBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapViewOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) dataView_,
                    getParentForChildren(),
                    isClean());
            dataView_ = null;
          }
          dataViewCase_ = 4;
          onChanged();;
          return mapViewBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<DataViewSpec>
          PARSER = new com.google.protobuf.AbstractParser<DataViewSpec>() {
        @java.lang.Override
        public DataViewSpec parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DataViewSpec(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<DataViewSpec> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<DataViewSpec> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int PAYLOAD_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString payload_;
    /**
     * <pre>
     * The serialized representation of the user-defined function
     * </pre>
     *
     * <code>bytes payload = 1;</code>
     * @return The payload.
     */
    public com.google.protobuf.ByteString getPayload() {
      return payload_;
    }

    public static final int INPUTS_FIELD_NUMBER = 2;
    private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input> inputs_;
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input> getInputsList() {
      return inputs_;
    }
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder> 
        getInputsOrBuilderList() {
      return inputs_;
    }
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    public int getInputsCount() {
      return inputs_.size();
    }
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.Input getInputs(int index) {
      return inputs_.get(index);
    }
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder getInputsOrBuilder(
        int index) {
      return inputs_.get(index);
    }

    public static final int SPECS_FIELD_NUMBER = 3;
    private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec> specs_;
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
     */
    public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec> getSpecsList() {
      return specs_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
     */
    public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpecOrBuilder> 
        getSpecsOrBuilderList() {
      return specs_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
     */
    public int getSpecsCount() {
      return specs_.size();
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec getSpecs(int index) {
      return specs_.get(index);
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpecOrBuilder getSpecsOrBuilder(
        int index) {
      return specs_.get(index);
    }

    public static final int FILTER_ARG_FIELD_NUMBER = 4;
    private int filterArg_;
    /**
     * <code>int32 filter_arg = 4;</code>
     * @return The filterArg.
     */
    public int getFilterArg() {
      return filterArg_;
    }

    public static final int DISTINCT_FIELD_NUMBER = 5;
    private boolean distinct_;
    /**
     * <code>bool distinct = 5;</code>
     * @return The distinct.
     */
    public boolean getDistinct() {
      return distinct_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!payload_.isEmpty()) {
        output.writeBytes(1, payload_);
      }
      for (int i = 0; i < inputs_.size(); i++) {
        output.writeMessage(2, inputs_.get(i));
      }
      for (int i = 0; i < specs_.size(); i++) {
        output.writeMessage(3, specs_.get(i));
      }
      if (filterArg_ != 0) {
        output.writeInt32(4, filterArg_);
      }
      if (distinct_ != false) {
        output.writeBool(5, distinct_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!payload_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, payload_);
      }
      for (int i = 0; i < inputs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, inputs_.get(i));
      }
      for (int i = 0; i < specs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, specs_.get(i));
      }
      if (filterArg_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, filterArg_);
      }
      if (distinct_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, distinct_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction)) {
        return super.equals(obj);
      }
      org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction other = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction) obj;

      if (!getPayload()
          .equals(other.getPayload())) return false;
      if (!getInputsList()
          .equals(other.getInputsList())) return false;
      if (!getSpecsList()
          .equals(other.getSpecsList())) return false;
      if (getFilterArg()
          != other.getFilterArg()) return false;
      if (getDistinct()
          != other.getDistinct()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PAYLOAD_FIELD_NUMBER;
      hash = (53 * hash) + getPayload().hashCode();
      if (getInputsCount() > 0) {
        hash = (37 * hash) + INPUTS_FIELD_NUMBER;
        hash = (53 * hash) + getInputsList().hashCode();
      }
      if (getSpecsCount() > 0) {
        hash = (37 * hash) + SPECS_FIELD_NUMBER;
        hash = (53 * hash) + getSpecsList().hashCode();
      }
      hash = (37 * hash) + FILTER_ARG_FIELD_NUMBER;
      hash = (53 * hash) + getFilterArg();
      hash = (37 * hash) + DISTINCT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getDistinct());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction)
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder.class);
      }

      // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getInputsFieldBuilder();
          getSpecsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        payload_ = com.google.protobuf.ByteString.EMPTY;

        if (inputsBuilder_ == null) {
          inputs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          inputsBuilder_.clear();
        }
        if (specsBuilder_ == null) {
          specs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          specsBuilder_.clear();
        }
        filterArg_ = 0;

        distinct_ = false;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction getDefaultInstanceForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction build() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction buildPartial() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction result = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction(this);
        int from_bitField0_ = bitField0_;
        result.payload_ = payload_;
        if (inputsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            inputs_ = java.util.Collections.unmodifiableList(inputs_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.inputs_ = inputs_;
        } else {
          result.inputs_ = inputsBuilder_.build();
        }
        if (specsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            specs_ = java.util.Collections.unmodifiableList(specs_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.specs_ = specs_;
        } else {
          result.specs_ = specsBuilder_.build();
        }
        result.filterArg_ = filterArg_;
        result.distinct_ = distinct_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction) {
          return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction other) {
        if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.getDefaultInstance()) return this;
        if (other.getPayload() != com.google.protobuf.ByteString.EMPTY) {
          setPayload(other.getPayload());
        }
        if (inputsBuilder_ == null) {
          if (!other.inputs_.isEmpty()) {
            if (inputs_.isEmpty()) {
              inputs_ = other.inputs_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureInputsIsMutable();
              inputs_.addAll(other.inputs_);
            }
            onChanged();
          }
        } else {
          if (!other.inputs_.isEmpty()) {
            if (inputsBuilder_.isEmpty()) {
              inputsBuilder_.dispose();
              inputsBuilder_ = null;
              inputs_ = other.inputs_;
              bitField0_ = (bitField0_ & ~0x00000001);
              inputsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getInputsFieldBuilder() : null;
            } else {
              inputsBuilder_.addAllMessages(other.inputs_);
            }
          }
        }
        if (specsBuilder_ == null) {
          if (!other.specs_.isEmpty()) {
            if (specs_.isEmpty()) {
              specs_ = other.specs_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureSpecsIsMutable();
              specs_.addAll(other.specs_);
            }
            onChanged();
          }
        } else {
          if (!other.specs_.isEmpty()) {
            if (specsBuilder_.isEmpty()) {
              specsBuilder_.dispose();
              specsBuilder_ = null;
              specs_ = other.specs_;
              bitField0_ = (bitField0_ & ~0x00000002);
              specsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSpecsFieldBuilder() : null;
            } else {
              specsBuilder_.addAllMessages(other.specs_);
            }
          }
        }
        if (other.getFilterArg() != 0) {
          setFilterArg(other.getFilterArg());
        }
        if (other.getDistinct() != false) {
          setDistinct(other.getDistinct());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString payload_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * The serialized representation of the user-defined function
       * </pre>
       *
       * <code>bytes payload = 1;</code>
       * @return The payload.
       */
      public com.google.protobuf.ByteString getPayload() {
        return payload_;
      }
      /**
       * <pre>
       * The serialized representation of the user-defined function
       * </pre>
       *
       * <code>bytes payload = 1;</code>
       * @param value The payload to set.
       * @return This builder for chaining.
       */
      public Builder setPayload(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        payload_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The serialized representation of the user-defined function
       * </pre>
       *
       * <code>bytes payload = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPayload() {
        
        payload_ = getDefaultInstance().getPayload();
        onChanged();
        return this;
      }

      private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input> inputs_ =
        java.util.Collections.emptyList();
      private void ensureInputsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          inputs_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.Input>(inputs_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.Input, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder> inputsBuilder_;

      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input> getInputsList() {
        if (inputsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(inputs_);
        } else {
          return inputsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public int getInputsCount() {
        if (inputsBuilder_ == null) {
          return inputs_.size();
        } else {
          return inputsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Input getInputs(int index) {
        if (inputsBuilder_ == null) {
          return inputs_.get(index);
        } else {
          return inputsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder setInputs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Input value) {
        if (inputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputsIsMutable();
          inputs_.set(index, value);
          onChanged();
        } else {
          inputsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder setInputs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder builderForValue) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.set(index, builderForValue.build());
          onChanged();
        } else {
          inputsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder addInputs(org.apache.flink.fnexecution.v1.FlinkFnApi.Input value) {
        if (inputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputsIsMutable();
          inputs_.add(value);
          onChanged();
        } else {
          inputsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder addInputs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Input value) {
        if (inputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputsIsMutable();
          inputs_.add(index, value);
          onChanged();
        } else {
          inputsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder addInputs(
          org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder builderForValue) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.add(builderForValue.build());
          onChanged();
        } else {
          inputsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder addInputs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder builderForValue) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.add(index, builderForValue.build());
          onChanged();
        } else {
          inputsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder addAllInputs(
          java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.Input> values) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, inputs_);
          onChanged();
        } else {
          inputsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder clearInputs() {
        if (inputsBuilder_ == null) {
          inputs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          inputsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder removeInputs(int index) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.remove(index);
          onChanged();
        } else {
          inputsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder getInputsBuilder(
          int index) {
        return getInputsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder getInputsOrBuilder(
          int index) {
        if (inputsBuilder_ == null) {
          return inputs_.get(index);  } else {
          return inputsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder> 
           getInputsOrBuilderList() {
        if (inputsBuilder_ != null) {
          return inputsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(inputs_);
        }
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder addInputsBuilder() {
        return getInputsFieldBuilder().addBuilder(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Input.getDefaultInstance());
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder addInputsBuilder(
          int index) {
        return getInputsFieldBuilder().addBuilder(
            index, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.getDefaultInstance());
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder> 
           getInputsBuilderList() {
        return getInputsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.Input, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder> 
          getInputsFieldBuilder() {
        if (inputsBuilder_ == null) {
          inputsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.Input, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder>(
                  inputs_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          inputs_ = null;
        }
        return inputsBuilder_;
      }

      private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec> specs_ =
        java.util.Collections.emptyList();
      private void ensureSpecsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          specs_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec>(specs_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpecOrBuilder> specsBuilder_;

      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec> getSpecsList() {
        if (specsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(specs_);
        } else {
          return specsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public int getSpecsCount() {
        if (specsBuilder_ == null) {
          return specs_.size();
        } else {
          return specsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec getSpecs(int index) {
        if (specsBuilder_ == null) {
          return specs_.get(index);
        } else {
          return specsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public Builder setSpecs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec value) {
        if (specsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSpecsIsMutable();
          specs_.set(index, value);
          onChanged();
        } else {
          specsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public Builder setSpecs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder builderForValue) {
        if (specsBuilder_ == null) {
          ensureSpecsIsMutable();
          specs_.set(index, builderForValue.build());
          onChanged();
        } else {
          specsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public Builder addSpecs(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec value) {
        if (specsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSpecsIsMutable();
          specs_.add(value);
          onChanged();
        } else {
          specsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public Builder addSpecs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec value) {
        if (specsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSpecsIsMutable();
          specs_.add(index, value);
          onChanged();
        } else {
          specsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public Builder addSpecs(
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder builderForValue) {
        if (specsBuilder_ == null) {
          ensureSpecsIsMutable();
          specs_.add(builderForValue.build());
          onChanged();
        } else {
          specsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public Builder addSpecs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder builderForValue) {
        if (specsBuilder_ == null) {
          ensureSpecsIsMutable();
          specs_.add(index, builderForValue.build());
          onChanged();
        } else {
          specsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public Builder addAllSpecs(
          java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec> values) {
        if (specsBuilder_ == null) {
          ensureSpecsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, specs_);
          onChanged();
        } else {
          specsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public Builder clearSpecs() {
        if (specsBuilder_ == null) {
          specs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          specsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public Builder removeSpecs(int index) {
        if (specsBuilder_ == null) {
          ensureSpecsIsMutable();
          specs_.remove(index);
          onChanged();
        } else {
          specsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder getSpecsBuilder(
          int index) {
        return getSpecsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpecOrBuilder getSpecsOrBuilder(
          int index) {
        if (specsBuilder_ == null) {
          return specs_.get(index);  } else {
          return specsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpecOrBuilder> 
           getSpecsOrBuilderList() {
        if (specsBuilder_ != null) {
          return specsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(specs_);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder addSpecsBuilder() {
        return getSpecsFieldBuilder().addBuilder(
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder addSpecsBuilder(
          int index) {
        return getSpecsFieldBuilder().addBuilder(
            index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder> 
           getSpecsBuilderList() {
        return getSpecsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpecOrBuilder> 
          getSpecsFieldBuilder() {
        if (specsBuilder_ == null) {
          specsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpecOrBuilder>(
                  specs_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          specs_ = null;
        }
        return specsBuilder_;
      }

      private int filterArg_ ;
      /**
       * <code>int32 filter_arg = 4;</code>
       * @return The filterArg.
       */
      public int getFilterArg() {
        return filterArg_;
      }
      /**
       * <code>int32 filter_arg = 4;</code>
       * @param value The filterArg to set.
       * @return This builder for chaining.
       */
      public Builder setFilterArg(int value) {
        
        filterArg_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 filter_arg = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearFilterArg() {
        
        filterArg_ = 0;
        onChanged();
        return this;
      }

      private boolean distinct_ ;
      /**
       * <code>bool distinct = 5;</code>
       * @return The distinct.
       */
      public boolean getDistinct() {
        return distinct_;
      }
      /**
       * <code>bool distinct = 5;</code>
       * @param value The distinct to set.
       * @return This builder for chaining.
       */
      public Builder setDistinct(boolean value) {
        
        distinct_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool distinct = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearDistinct() {
        
        distinct_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction)
    private static final org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction();
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UserDefinedAggregateFunction>
        PARSER = new com.google.protobuf.AbstractParser<UserDefinedAggregateFunction>() {
      @java.lang.Override
      public UserDefinedAggregateFunction parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new UserDefinedAggregateFunction(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<UserDefinedAggregateFunction> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UserDefinedAggregateFunction> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UserDefinedAggregateFunctionsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunctions)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
     */
    java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction> 
        getUdfsList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction getUdfs(int index);
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
     */
    int getUdfsCount();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
     */
    java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctionOrBuilder> 
        getUdfsOrBuilderList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctionOrBuilder getUdfsOrBuilder(
        int index);

    /**
     * <code>bool metric_enabled = 2;</code>
     * @return The metricEnabled.
     */
    boolean getMetricEnabled();

    /**
     * <pre>
     * The array of the key indexes.
     * </pre>
     *
     * <code>repeated int32 grouping = 3;</code>
     * @return A list containing the grouping.
     */
    java.util.List<java.lang.Integer> getGroupingList();
    /**
     * <pre>
     * The array of the key indexes.
     * </pre>
     *
     * <code>repeated int32 grouping = 3;</code>
     * @return The count of grouping.
     */
    int getGroupingCount();
    /**
     * <pre>
     * The array of the key indexes.
     * </pre>
     *
     * <code>repeated int32 grouping = 3;</code>
     * @param index The index of the element to return.
     * @return The grouping at the given index.
     */
    int getGrouping(int index);

    /**
     * <pre>
     * Generate retract messages if true.
     * </pre>
     *
     * <code>bool generate_update_before = 4;</code>
     * @return The generateUpdateBefore.
     */
    boolean getGenerateUpdateBefore();

    /**
     * <pre>
     * The schema of the grouping keys.
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
     * @return Whether the keyType field is set.
     */
    boolean hasKeyType();
    /**
     * <pre>
     * The schema of the grouping keys.
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
     * @return The keyType.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getKeyType();
    /**
     * <pre>
     * The schema of the grouping keys.
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getKeyTypeOrBuilder();

    /**
     * <pre>
     * The index of a count aggregate used to calculate the number of accumulated rows.
     * </pre>
     *
     * <code>int32 index_of_count_star = 6;</code>
     * @return The indexOfCountStar.
     */
    int getIndexOfCountStar();

    /**
     * <pre>
     * Cleanup the expired state if true.
     * </pre>
     *
     * <code>bool state_cleaning_enabled = 7;</code>
     * @return The stateCleaningEnabled.
     */
    boolean getStateCleaningEnabled();

    /**
     * <pre>
     * The state cache size.
     * </pre>
     *
     * <code>int32 state_cache_size = 8;</code>
     * @return The stateCacheSize.
     */
    int getStateCacheSize();

    /**
     * <pre>
     * The map state read cache size.
     * </pre>
     *
     * <code>int32 map_state_read_cache_size = 9;</code>
     * @return The mapStateReadCacheSize.
     */
    int getMapStateReadCacheSize();

    /**
     * <pre>
     * The map_state_write_cache_size.
     * </pre>
     *
     * <code>int32 map_state_write_cache_size = 10;</code>
     * @return The mapStateWriteCacheSize.
     */
    int getMapStateWriteCacheSize();

    /**
     * <pre>
     * True if the count(*) agg is inserted by the planner.
     * </pre>
     *
     * <code>bool count_star_inserted = 11;</code>
     * @return The countStarInserted.
     */
    boolean getCountStarInserted();
  }
  /**
   * <pre>
   * A list of the user-defined aggregate functions to be executed in a group aggregate operation.
   * </pre>
   *
   * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedAggregateFunctions}
   */
  public  static final class UserDefinedAggregateFunctions extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunctions)
      UserDefinedAggregateFunctionsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UserDefinedAggregateFunctions.newBuilder() to construct.
    private UserDefinedAggregateFunctions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UserDefinedAggregateFunctions() {
      udfs_ = java.util.Collections.emptyList();
      grouping_ = emptyIntList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UserDefinedAggregateFunctions();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private UserDefinedAggregateFunctions(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                udfs_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction>();
                mutable_bitField0_ |= 0x00000001;
              }
              udfs_.add(
                  input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.parser(), extensionRegistry));
              break;
            }
            case 16: {

              metricEnabled_ = input.readBool();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                grouping_ = newIntList();
                mutable_bitField0_ |= 0x00000002;
              }
              grouping_.addInt(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) != 0) && input.getBytesUntilLimit() > 0) {
                grouping_ = newIntList();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                grouping_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {

              generateUpdateBefore_ = input.readBool();
              break;
            }
            case 42: {
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder subBuilder = null;
              if (keyType_ != null) {
                subBuilder = keyType_.toBuilder();
              }
              keyType_ = input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(keyType_);
                keyType_ = subBuilder.buildPartial();
              }

              break;
            }
            case 48: {

              indexOfCountStar_ = input.readInt32();
              break;
            }
            case 56: {

              stateCleaningEnabled_ = input.readBool();
              break;
            }
            case 64: {

              stateCacheSize_ = input.readInt32();
              break;
            }
            case 72: {

              mapStateReadCacheSize_ = input.readInt32();
              break;
            }
            case 80: {

              mapStateWriteCacheSize_ = input.readInt32();
              break;
            }
            case 88: {

              countStarInserted_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          udfs_ = java.util.Collections.unmodifiableList(udfs_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          grouping_.makeImmutable(); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunctions_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunctions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions.Builder.class);
    }

    public static final int UDFS_FIELD_NUMBER = 1;
    private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction> udfs_;
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
     */
    public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction> getUdfsList() {
      return udfs_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
     */
    public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctionOrBuilder> 
        getUdfsOrBuilderList() {
      return udfs_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
     */
    public int getUdfsCount() {
      return udfs_.size();
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction getUdfs(int index) {
      return udfs_.get(index);
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctionOrBuilder getUdfsOrBuilder(
        int index) {
      return udfs_.get(index);
    }

    public static final int METRIC_ENABLED_FIELD_NUMBER = 2;
    private boolean metricEnabled_;
    /**
     * <code>bool metric_enabled = 2;</code>
     * @return The metricEnabled.
     */
    public boolean getMetricEnabled() {
      return metricEnabled_;
    }

    public static final int GROUPING_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.IntList grouping_;
    /**
     * <pre>
     * The array of the key indexes.
     * </pre>
     *
     * <code>repeated int32 grouping = 3;</code>
     * @return A list containing the grouping.
     */
    public java.util.List<java.lang.Integer>
        getGroupingList() {
      return grouping_;
    }
    /**
     * <pre>
     * The array of the key indexes.
     * </pre>
     *
     * <code>repeated int32 grouping = 3;</code>
     * @return The count of grouping.
     */
    public int getGroupingCount() {
      return grouping_.size();
    }
    /**
     * <pre>
     * The array of the key indexes.
     * </pre>
     *
     * <code>repeated int32 grouping = 3;</code>
     * @param index The index of the element to return.
     * @return The grouping at the given index.
     */
    public int getGrouping(int index) {
      return grouping_.getInt(index);
    }
    private int groupingMemoizedSerializedSize = -1;

    public static final int GENERATE_UPDATE_BEFORE_FIELD_NUMBER = 4;
    private boolean generateUpdateBefore_;
    /**
     * <pre>
     * Generate retract messages if true.
     * </pre>
     *
     * <code>bool generate_update_before = 4;</code>
     * @return The generateUpdateBefore.
     */
    public boolean getGenerateUpdateBefore() {
      return generateUpdateBefore_;
    }

    public static final int KEY_TYPE_FIELD_NUMBER = 5;
    private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType keyType_;
    /**
     * <pre>
     * The schema of the grouping keys.
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
     * @return Whether the keyType field is set.
     */
    public boolean hasKeyType() {
      return keyType_ != null;
    }
    /**
     * <pre>
     * The schema of the grouping keys.
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
     * @return The keyType.
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getKeyType() {
      return keyType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : keyType_;
    }
    /**
     * <pre>
     * The schema of the grouping keys.
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getKeyTypeOrBuilder() {
      return getKeyType();
    }

    public static final int INDEX_OF_COUNT_STAR_FIELD_NUMBER = 6;
    private int indexOfCountStar_;
    /**
     * <pre>
     * The index of a count aggregate used to calculate the number of accumulated rows.
     * </pre>
     *
     * <code>int32 index_of_count_star = 6;</code>
     * @return The indexOfCountStar.
     */
    public int getIndexOfCountStar() {
      return indexOfCountStar_;
    }

    public static final int STATE_CLEANING_ENABLED_FIELD_NUMBER = 7;
    private boolean stateCleaningEnabled_;
    /**
     * <pre>
     * Cleanup the expired state if true.
     * </pre>
     *
     * <code>bool state_cleaning_enabled = 7;</code>
     * @return The stateCleaningEnabled.
     */
    public boolean getStateCleaningEnabled() {
      return stateCleaningEnabled_;
    }

    public static final int STATE_CACHE_SIZE_FIELD_NUMBER = 8;
    private int stateCacheSize_;
    /**
     * <pre>
     * The state cache size.
     * </pre>
     *
     * <code>int32 state_cache_size = 8;</code>
     * @return The stateCacheSize.
     */
    public int getStateCacheSize() {
      return stateCacheSize_;
    }

    public static final int MAP_STATE_READ_CACHE_SIZE_FIELD_NUMBER = 9;
    private int mapStateReadCacheSize_;
    /**
     * <pre>
     * The map state read cache size.
     * </pre>
     *
     * <code>int32 map_state_read_cache_size = 9;</code>
     * @return The mapStateReadCacheSize.
     */
    public int getMapStateReadCacheSize() {
      return mapStateReadCacheSize_;
    }

    public static final int MAP_STATE_WRITE_CACHE_SIZE_FIELD_NUMBER = 10;
    private int mapStateWriteCacheSize_;
    /**
     * <pre>
     * The map_state_write_cache_size.
     * </pre>
     *
     * <code>int32 map_state_write_cache_size = 10;</code>
     * @return The mapStateWriteCacheSize.
     */
    public int getMapStateWriteCacheSize() {
      return mapStateWriteCacheSize_;
    }

    public static final int COUNT_STAR_INSERTED_FIELD_NUMBER = 11;
    private boolean countStarInserted_;
    /**
     * <pre>
     * True if the count(*) agg is inserted by the planner.
     * </pre>
     *
     * <code>bool count_star_inserted = 11;</code>
     * @return The countStarInserted.
     */
    public boolean getCountStarInserted() {
      return countStarInserted_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < udfs_.size(); i++) {
        output.writeMessage(1, udfs_.get(i));
      }
      if (metricEnabled_ != false) {
        output.writeBool(2, metricEnabled_);
      }
      if (getGroupingList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(groupingMemoizedSerializedSize);
      }
      for (int i = 0; i < grouping_.size(); i++) {
        output.writeInt32NoTag(grouping_.getInt(i));
      }
      if (generateUpdateBefore_ != false) {
        output.writeBool(4, generateUpdateBefore_);
      }
      if (keyType_ != null) {
        output.writeMessage(5, getKeyType());
      }
      if (indexOfCountStar_ != 0) {
        output.writeInt32(6, indexOfCountStar_);
      }
      if (stateCleaningEnabled_ != false) {
        output.writeBool(7, stateCleaningEnabled_);
      }
      if (stateCacheSize_ != 0) {
        output.writeInt32(8, stateCacheSize_);
      }
      if (mapStateReadCacheSize_ != 0) {
        output.writeInt32(9, mapStateReadCacheSize_);
      }
      if (mapStateWriteCacheSize_ != 0) {
        output.writeInt32(10, mapStateWriteCacheSize_);
      }
      if (countStarInserted_ != false) {
        output.writeBool(11, countStarInserted_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < udfs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, udfs_.get(i));
      }
      if (metricEnabled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, metricEnabled_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < grouping_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(grouping_.getInt(i));
        }
        size += dataSize;
        if (!getGroupingList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        groupingMemoizedSerializedSize = dataSize;
      }
      if (generateUpdateBefore_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, generateUpdateBefore_);
      }
      if (keyType_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getKeyType());
      }
      if (indexOfCountStar_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, indexOfCountStar_);
      }
      if (stateCleaningEnabled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, stateCleaningEnabled_);
      }
      if (stateCacheSize_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, stateCacheSize_);
      }
      if (mapStateReadCacheSize_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, mapStateReadCacheSize_);
      }
      if (mapStateWriteCacheSize_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, mapStateWriteCacheSize_);
      }
      if (countStarInserted_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, countStarInserted_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions)) {
        return super.equals(obj);
      }
      org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions other = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions) obj;

      if (!getUdfsList()
          .equals(other.getUdfsList())) return false;
      if (getMetricEnabled()
          != other.getMetricEnabled()) return false;
      if (!getGroupingList()
          .equals(other.getGroupingList())) return false;
      if (getGenerateUpdateBefore()
          != other.getGenerateUpdateBefore()) return false;
      if (hasKeyType() != other.hasKeyType()) return false;
      if (hasKeyType()) {
        if (!getKeyType()
            .equals(other.getKeyType())) return false;
      }
      if (getIndexOfCountStar()
          != other.getIndexOfCountStar()) return false;
      if (getStateCleaningEnabled()
          != other.getStateCleaningEnabled()) return false;
      if (getStateCacheSize()
          != other.getStateCacheSize()) return false;
      if (getMapStateReadCacheSize()
          != other.getMapStateReadCacheSize()) return false;
      if (getMapStateWriteCacheSize()
          != other.getMapStateWriteCacheSize()) return false;
      if (getCountStarInserted()
          != other.getCountStarInserted()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getUdfsCount() > 0) {
        hash = (37 * hash) + UDFS_FIELD_NUMBER;
        hash = (53 * hash) + getUdfsList().hashCode();
      }
      hash = (37 * hash) + METRIC_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getMetricEnabled());
      if (getGroupingCount() > 0) {
        hash = (37 * hash) + GROUPING_FIELD_NUMBER;
        hash = (53 * hash) + getGroupingList().hashCode();
      }
      hash = (37 * hash) + GENERATE_UPDATE_BEFORE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getGenerateUpdateBefore());
      if (hasKeyType()) {
        hash = (37 * hash) + KEY_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getKeyType().hashCode();
      }
      hash = (37 * hash) + INDEX_OF_COUNT_STAR_FIELD_NUMBER;
      hash = (53 * hash) + getIndexOfCountStar();
      hash = (37 * hash) + STATE_CLEANING_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getStateCleaningEnabled());
      hash = (37 * hash) + STATE_CACHE_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + getStateCacheSize();
      hash = (37 * hash) + MAP_STATE_READ_CACHE_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + getMapStateReadCacheSize();
      hash = (37 * hash) + MAP_STATE_WRITE_CACHE_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + getMapStateWriteCacheSize();
      hash = (37 * hash) + COUNT_STAR_INSERTED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getCountStarInserted());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A list of the user-defined aggregate functions to be executed in a group aggregate operation.
     * </pre>
     *
     * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedAggregateFunctions}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunctions)
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctionsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunctions_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunctions_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions.Builder.class);
      }

      // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getUdfsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (udfsBuilder_ == null) {
          udfs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          udfsBuilder_.clear();
        }
        metricEnabled_ = false;

        grouping_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000002);
        generateUpdateBefore_ = false;

        if (keyTypeBuilder_ == null) {
          keyType_ = null;
        } else {
          keyType_ = null;
          keyTypeBuilder_ = null;
        }
        indexOfCountStar_ = 0;

        stateCleaningEnabled_ = false;

        stateCacheSize_ = 0;

        mapStateReadCacheSize_ = 0;

        mapStateWriteCacheSize_ = 0;

        countStarInserted_ = false;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunctions_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions getDefaultInstanceForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions build() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions buildPartial() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions result = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions(this);
        int from_bitField0_ = bitField0_;
        if (udfsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            udfs_ = java.util.Collections.unmodifiableList(udfs_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.udfs_ = udfs_;
        } else {
          result.udfs_ = udfsBuilder_.build();
        }
        result.metricEnabled_ = metricEnabled_;
        if (((bitField0_ & 0x00000002) != 0)) {
          grouping_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.grouping_ = grouping_;
        result.generateUpdateBefore_ = generateUpdateBefore_;
        if (keyTypeBuilder_ == null) {
          result.keyType_ = keyType_;
        } else {
          result.keyType_ = keyTypeBuilder_.build();
        }
        result.indexOfCountStar_ = indexOfCountStar_;
        result.stateCleaningEnabled_ = stateCleaningEnabled_;
        result.stateCacheSize_ = stateCacheSize_;
        result.mapStateReadCacheSize_ = mapStateReadCacheSize_;
        result.mapStateWriteCacheSize_ = mapStateWriteCacheSize_;
        result.countStarInserted_ = countStarInserted_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions) {
          return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions other) {
        if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions.getDefaultInstance()) return this;
        if (udfsBuilder_ == null) {
          if (!other.udfs_.isEmpty()) {
            if (udfs_.isEmpty()) {
              udfs_ = other.udfs_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureUdfsIsMutable();
              udfs_.addAll(other.udfs_);
            }
            onChanged();
          }
        } else {
          if (!other.udfs_.isEmpty()) {
            if (udfsBuilder_.isEmpty()) {
              udfsBuilder_.dispose();
              udfsBuilder_ = null;
              udfs_ = other.udfs_;
              bitField0_ = (bitField0_ & ~0x00000001);
              udfsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getUdfsFieldBuilder() : null;
            } else {
              udfsBuilder_.addAllMessages(other.udfs_);
            }
          }
        }
        if (other.getMetricEnabled() != false) {
          setMetricEnabled(other.getMetricEnabled());
        }
        if (!other.grouping_.isEmpty()) {
          if (grouping_.isEmpty()) {
            grouping_ = other.grouping_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureGroupingIsMutable();
            grouping_.addAll(other.grouping_);
          }
          onChanged();
        }
        if (other.getGenerateUpdateBefore() != false) {
          setGenerateUpdateBefore(other.getGenerateUpdateBefore());
        }
        if (other.hasKeyType()) {
          mergeKeyType(other.getKeyType());
        }
        if (other.getIndexOfCountStar() != 0) {
          setIndexOfCountStar(other.getIndexOfCountStar());
        }
        if (other.getStateCleaningEnabled() != false) {
          setStateCleaningEnabled(other.getStateCleaningEnabled());
        }
        if (other.getStateCacheSize() != 0) {
          setStateCacheSize(other.getStateCacheSize());
        }
        if (other.getMapStateReadCacheSize() != 0) {
          setMapStateReadCacheSize(other.getMapStateReadCacheSize());
        }
        if (other.getMapStateWriteCacheSize() != 0) {
          setMapStateWriteCacheSize(other.getMapStateWriteCacheSize());
        }
        if (other.getCountStarInserted() != false) {
          setCountStarInserted(other.getCountStarInserted());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction> udfs_ =
        java.util.Collections.emptyList();
      private void ensureUdfsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          udfs_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction>(udfs_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctionOrBuilder> udfsBuilder_;

      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction> getUdfsList() {
        if (udfsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(udfs_);
        } else {
          return udfsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public int getUdfsCount() {
        if (udfsBuilder_ == null) {
          return udfs_.size();
        } else {
          return udfsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction getUdfs(int index) {
        if (udfsBuilder_ == null) {
          return udfs_.get(index);
        } else {
          return udfsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public Builder setUdfs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction value) {
        if (udfsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUdfsIsMutable();
          udfs_.set(index, value);
          onChanged();
        } else {
          udfsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public Builder setUdfs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder builderForValue) {
        if (udfsBuilder_ == null) {
          ensureUdfsIsMutable();
          udfs_.set(index, builderForValue.build());
          onChanged();
        } else {
          udfsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public Builder addUdfs(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction value) {
        if (udfsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUdfsIsMutable();
          udfs_.add(value);
          onChanged();
        } else {
          udfsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public Builder addUdfs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction value) {
        if (udfsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUdfsIsMutable();
          udfs_.add(index, value);
          onChanged();
        } else {
          udfsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public Builder addUdfs(
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder builderForValue) {
        if (udfsBuilder_ == null) {
          ensureUdfsIsMutable();
          udfs_.add(builderForValue.build());
          onChanged();
        } else {
          udfsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public Builder addUdfs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder builderForValue) {
        if (udfsBuilder_ == null) {
          ensureUdfsIsMutable();
          udfs_.add(index, builderForValue.build());
          onChanged();
        } else {
          udfsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public Builder addAllUdfs(
          java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction> values) {
        if (udfsBuilder_ == null) {
          ensureUdfsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, udfs_);
          onChanged();
        } else {
          udfsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public Builder clearUdfs() {
        if (udfsBuilder_ == null) {
          udfs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          udfsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public Builder removeUdfs(int index) {
        if (udfsBuilder_ == null) {
          ensureUdfsIsMutable();
          udfs_.remove(index);
          onChanged();
        } else {
          udfsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder getUdfsBuilder(
          int index) {
        return getUdfsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctionOrBuilder getUdfsOrBuilder(
          int index) {
        if (udfsBuilder_ == null) {
          return udfs_.get(index);  } else {
          return udfsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctionOrBuilder> 
           getUdfsOrBuilderList() {
        if (udfsBuilder_ != null) {
          return udfsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(udfs_);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder addUdfsBuilder() {
        return getUdfsFieldBuilder().addBuilder(
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder addUdfsBuilder(
          int index) {
        return getUdfsFieldBuilder().addBuilder(
            index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder> 
           getUdfsBuilderList() {
        return getUdfsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctionOrBuilder> 
          getUdfsFieldBuilder() {
        if (udfsBuilder_ == null) {
          udfsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctionOrBuilder>(
                  udfs_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          udfs_ = null;
        }
        return udfsBuilder_;
      }

      private boolean metricEnabled_ ;
      /**
       * <code>bool metric_enabled = 2;</code>
       * @return The metricEnabled.
       */
      public boolean getMetricEnabled() {
        return metricEnabled_;
      }
      /**
       * <code>bool metric_enabled = 2;</code>
       * @param value The metricEnabled to set.
       * @return This builder for chaining.
       */
      public Builder setMetricEnabled(boolean value) {
        
        metricEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool metric_enabled = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMetricEnabled() {
        
        metricEnabled_ = false;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList grouping_ = emptyIntList();
      private void ensureGroupingIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          grouping_ = mutableCopy(grouping_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * The array of the key indexes.
       * </pre>
       *
       * <code>repeated int32 grouping = 3;</code>
       * @return A list containing the grouping.
       */
      public java.util.List<java.lang.Integer>
          getGroupingList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(grouping_) : grouping_;
      }
      /**
       * <pre>
       * The array of the key indexes.
       * </pre>
       *
       * <code>repeated int32 grouping = 3;</code>
       * @return The count of grouping.
       */
      public int getGroupingCount() {
        return grouping_.size();
      }
      /**
       * <pre>
       * The array of the key indexes.
       * </pre>
       *
       * <code>repeated int32 grouping = 3;</code>
       * @param index The index of the element to return.
       * @return The grouping at the given index.
       */
      public int getGrouping(int index) {
        return grouping_.getInt(index);
      }
      /**
       * <pre>
       * The array of the key indexes.
       * </pre>
       *
       * <code>repeated int32 grouping = 3;</code>
       * @param index The index to set the value at.
       * @param value The grouping to set.
       * @return This builder for chaining.
       */
      public Builder setGrouping(
          int index, int value) {
        ensureGroupingIsMutable();
        grouping_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The array of the key indexes.
       * </pre>
       *
       * <code>repeated int32 grouping = 3;</code>
       * @param value The grouping to add.
       * @return This builder for chaining.
       */
      public Builder addGrouping(int value) {
        ensureGroupingIsMutable();
        grouping_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The array of the key indexes.
       * </pre>
       *
       * <code>repeated int32 grouping = 3;</code>
       * @param values The grouping to add.
       * @return This builder for chaining.
       */
      public Builder addAllGrouping(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureGroupingIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, grouping_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The array of the key indexes.
       * </pre>
       *
       * <code>repeated int32 grouping = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearGrouping() {
        grouping_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private boolean generateUpdateBefore_ ;
      /**
       * <pre>
       * Generate retract messages if true.
       * </pre>
       *
       * <code>bool generate_update_before = 4;</code>
       * @return The generateUpdateBefore.
       */
      public boolean getGenerateUpdateBefore() {
        return generateUpdateBefore_;
      }
      /**
       * <pre>
       * Generate retract messages if true.
       * </pre>
       *
       * <code>bool generate_update_before = 4;</code>
       * @param value The generateUpdateBefore to set.
       * @return This builder for chaining.
       */
      public Builder setGenerateUpdateBefore(boolean value) {
        
        generateUpdateBefore_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Generate retract messages if true.
       * </pre>
       *
       * <code>bool generate_update_before = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearGenerateUpdateBefore() {
        
        generateUpdateBefore_ = false;
        onChanged();
        return this;
      }

      private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType keyType_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> keyTypeBuilder_;
      /**
       * <pre>
       * The schema of the grouping keys.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
       * @return Whether the keyType field is set.
       */
      public boolean hasKeyType() {
        return keyTypeBuilder_ != null || keyType_ != null;
      }
      /**
       * <pre>
       * The schema of the grouping keys.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
       * @return The keyType.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getKeyType() {
        if (keyTypeBuilder_ == null) {
          return keyType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : keyType_;
        } else {
          return keyTypeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The schema of the grouping keys.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
       */
      public Builder setKeyType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
        if (keyTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          keyType_ = value;
          onChanged();
        } else {
          keyTypeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The schema of the grouping keys.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
       */
      public Builder setKeyType(
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder builderForValue) {
        if (keyTypeBuilder_ == null) {
          keyType_ = builderForValue.build();
          onChanged();
        } else {
          keyTypeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The schema of the grouping keys.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
       */
      public Builder mergeKeyType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
        if (keyTypeBuilder_ == null) {
          if (keyType_ != null) {
            keyType_ =
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.newBuilder(keyType_).mergeFrom(value).buildPartial();
          } else {
            keyType_ = value;
          }
          onChanged();
        } else {
          keyTypeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The schema of the grouping keys.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
       */
      public Builder clearKeyType() {
        if (keyTypeBuilder_ == null) {
          keyType_ = null;
          onChanged();
        } else {
          keyType_ = null;
          keyTypeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The schema of the grouping keys.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder getKeyTypeBuilder() {
        
        onChanged();
        return getKeyTypeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The schema of the grouping keys.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getKeyTypeOrBuilder() {
        if (keyTypeBuilder_ != null) {
          return keyTypeBuilder_.getMessageOrBuilder();
        } else {
          return keyType_ == null ?
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : keyType_;
        }
      }
      /**
       * <pre>
       * The schema of the grouping keys.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> 
          getKeyTypeFieldBuilder() {
        if (keyTypeBuilder_ == null) {
          keyTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder>(
                  getKeyType(),
                  getParentForChildren(),
                  isClean());
          keyType_ = null;
        }
        return keyTypeBuilder_;
      }

      private int indexOfCountStar_ ;
      /**
       * <pre>
       * The index of a count aggregate used to calculate the number of accumulated rows.
       * </pre>
       *
       * <code>int32 index_of_count_star = 6;</code>
       * @return The indexOfCountStar.
       */
      public int getIndexOfCountStar() {
        return indexOfCountStar_;
      }
      /**
       * <pre>
       * The index of a count aggregate used to calculate the number of accumulated rows.
       * </pre>
       *
       * <code>int32 index_of_count_star = 6;</code>
       * @param value The indexOfCountStar to set.
       * @return This builder for chaining.
       */
      public Builder setIndexOfCountStar(int value) {
        
        indexOfCountStar_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The index of a count aggregate used to calculate the number of accumulated rows.
       * </pre>
       *
       * <code>int32 index_of_count_star = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearIndexOfCountStar() {
        
        indexOfCountStar_ = 0;
        onChanged();
        return this;
      }

      private boolean stateCleaningEnabled_ ;
      /**
       * <pre>
       * Cleanup the expired state if true.
       * </pre>
       *
       * <code>bool state_cleaning_enabled = 7;</code>
       * @return The stateCleaningEnabled.
       */
      public boolean getStateCleaningEnabled() {
        return stateCleaningEnabled_;
      }
      /**
       * <pre>
       * Cleanup the expired state if true.
       * </pre>
       *
       * <code>bool state_cleaning_enabled = 7;</code>
       * @param value The stateCleaningEnabled to set.
       * @return This builder for chaining.
       */
      public Builder setStateCleaningEnabled(boolean value) {
        
        stateCleaningEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Cleanup the expired state if true.
       * </pre>
       *
       * <code>bool state_cleaning_enabled = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearStateCleaningEnabled() {
        
        stateCleaningEnabled_ = false;
        onChanged();
        return this;
      }

      private int stateCacheSize_ ;
      /**
       * <pre>
       * The state cache size.
       * </pre>
       *
       * <code>int32 state_cache_size = 8;</code>
       * @return The stateCacheSize.
       */
      public int getStateCacheSize() {
        return stateCacheSize_;
      }
      /**
       * <pre>
       * The state cache size.
       * </pre>
       *
       * <code>int32 state_cache_size = 8;</code>
       * @param value The stateCacheSize to set.
       * @return This builder for chaining.
       */
      public Builder setStateCacheSize(int value) {
        
        stateCacheSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The state cache size.
       * </pre>
       *
       * <code>int32 state_cache_size = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearStateCacheSize() {
        
        stateCacheSize_ = 0;
        onChanged();
        return this;
      }

      private int mapStateReadCacheSize_ ;
      /**
       * <pre>
       * The map state read cache size.
       * </pre>
       *
       * <code>int32 map_state_read_cache_size = 9;</code>
       * @return The mapStateReadCacheSize.
       */
      public int getMapStateReadCacheSize() {
        return mapStateReadCacheSize_;
      }
      /**
       * <pre>
       * The map state read cache size.
       * </pre>
       *
       * <code>int32 map_state_read_cache_size = 9;</code>
       * @param value The mapStateReadCacheSize to set.
       * @return This builder for chaining.
       */
      public Builder setMapStateReadCacheSize(int value) {
        
        mapStateReadCacheSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The map state read cache size.
       * </pre>
       *
       * <code>int32 map_state_read_cache_size = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearMapStateReadCacheSize() {
        
        mapStateReadCacheSize_ = 0;
        onChanged();
        return this;
      }

      private int mapStateWriteCacheSize_ ;
      /**
       * <pre>
       * The map_state_write_cache_size.
       * </pre>
       *
       * <code>int32 map_state_write_cache_size = 10;</code>
       * @return The mapStateWriteCacheSize.
       */
      public int getMapStateWriteCacheSize() {
        return mapStateWriteCacheSize_;
      }
      /**
       * <pre>
       * The map_state_write_cache_size.
       * </pre>
       *
       * <code>int32 map_state_write_cache_size = 10;</code>
       * @param value The mapStateWriteCacheSize to set.
       * @return This builder for chaining.
       */
      public Builder setMapStateWriteCacheSize(int value) {
        
        mapStateWriteCacheSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The map_state_write_cache_size.
       * </pre>
       *
       * <code>int32 map_state_write_cache_size = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearMapStateWriteCacheSize() {
        
        mapStateWriteCacheSize_ = 0;
        onChanged();
        return this;
      }

      private boolean countStarInserted_ ;
      /**
       * <pre>
       * True if the count(*) agg is inserted by the planner.
       * </pre>
       *
       * <code>bool count_star_inserted = 11;</code>
       * @return The countStarInserted.
       */
      public boolean getCountStarInserted() {
        return countStarInserted_;
      }
      /**
       * <pre>
       * True if the count(*) agg is inserted by the planner.
       * </pre>
       *
       * <code>bool count_star_inserted = 11;</code>
       * @param value The countStarInserted to set.
       * @return This builder for chaining.
       */
      public Builder setCountStarInserted(boolean value) {
        
        countStarInserted_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * True if the count(*) agg is inserted by the planner.
       * </pre>
       *
       * <code>bool count_star_inserted = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearCountStarInserted() {
        
        countStarInserted_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunctions)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunctions)
    private static final org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions();
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UserDefinedAggregateFunctions>
        PARSER = new com.google.protobuf.AbstractParser<UserDefinedAggregateFunctions>() {
      @java.lang.Override
      public UserDefinedAggregateFunctions parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new UserDefinedAggregateFunctions(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<UserDefinedAggregateFunctions> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UserDefinedAggregateFunctions> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SchemaOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
     */
    java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field> 
        getFieldsList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field getFields(int index);
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
     */
    int getFieldsCount();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
     */
    java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldOrBuilder> 
        getFieldsOrBuilderList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldOrBuilder getFieldsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * A representation of the data schema.
   * </pre>
   *
   * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema}
   */
  public  static final class Schema extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema)
      SchemaOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Schema.newBuilder() to construct.
    private Schema(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Schema() {
      fields_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Schema();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Schema(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                fields_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field>();
                mutable_bitField0_ |= 0x00000001;
              }
              fields_.add(
                  input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          fields_ = java.util.Collections.unmodifiableList(fields_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder.class);
    }

    /**
     * Protobuf enum {@code org.apache.flink.fn_execution.v1.Schema.TypeName}
     */
    public enum TypeName
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>ROW = 0;</code>
       */
      ROW(0),
      /**
       * <code>TINYINT = 1;</code>
       */
      TINYINT(1),
      /**
       * <code>SMALLINT = 2;</code>
       */
      SMALLINT(2),
      /**
       * <code>INT = 3;</code>
       */
      INT(3),
      /**
       * <code>BIGINT = 4;</code>
       */
      BIGINT(4),
      /**
       * <code>DECIMAL = 5;</code>
       */
      DECIMAL(5),
      /**
       * <code>FLOAT = 6;</code>
       */
      FLOAT(6),
      /**
       * <code>DOUBLE = 7;</code>
       */
      DOUBLE(7),
      /**
       * <code>DATE = 8;</code>
       */
      DATE(8),
      /**
       * <code>TIME = 9;</code>
       */
      TIME(9),
      /**
       * <code>TIMESTAMP = 10;</code>
       */
      TIMESTAMP(10),
      /**
       * <code>BOOLEAN = 11;</code>
       */
      BOOLEAN(11),
      /**
       * <code>BINARY = 12;</code>
       */
      BINARY(12),
      /**
       * <code>VARBINARY = 13;</code>
       */
      VARBINARY(13),
      /**
       * <code>CHAR = 14;</code>
       */
      CHAR(14),
      /**
       * <code>VARCHAR = 15;</code>
       */
      VARCHAR(15),
      /**
       * <code>BASIC_ARRAY = 16;</code>
       */
      BASIC_ARRAY(16),
      /**
       * <code>MAP = 17;</code>
       */
      MAP(17),
      /**
       * <code>MULTISET = 18;</code>
       */
      MULTISET(18),
      /**
       * <code>LOCAL_ZONED_TIMESTAMP = 19;</code>
       */
      LOCAL_ZONED_TIMESTAMP(19),
      /**
       * <code>ZONED_TIMESTAMP = 20;</code>
       */
      ZONED_TIMESTAMP(20),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>ROW = 0;</code>
       */
      public static final int ROW_VALUE = 0;
      /**
       * <code>TINYINT = 1;</code>
       */
      public static final int TINYINT_VALUE = 1;
      /**
       * <code>SMALLINT = 2;</code>
       */
      public static final int SMALLINT_VALUE = 2;
      /**
       * <code>INT = 3;</code>
       */
      public static final int INT_VALUE = 3;
      /**
       * <code>BIGINT = 4;</code>
       */
      public static final int BIGINT_VALUE = 4;
      /**
       * <code>DECIMAL = 5;</code>
       */
      public static final int DECIMAL_VALUE = 5;
      /**
       * <code>FLOAT = 6;</code>
       */
      public static final int FLOAT_VALUE = 6;
      /**
       * <code>DOUBLE = 7;</code>
       */
      public static final int DOUBLE_VALUE = 7;
      /**
       * <code>DATE = 8;</code>
       */
      public static final int DATE_VALUE = 8;
      /**
       * <code>TIME = 9;</code>
       */
      public static final int TIME_VALUE = 9;
      /**
       * <code>TIMESTAMP = 10;</code>
       */
      public static final int TIMESTAMP_VALUE = 10;
      /**
       * <code>BOOLEAN = 11;</code>
       */
      public static final int BOOLEAN_VALUE = 11;
      /**
       * <code>BINARY = 12;</code>
       */
      public static final int BINARY_VALUE = 12;
      /**
       * <code>VARBINARY = 13;</code>
       */
      public static final int VARBINARY_VALUE = 13;
      /**
       * <code>CHAR = 14;</code>
       */
      public static final int CHAR_VALUE = 14;
      /**
       * <code>VARCHAR = 15;</code>
       */
      public static final int VARCHAR_VALUE = 15;
      /**
       * <code>BASIC_ARRAY = 16;</code>
       */
      public static final int BASIC_ARRAY_VALUE = 16;
      /**
       * <code>MAP = 17;</code>
       */
      public static final int MAP_VALUE = 17;
      /**
       * <code>MULTISET = 18;</code>
       */
      public static final int MULTISET_VALUE = 18;
      /**
       * <code>LOCAL_ZONED_TIMESTAMP = 19;</code>
       */
      public static final int LOCAL_ZONED_TIMESTAMP_VALUE = 19;
      /**
       * <code>ZONED_TIMESTAMP = 20;</code>
       */
      public static final int ZONED_TIMESTAMP_VALUE = 20;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TypeName valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static TypeName forNumber(int value) {
        switch (value) {
          case 0: return ROW;
          case 1: return TINYINT;
          case 2: return SMALLINT;
          case 3: return INT;
          case 4: return BIGINT;
          case 5: return DECIMAL;
          case 6: return FLOAT;
          case 7: return DOUBLE;
          case 8: return DATE;
          case 9: return TIME;
          case 10: return TIMESTAMP;
          case 11: return BOOLEAN;
          case 12: return BINARY;
          case 13: return VARBINARY;
          case 14: return CHAR;
          case 15: return VARCHAR;
          case 16: return BASIC_ARRAY;
          case 17: return MAP;
          case 18: return MULTISET;
          case 19: return LOCAL_ZONED_TIMESTAMP;
          case 20: return ZONED_TIMESTAMP;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TypeName>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          TypeName> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TypeName>() {
              public TypeName findValueByNumber(int number) {
                return TypeName.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDescriptor().getEnumTypes().get(0);
      }

      private static final TypeName[] VALUES = values();

      public static TypeName valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private TypeName(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.apache.flink.fn_execution.v1.Schema.TypeName)
    }

    public interface MapInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.MapInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
       * @return Whether the keyType field is set.
       */
      boolean hasKeyType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
       * @return The keyType.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getKeyType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getKeyTypeOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
       * @return Whether the valueType field is set.
       */
      boolean hasValueType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
       * @return The valueType.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getValueType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getValueTypeOrBuilder();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.MapInfo}
     */
    public  static final class MapInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.MapInfo)
        MapInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use MapInfo.newBuilder() to construct.
      private MapInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private MapInfo() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new MapInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private MapInfo(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder subBuilder = null;
                if (keyType_ != null) {
                  subBuilder = keyType_.toBuilder();
                }
                keyType_ = input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(keyType_);
                  keyType_ = subBuilder.buildPartial();
                }

                break;
              }
              case 18: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder subBuilder = null;
                if (valueType_ != null) {
                  subBuilder = valueType_.toBuilder();
                }
                valueType_ = input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(valueType_);
                  valueType_ = subBuilder.buildPartial();
                }

                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_MapInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_MapInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.Builder.class);
      }

      public static final int KEY_TYPE_FIELD_NUMBER = 1;
      private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType keyType_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
       * @return Whether the keyType field is set.
       */
      public boolean hasKeyType() {
        return keyType_ != null;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
       * @return The keyType.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getKeyType() {
        return keyType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : keyType_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getKeyTypeOrBuilder() {
        return getKeyType();
      }

      public static final int VALUE_TYPE_FIELD_NUMBER = 2;
      private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType valueType_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
       * @return Whether the valueType field is set.
       */
      public boolean hasValueType() {
        return valueType_ != null;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
       * @return The valueType.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getValueType() {
        return valueType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : valueType_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getValueTypeOrBuilder() {
        return getValueType();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (keyType_ != null) {
          output.writeMessage(1, getKeyType());
        }
        if (valueType_ != null) {
          output.writeMessage(2, getValueType());
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (keyType_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getKeyType());
        }
        if (valueType_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getValueType());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) obj;

        if (hasKeyType() != other.hasKeyType()) return false;
        if (hasKeyType()) {
          if (!getKeyType()
              .equals(other.getKeyType())) return false;
        }
        if (hasValueType() != other.hasValueType()) return false;
        if (hasValueType()) {
          if (!getValueType()
              .equals(other.getValueType())) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasKeyType()) {
          hash = (37 * hash) + KEY_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getKeyType().hashCode();
        }
        if (hasValueType()) {
          hash = (37 * hash) + VALUE_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getValueType().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.MapInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.MapInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_MapInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_MapInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (keyTypeBuilder_ == null) {
            keyType_ = null;
          } else {
            keyType_ = null;
            keyTypeBuilder_ = null;
          }
          if (valueTypeBuilder_ == null) {
            valueType_ = null;
          } else {
            valueType_ = null;
            valueTypeBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_MapInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo(this);
          if (keyTypeBuilder_ == null) {
            result.keyType_ = keyType_;
          } else {
            result.keyType_ = keyTypeBuilder_.build();
          }
          if (valueTypeBuilder_ == null) {
            result.valueType_ = valueType_;
          } else {
            result.valueType_ = valueTypeBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.getDefaultInstance()) return this;
          if (other.hasKeyType()) {
            mergeKeyType(other.getKeyType());
          }
          if (other.hasValueType()) {
            mergeValueType(other.getValueType());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType keyType_;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> keyTypeBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         * @return Whether the keyType field is set.
         */
        public boolean hasKeyType() {
          return keyTypeBuilder_ != null || keyType_ != null;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         * @return The keyType.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getKeyType() {
          if (keyTypeBuilder_ == null) {
            return keyType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : keyType_;
          } else {
            return keyTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         */
        public Builder setKeyType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
          if (keyTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            keyType_ = value;
            onChanged();
          } else {
            keyTypeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         */
        public Builder setKeyType(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder builderForValue) {
          if (keyTypeBuilder_ == null) {
            keyType_ = builderForValue.build();
            onChanged();
          } else {
            keyTypeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         */
        public Builder mergeKeyType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
          if (keyTypeBuilder_ == null) {
            if (keyType_ != null) {
              keyType_ =
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.newBuilder(keyType_).mergeFrom(value).buildPartial();
            } else {
              keyType_ = value;
            }
            onChanged();
          } else {
            keyTypeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         */
        public Builder clearKeyType() {
          if (keyTypeBuilder_ == null) {
            keyType_ = null;
            onChanged();
          } else {
            keyType_ = null;
            keyTypeBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder getKeyTypeBuilder() {
          
          onChanged();
          return getKeyTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getKeyTypeOrBuilder() {
          if (keyTypeBuilder_ != null) {
            return keyTypeBuilder_.getMessageOrBuilder();
          } else {
            return keyType_ == null ?
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : keyType_;
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> 
            getKeyTypeFieldBuilder() {
          if (keyTypeBuilder_ == null) {
            keyTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder>(
                    getKeyType(),
                    getParentForChildren(),
                    isClean());
            keyType_ = null;
          }
          return keyTypeBuilder_;
        }

        private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType valueType_;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> valueTypeBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         * @return Whether the valueType field is set.
         */
        public boolean hasValueType() {
          return valueTypeBuilder_ != null || valueType_ != null;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         * @return The valueType.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getValueType() {
          if (valueTypeBuilder_ == null) {
            return valueType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : valueType_;
          } else {
            return valueTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         */
        public Builder setValueType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
          if (valueTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            valueType_ = value;
            onChanged();
          } else {
            valueTypeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         */
        public Builder setValueType(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder builderForValue) {
          if (valueTypeBuilder_ == null) {
            valueType_ = builderForValue.build();
            onChanged();
          } else {
            valueTypeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         */
        public Builder mergeValueType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
          if (valueTypeBuilder_ == null) {
            if (valueType_ != null) {
              valueType_ =
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.newBuilder(valueType_).mergeFrom(value).buildPartial();
            } else {
              valueType_ = value;
            }
            onChanged();
          } else {
            valueTypeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         */
        public Builder clearValueType() {
          if (valueTypeBuilder_ == null) {
            valueType_ = null;
            onChanged();
          } else {
            valueType_ = null;
            valueTypeBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder getValueTypeBuilder() {
          
          onChanged();
          return getValueTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getValueTypeOrBuilder() {
          if (valueTypeBuilder_ != null) {
            return valueTypeBuilder_.getMessageOrBuilder();
          } else {
            return valueType_ == null ?
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : valueType_;
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> 
            getValueTypeFieldBuilder() {
          if (valueTypeBuilder_ == null) {
            valueTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder>(
                    getValueType(),
                    getParentForChildren(),
                    isClean());
            valueType_ = null;
          }
          return valueTypeBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.MapInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.MapInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<MapInfo>
          PARSER = new com.google.protobuf.AbstractParser<MapInfo>() {
        @java.lang.Override
        public MapInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new MapInfo(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<MapInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<MapInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface TimeInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.TimeInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>int32 precision = 1;</code>
       * @return The precision.
       */
      int getPrecision();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.TimeInfo}
     */
    public  static final class TimeInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.TimeInfo)
        TimeInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use TimeInfo.newBuilder() to construct.
      private TimeInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private TimeInfo() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new TimeInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private TimeInfo(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {

                precision_ = input.readInt32();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_TimeInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_TimeInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.Builder.class);
      }

      public static final int PRECISION_FIELD_NUMBER = 1;
      private int precision_;
      /**
       * <code>int32 precision = 1;</code>
       * @return The precision.
       */
      public int getPrecision() {
        return precision_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (precision_ != 0) {
          output.writeInt32(1, precision_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (precision_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, precision_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) obj;

        if (getPrecision()
            != other.getPrecision()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + PRECISION_FIELD_NUMBER;
        hash = (53 * hash) + getPrecision();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.TimeInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.TimeInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_TimeInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_TimeInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          precision_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_TimeInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo(this);
          result.precision_ = precision_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.getDefaultInstance()) return this;
          if (other.getPrecision() != 0) {
            setPrecision(other.getPrecision());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int precision_ ;
        /**
         * <code>int32 precision = 1;</code>
         * @return The precision.
         */
        public int getPrecision() {
          return precision_;
        }
        /**
         * <code>int32 precision = 1;</code>
         * @param value The precision to set.
         * @return This builder for chaining.
         */
        public Builder setPrecision(int value) {
          
          precision_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 precision = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPrecision() {
          
          precision_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.TimeInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.TimeInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<TimeInfo>
          PARSER = new com.google.protobuf.AbstractParser<TimeInfo>() {
        @java.lang.Override
        public TimeInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new TimeInfo(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<TimeInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TimeInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface TimestampInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.TimestampInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>int32 precision = 1;</code>
       * @return The precision.
       */
      int getPrecision();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.TimestampInfo}
     */
    public  static final class TimestampInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.TimestampInfo)
        TimestampInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use TimestampInfo.newBuilder() to construct.
      private TimestampInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private TimestampInfo() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new TimestampInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private TimestampInfo(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {

                precision_ = input.readInt32();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_TimestampInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_TimestampInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.Builder.class);
      }

      public static final int PRECISION_FIELD_NUMBER = 1;
      private int precision_;
      /**
       * <code>int32 precision = 1;</code>
       * @return The precision.
       */
      public int getPrecision() {
        return precision_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (precision_ != 0) {
          output.writeInt32(1, precision_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (precision_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, precision_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) obj;

        if (getPrecision()
            != other.getPrecision()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + PRECISION_FIELD_NUMBER;
        hash = (53 * hash) + getPrecision();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.TimestampInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.TimestampInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_TimestampInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_TimestampInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          precision_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_TimestampInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo(this);
          result.precision_ = precision_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.getDefaultInstance()) return this;
          if (other.getPrecision() != 0) {
            setPrecision(other.getPrecision());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int precision_ ;
        /**
         * <code>int32 precision = 1;</code>
         * @return The precision.
         */
        public int getPrecision() {
          return precision_;
        }
        /**
         * <code>int32 precision = 1;</code>
         * @param value The precision to set.
         * @return This builder for chaining.
         */
        public Builder setPrecision(int value) {
          
          precision_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 precision = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPrecision() {
          
          precision_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.TimestampInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.TimestampInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<TimestampInfo>
          PARSER = new com.google.protobuf.AbstractParser<TimestampInfo>() {
        @java.lang.Override
        public TimestampInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new TimestampInfo(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<TimestampInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TimestampInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface LocalZonedTimestampInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>int32 precision = 1;</code>
       * @return The precision.
       */
      int getPrecision();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo}
     */
    public  static final class LocalZonedTimestampInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo)
        LocalZonedTimestampInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use LocalZonedTimestampInfo.newBuilder() to construct.
      private LocalZonedTimestampInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private LocalZonedTimestampInfo() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new LocalZonedTimestampInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private LocalZonedTimestampInfo(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {

                precision_ = input.readInt32();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_LocalZonedTimestampInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_LocalZonedTimestampInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.Builder.class);
      }

      public static final int PRECISION_FIELD_NUMBER = 1;
      private int precision_;
      /**
       * <code>int32 precision = 1;</code>
       * @return The precision.
       */
      public int getPrecision() {
        return precision_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (precision_ != 0) {
          output.writeInt32(1, precision_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (precision_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, precision_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) obj;

        if (getPrecision()
            != other.getPrecision()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + PRECISION_FIELD_NUMBER;
        hash = (53 * hash) + getPrecision();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_LocalZonedTimestampInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_LocalZonedTimestampInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          precision_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_LocalZonedTimestampInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo(this);
          result.precision_ = precision_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.getDefaultInstance()) return this;
          if (other.getPrecision() != 0) {
            setPrecision(other.getPrecision());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int precision_ ;
        /**
         * <code>int32 precision = 1;</code>
         * @return The precision.
         */
        public int getPrecision() {
          return precision_;
        }
        /**
         * <code>int32 precision = 1;</code>
         * @param value The precision to set.
         * @return This builder for chaining.
         */
        public Builder setPrecision(int value) {
          
          precision_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 precision = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPrecision() {
          
          precision_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<LocalZonedTimestampInfo>
          PARSER = new com.google.protobuf.AbstractParser<LocalZonedTimestampInfo>() {
        @java.lang.Override
        public LocalZonedTimestampInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new LocalZonedTimestampInfo(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<LocalZonedTimestampInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<LocalZonedTimestampInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface ZonedTimestampInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>int32 precision = 1;</code>
       * @return The precision.
       */
      int getPrecision();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo}
     */
    public  static final class ZonedTimestampInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo)
        ZonedTimestampInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use ZonedTimestampInfo.newBuilder() to construct.
      private ZonedTimestampInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ZonedTimestampInfo() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new ZonedTimestampInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private ZonedTimestampInfo(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {

                precision_ = input.readInt32();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_ZonedTimestampInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_ZonedTimestampInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.Builder.class);
      }

      public static final int PRECISION_FIELD_NUMBER = 1;
      private int precision_;
      /**
       * <code>int32 precision = 1;</code>
       * @return The precision.
       */
      public int getPrecision() {
        return precision_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (precision_ != 0) {
          output.writeInt32(1, precision_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (precision_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, precision_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) obj;

        if (getPrecision()
            != other.getPrecision()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + PRECISION_FIELD_NUMBER;
        hash = (53 * hash) + getPrecision();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_ZonedTimestampInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_ZonedTimestampInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          precision_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_ZonedTimestampInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo(this);
          result.precision_ = precision_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.getDefaultInstance()) return this;
          if (other.getPrecision() != 0) {
            setPrecision(other.getPrecision());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int precision_ ;
        /**
         * <code>int32 precision = 1;</code>
         * @return The precision.
         */
        public int getPrecision() {
          return precision_;
        }
        /**
         * <code>int32 precision = 1;</code>
         * @param value The precision to set.
         * @return This builder for chaining.
         */
        public Builder setPrecision(int value) {
          
          precision_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 precision = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPrecision() {
          
          precision_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<ZonedTimestampInfo>
          PARSER = new com.google.protobuf.AbstractParser<ZonedTimestampInfo>() {
        @java.lang.Override
        public ZonedTimestampInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new ZonedTimestampInfo(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<ZonedTimestampInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ZonedTimestampInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface DecimalInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.DecimalInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>int32 precision = 1;</code>
       * @return The precision.
       */
      int getPrecision();

      /**
       * <code>int32 scale = 2;</code>
       * @return The scale.
       */
      int getScale();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.DecimalInfo}
     */
    public  static final class DecimalInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.DecimalInfo)
        DecimalInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use DecimalInfo.newBuilder() to construct.
      private DecimalInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private DecimalInfo() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new DecimalInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private DecimalInfo(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {

                precision_ = input.readInt32();
                break;
              }
              case 16: {

                scale_ = input.readInt32();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_DecimalInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_DecimalInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.Builder.class);
      }

      public static final int PRECISION_FIELD_NUMBER = 1;
      private int precision_;
      /**
       * <code>int32 precision = 1;</code>
       * @return The precision.
       */
      public int getPrecision() {
        return precision_;
      }

      public static final int SCALE_FIELD_NUMBER = 2;
      private int scale_;
      /**
       * <code>int32 scale = 2;</code>
       * @return The scale.
       */
      public int getScale() {
        return scale_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (precision_ != 0) {
          output.writeInt32(1, precision_);
        }
        if (scale_ != 0) {
          output.writeInt32(2, scale_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (precision_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, precision_);
        }
        if (scale_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, scale_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) obj;

        if (getPrecision()
            != other.getPrecision()) return false;
        if (getScale()
            != other.getScale()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + PRECISION_FIELD_NUMBER;
        hash = (53 * hash) + getPrecision();
        hash = (37 * hash) + SCALE_FIELD_NUMBER;
        hash = (53 * hash) + getScale();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.DecimalInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.DecimalInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_DecimalInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_DecimalInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          precision_ = 0;

          scale_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_DecimalInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo(this);
          result.precision_ = precision_;
          result.scale_ = scale_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.getDefaultInstance()) return this;
          if (other.getPrecision() != 0) {
            setPrecision(other.getPrecision());
          }
          if (other.getScale() != 0) {
            setScale(other.getScale());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int precision_ ;
        /**
         * <code>int32 precision = 1;</code>
         * @return The precision.
         */
        public int getPrecision() {
          return precision_;
        }
        /**
         * <code>int32 precision = 1;</code>
         * @param value The precision to set.
         * @return This builder for chaining.
         */
        public Builder setPrecision(int value) {
          
          precision_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 precision = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPrecision() {
          
          precision_ = 0;
          onChanged();
          return this;
        }

        private int scale_ ;
        /**
         * <code>int32 scale = 2;</code>
         * @return The scale.
         */
        public int getScale() {
          return scale_;
        }
        /**
         * <code>int32 scale = 2;</code>
         * @param value The scale to set.
         * @return This builder for chaining.
         */
        public Builder setScale(int value) {
          
          scale_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 scale = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearScale() {
          
          scale_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.DecimalInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.DecimalInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<DecimalInfo>
          PARSER = new com.google.protobuf.AbstractParser<DecimalInfo>() {
        @java.lang.Override
        public DecimalInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DecimalInfo(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<DecimalInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<DecimalInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface BinaryInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.BinaryInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>int32 length = 1;</code>
       * @return The length.
       */
      int getLength();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.BinaryInfo}
     */
    public  static final class BinaryInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.BinaryInfo)
        BinaryInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use BinaryInfo.newBuilder() to construct.
      private BinaryInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private BinaryInfo() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new BinaryInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private BinaryInfo(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {

                length_ = input.readInt32();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_BinaryInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_BinaryInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.Builder.class);
      }

      public static final int LENGTH_FIELD_NUMBER = 1;
      private int length_;
      /**
       * <code>int32 length = 1;</code>
       * @return The length.
       */
      public int getLength() {
        return length_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (length_ != 0) {
          output.writeInt32(1, length_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (length_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, length_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) obj;

        if (getLength()
            != other.getLength()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + LENGTH_FIELD_NUMBER;
        hash = (53 * hash) + getLength();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.BinaryInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.BinaryInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_BinaryInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_BinaryInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          length_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_BinaryInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo(this);
          result.length_ = length_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.getDefaultInstance()) return this;
          if (other.getLength() != 0) {
            setLength(other.getLength());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int length_ ;
        /**
         * <code>int32 length = 1;</code>
         * @return The length.
         */
        public int getLength() {
          return length_;
        }
        /**
         * <code>int32 length = 1;</code>
         * @param value The length to set.
         * @return This builder for chaining.
         */
        public Builder setLength(int value) {
          
          length_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 length = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearLength() {
          
          length_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.BinaryInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.BinaryInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<BinaryInfo>
          PARSER = new com.google.protobuf.AbstractParser<BinaryInfo>() {
        @java.lang.Override
        public BinaryInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new BinaryInfo(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<BinaryInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<BinaryInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface VarBinaryInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>int32 length = 1;</code>
       * @return The length.
       */
      int getLength();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo}
     */
    public  static final class VarBinaryInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo)
        VarBinaryInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use VarBinaryInfo.newBuilder() to construct.
      private VarBinaryInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private VarBinaryInfo() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new VarBinaryInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private VarBinaryInfo(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {

                length_ = input.readInt32();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_VarBinaryInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_VarBinaryInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.Builder.class);
      }

      public static final int LENGTH_FIELD_NUMBER = 1;
      private int length_;
      /**
       * <code>int32 length = 1;</code>
       * @return The length.
       */
      public int getLength() {
        return length_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (length_ != 0) {
          output.writeInt32(1, length_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (length_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, length_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) obj;

        if (getLength()
            != other.getLength()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + LENGTH_FIELD_NUMBER;
        hash = (53 * hash) + getLength();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_VarBinaryInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_VarBinaryInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          length_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_VarBinaryInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo(this);
          result.length_ = length_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.getDefaultInstance()) return this;
          if (other.getLength() != 0) {
            setLength(other.getLength());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int length_ ;
        /**
         * <code>int32 length = 1;</code>
         * @return The length.
         */
        public int getLength() {
          return length_;
        }
        /**
         * <code>int32 length = 1;</code>
         * @param value The length to set.
         * @return This builder for chaining.
         */
        public Builder setLength(int value) {
          
          length_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 length = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearLength() {
          
          length_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<VarBinaryInfo>
          PARSER = new com.google.protobuf.AbstractParser<VarBinaryInfo>() {
        @java.lang.Override
        public VarBinaryInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new VarBinaryInfo(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<VarBinaryInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<VarBinaryInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface CharInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.CharInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>int32 length = 1;</code>
       * @return The length.
       */
      int getLength();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.CharInfo}
     */
    public  static final class CharInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.CharInfo)
        CharInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use CharInfo.newBuilder() to construct.
      private CharInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private CharInfo() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new CharInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private CharInfo(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {

                length_ = input.readInt32();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_CharInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_CharInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.Builder.class);
      }

      public static final int LENGTH_FIELD_NUMBER = 1;
      private int length_;
      /**
       * <code>int32 length = 1;</code>
       * @return The length.
       */
      public int getLength() {
        return length_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (length_ != 0) {
          output.writeInt32(1, length_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (length_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, length_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) obj;

        if (getLength()
            != other.getLength()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + LENGTH_FIELD_NUMBER;
        hash = (53 * hash) + getLength();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.CharInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.CharInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_CharInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_CharInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          length_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_CharInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo(this);
          result.length_ = length_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.getDefaultInstance()) return this;
          if (other.getLength() != 0) {
            setLength(other.getLength());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int length_ ;
        /**
         * <code>int32 length = 1;</code>
         * @return The length.
         */
        public int getLength() {
          return length_;
        }
        /**
         * <code>int32 length = 1;</code>
         * @param value The length to set.
         * @return This builder for chaining.
         */
        public Builder setLength(int value) {
          
          length_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 length = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearLength() {
          
          length_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.CharInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.CharInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<CharInfo>
          PARSER = new com.google.protobuf.AbstractParser<CharInfo>() {
        @java.lang.Override
        public CharInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new CharInfo(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<CharInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<CharInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface VarCharInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.VarCharInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>int32 length = 1;</code>
       * @return The length.
       */
      int getLength();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.VarCharInfo}
     */
    public  static final class VarCharInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.VarCharInfo)
        VarCharInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use VarCharInfo.newBuilder() to construct.
      private VarCharInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private VarCharInfo() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new VarCharInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private VarCharInfo(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {

                length_ = input.readInt32();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_VarCharInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_VarCharInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.Builder.class);
      }

      public static final int LENGTH_FIELD_NUMBER = 1;
      private int length_;
      /**
       * <code>int32 length = 1;</code>
       * @return The length.
       */
      public int getLength() {
        return length_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (length_ != 0) {
          output.writeInt32(1, length_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (length_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, length_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) obj;

        if (getLength()
            != other.getLength()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + LENGTH_FIELD_NUMBER;
        hash = (53 * hash) + getLength();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.VarCharInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.VarCharInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_VarCharInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_VarCharInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          length_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_VarCharInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo(this);
          result.length_ = length_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.getDefaultInstance()) return this;
          if (other.getLength() != 0) {
            setLength(other.getLength());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int length_ ;
        /**
         * <code>int32 length = 1;</code>
         * @return The length.
         */
        public int getLength() {
          return length_;
        }
        /**
         * <code>int32 length = 1;</code>
         * @param value The length to set.
         * @return This builder for chaining.
         */
        public Builder setLength(int value) {
          
          length_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 length = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearLength() {
          
          length_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.VarCharInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.VarCharInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<VarCharInfo>
          PARSER = new com.google.protobuf.AbstractParser<VarCharInfo>() {
        @java.lang.Override
        public VarCharInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new VarCharInfo(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<VarCharInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<VarCharInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface FieldTypeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.FieldType)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TypeName type_name = 1;</code>
       * @return The enum numeric value on the wire for typeName.
       */
      int getTypeNameValue();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TypeName type_name = 1;</code>
       * @return The typeName.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName getTypeName();

      /**
       * <code>bool nullable = 2;</code>
       * @return The nullable.
       */
      boolean getNullable();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
       * @return Whether the collectionElementType field is set.
       */
      boolean hasCollectionElementType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
       * @return The collectionElementType.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getCollectionElementType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getCollectionElementTypeOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
       * @return Whether the mapInfo field is set.
       */
      boolean hasMapInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
       * @return The mapInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo getMapInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfoOrBuilder getMapInfoOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
       * @return Whether the rowSchema field is set.
       */
      boolean hasRowSchema();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
       * @return The rowSchema.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getRowSchema();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder getRowSchemaOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
       * @return Whether the decimalInfo field is set.
       */
      boolean hasDecimalInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
       * @return The decimalInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo getDecimalInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfoOrBuilder getDecimalInfoOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
       * @return Whether the timeInfo field is set.
       */
      boolean hasTimeInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
       * @return The timeInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo getTimeInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfoOrBuilder getTimeInfoOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
       * @return Whether the timestampInfo field is set.
       */
      boolean hasTimestampInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
       * @return The timestampInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo getTimestampInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfoOrBuilder getTimestampInfoOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
       * @return Whether the localZonedTimestampInfo field is set.
       */
      boolean hasLocalZonedTimestampInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
       * @return The localZonedTimestampInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo getLocalZonedTimestampInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfoOrBuilder getLocalZonedTimestampInfoOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
       * @return Whether the zonedTimestampInfo field is set.
       */
      boolean hasZonedTimestampInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
       * @return The zonedTimestampInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo getZonedTimestampInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfoOrBuilder getZonedTimestampInfoOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
       * @return Whether the binaryInfo field is set.
       */
      boolean hasBinaryInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
       * @return The binaryInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo getBinaryInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfoOrBuilder getBinaryInfoOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
       * @return Whether the varBinaryInfo field is set.
       */
      boolean hasVarBinaryInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
       * @return The varBinaryInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo getVarBinaryInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfoOrBuilder getVarBinaryInfoOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
       * @return Whether the charInfo field is set.
       */
      boolean hasCharInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
       * @return The charInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo getCharInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfoOrBuilder getCharInfoOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
       * @return Whether the varCharInfo field is set.
       */
      boolean hasVarCharInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
       * @return The varCharInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo getVarCharInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfoOrBuilder getVarCharInfoOrBuilder();

      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.TypeInfoCase getTypeInfoCase();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.FieldType}
     */
    public  static final class FieldType extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.FieldType)
        FieldTypeOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use FieldType.newBuilder() to construct.
      private FieldType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private FieldType() {
        typeName_ = 0;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new FieldType();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private FieldType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int rawValue = input.readEnum();

                typeName_ = rawValue;
                break;
              }
              case 16: {

                nullable_ = input.readBool();
                break;
              }
              case 26: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder subBuilder = null;
                if (typeInfoCase_ == 3) {
                  subBuilder = ((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) typeInfo_).toBuilder();
                }
                typeInfo_ =
                    input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) typeInfo_);
                  typeInfo_ = subBuilder.buildPartial();
                }
                typeInfoCase_ = 3;
                break;
              }
              case 34: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.Builder subBuilder = null;
                if (typeInfoCase_ == 4) {
                  subBuilder = ((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) typeInfo_).toBuilder();
                }
                typeInfo_ =
                    input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) typeInfo_);
                  typeInfo_ = subBuilder.buildPartial();
                }
                typeInfoCase_ = 4;
                break;
              }
              case 42: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder subBuilder = null;
                if (typeInfoCase_ == 5) {
                  subBuilder = ((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) typeInfo_).toBuilder();
                }
                typeInfo_ =
                    input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) typeInfo_);
                  typeInfo_ = subBuilder.buildPartial();
                }
                typeInfoCase_ = 5;
                break;
              }
              case 50: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.Builder subBuilder = null;
                if (typeInfoCase_ == 6) {
                  subBuilder = ((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) typeInfo_).toBuilder();
                }
                typeInfo_ =
                    input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) typeInfo_);
                  typeInfo_ = subBuilder.buildPartial();
                }
                typeInfoCase_ = 6;
                break;
              }
              case 58: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.Builder subBuilder = null;
                if (typeInfoCase_ == 7) {
                  subBuilder = ((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) typeInfo_).toBuilder();
                }
                typeInfo_ =
                    input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) typeInfo_);
                  typeInfo_ = subBuilder.buildPartial();
                }
                typeInfoCase_ = 7;
                break;
              }
              case 66: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.Builder subBuilder = null;
                if (typeInfoCase_ == 8) {
                  subBuilder = ((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) typeInfo_).toBuilder();
                }
                typeInfo_ =
                    input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) typeInfo_);
                  typeInfo_ = subBuilder.buildPartial();
                }
                typeInfoCase_ = 8;
                break;
              }
              case 74: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.Builder subBuilder = null;
                if (typeInfoCase_ == 9) {
                  subBuilder = ((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) typeInfo_).toBuilder();
                }
                typeInfo_ =
                    input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) typeInfo_);
                  typeInfo_ = subBuilder.buildPartial();
                }
                typeInfoCase_ = 9;
                break;
              }
              case 82: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.Builder subBuilder = null;
                if (typeInfoCase_ == 10) {
                  subBuilder = ((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) typeInfo_).toBuilder();
                }
                typeInfo_ =
                    input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) typeInfo_);
                  typeInfo_ = subBuilder.buildPartial();
                }
                typeInfoCase_ = 10;
                break;
              }
              case 90: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.Builder subBuilder = null;
                if (typeInfoCase_ == 11) {
                  subBuilder = ((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) typeInfo_).toBuilder();
                }
                typeInfo_ =
                    input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) typeInfo_);
                  typeInfo_ = subBuilder.buildPartial();
                }
                typeInfoCase_ = 11;
                break;
              }
              case 98: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.Builder subBuilder = null;
                if (typeInfoCase_ == 12) {
                  subBuilder = ((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) typeInfo_).toBuilder();
                }
                typeInfo_ =
                    input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) typeInfo_);
                  typeInfo_ = subBuilder.buildPartial();
                }
                typeInfoCase_ = 12;
                break;
              }
              case 106: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.Builder subBuilder = null;
                if (typeInfoCase_ == 13) {
                  subBuilder = ((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) typeInfo_).toBuilder();
                }
                typeInfo_ =
                    input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) typeInfo_);
                  typeInfo_ = subBuilder.buildPartial();
                }
                typeInfoCase_ = 13;
                break;
              }
              case 114: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.Builder subBuilder = null;
                if (typeInfoCase_ == 14) {
                  subBuilder = ((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) typeInfo_).toBuilder();
                }
                typeInfo_ =
                    input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) typeInfo_);
                  typeInfo_ = subBuilder.buildPartial();
                }
                typeInfoCase_ = 14;
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_FieldType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_FieldType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder.class);
      }

      private int typeInfoCase_ = 0;
      private java.lang.Object typeInfo_;
      public enum TypeInfoCase
          implements com.google.protobuf.Internal.EnumLite,
              com.google.protobuf.AbstractMessage.InternalOneOfEnum {
        COLLECTION_ELEMENT_TYPE(3),
        MAP_INFO(4),
        ROW_SCHEMA(5),
        DECIMAL_INFO(6),
        TIME_INFO(7),
        TIMESTAMP_INFO(8),
        LOCAL_ZONED_TIMESTAMP_INFO(9),
        ZONED_TIMESTAMP_INFO(10),
        BINARY_INFO(11),
        VAR_BINARY_INFO(12),
        CHAR_INFO(13),
        VAR_CHAR_INFO(14),
        TYPEINFO_NOT_SET(0);
        private final int value;
        private TypeInfoCase(int value) {
          this.value = value;
        }
        /**
         * @param value The number of the enum to look for.
         * @return The enum associated with the given number.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static TypeInfoCase valueOf(int value) {
          return forNumber(value);
        }

        public static TypeInfoCase forNumber(int value) {
          switch (value) {
            case 3: return COLLECTION_ELEMENT_TYPE;
            case 4: return MAP_INFO;
            case 5: return ROW_SCHEMA;
            case 6: return DECIMAL_INFO;
            case 7: return TIME_INFO;
            case 8: return TIMESTAMP_INFO;
            case 9: return LOCAL_ZONED_TIMESTAMP_INFO;
            case 10: return ZONED_TIMESTAMP_INFO;
            case 11: return BINARY_INFO;
            case 12: return VAR_BINARY_INFO;
            case 13: return CHAR_INFO;
            case 14: return VAR_CHAR_INFO;
            case 0: return TYPEINFO_NOT_SET;
            default: return null;
          }
        }
        public int getNumber() {
          return this.value;
        }
      };

      public TypeInfoCase
      getTypeInfoCase() {
        return TypeInfoCase.forNumber(
            typeInfoCase_);
      }

      public static final int TYPE_NAME_FIELD_NUMBER = 1;
      private int typeName_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TypeName type_name = 1;</code>
       * @return The enum numeric value on the wire for typeName.
       */
      public int getTypeNameValue() {
        return typeName_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TypeName type_name = 1;</code>
       * @return The typeName.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName getTypeName() {
        @SuppressWarnings("deprecation")
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName result = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName.valueOf(typeName_);
        return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName.UNRECOGNIZED : result;
      }

      public static final int NULLABLE_FIELD_NUMBER = 2;
      private boolean nullable_;
      /**
       * <code>bool nullable = 2;</code>
       * @return The nullable.
       */
      public boolean getNullable() {
        return nullable_;
      }

      public static final int COLLECTION_ELEMENT_TYPE_FIELD_NUMBER = 3;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
       * @return Whether the collectionElementType field is set.
       */
      public boolean hasCollectionElementType() {
        return typeInfoCase_ == 3;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
       * @return The collectionElementType.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getCollectionElementType() {
        if (typeInfoCase_ == 3) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getCollectionElementTypeOrBuilder() {
        if (typeInfoCase_ == 3) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance();
      }

      public static final int MAP_INFO_FIELD_NUMBER = 4;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
       * @return Whether the mapInfo field is set.
       */
      public boolean hasMapInfo() {
        return typeInfoCase_ == 4;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
       * @return The mapInfo.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo getMapInfo() {
        if (typeInfoCase_ == 4) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfoOrBuilder getMapInfoOrBuilder() {
        if (typeInfoCase_ == 4) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.getDefaultInstance();
      }

      public static final int ROW_SCHEMA_FIELD_NUMBER = 5;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
       * @return Whether the rowSchema field is set.
       */
      public boolean hasRowSchema() {
        return typeInfoCase_ == 5;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
       * @return The rowSchema.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getRowSchema() {
        if (typeInfoCase_ == 5) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder getRowSchemaOrBuilder() {
        if (typeInfoCase_ == 5) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance();
      }

      public static final int DECIMAL_INFO_FIELD_NUMBER = 6;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
       * @return Whether the decimalInfo field is set.
       */
      public boolean hasDecimalInfo() {
        return typeInfoCase_ == 6;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
       * @return The decimalInfo.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo getDecimalInfo() {
        if (typeInfoCase_ == 6) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfoOrBuilder getDecimalInfoOrBuilder() {
        if (typeInfoCase_ == 6) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.getDefaultInstance();
      }

      public static final int TIME_INFO_FIELD_NUMBER = 7;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
       * @return Whether the timeInfo field is set.
       */
      public boolean hasTimeInfo() {
        return typeInfoCase_ == 7;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
       * @return The timeInfo.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo getTimeInfo() {
        if (typeInfoCase_ == 7) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfoOrBuilder getTimeInfoOrBuilder() {
        if (typeInfoCase_ == 7) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.getDefaultInstance();
      }

      public static final int TIMESTAMP_INFO_FIELD_NUMBER = 8;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
       * @return Whether the timestampInfo field is set.
       */
      public boolean hasTimestampInfo() {
        return typeInfoCase_ == 8;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
       * @return The timestampInfo.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo getTimestampInfo() {
        if (typeInfoCase_ == 8) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfoOrBuilder getTimestampInfoOrBuilder() {
        if (typeInfoCase_ == 8) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.getDefaultInstance();
      }

      public static final int LOCAL_ZONED_TIMESTAMP_INFO_FIELD_NUMBER = 9;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
       * @return Whether the localZonedTimestampInfo field is set.
       */
      public boolean hasLocalZonedTimestampInfo() {
        return typeInfoCase_ == 9;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
       * @return The localZonedTimestampInfo.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo getLocalZonedTimestampInfo() {
        if (typeInfoCase_ == 9) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfoOrBuilder getLocalZonedTimestampInfoOrBuilder() {
        if (typeInfoCase_ == 9) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.getDefaultInstance();
      }

      public static final int ZONED_TIMESTAMP_INFO_FIELD_NUMBER = 10;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
       * @return Whether the zonedTimestampInfo field is set.
       */
      public boolean hasZonedTimestampInfo() {
        return typeInfoCase_ == 10;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
       * @return The zonedTimestampInfo.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo getZonedTimestampInfo() {
        if (typeInfoCase_ == 10) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfoOrBuilder getZonedTimestampInfoOrBuilder() {
        if (typeInfoCase_ == 10) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.getDefaultInstance();
      }

      public static final int BINARY_INFO_FIELD_NUMBER = 11;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
       * @return Whether the binaryInfo field is set.
       */
      public boolean hasBinaryInfo() {
        return typeInfoCase_ == 11;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
       * @return The binaryInfo.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo getBinaryInfo() {
        if (typeInfoCase_ == 11) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfoOrBuilder getBinaryInfoOrBuilder() {
        if (typeInfoCase_ == 11) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.getDefaultInstance();
      }

      public static final int VAR_BINARY_INFO_FIELD_NUMBER = 12;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
       * @return Whether the varBinaryInfo field is set.
       */
      public boolean hasVarBinaryInfo() {
        return typeInfoCase_ == 12;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
       * @return The varBinaryInfo.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo getVarBinaryInfo() {
        if (typeInfoCase_ == 12) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfoOrBuilder getVarBinaryInfoOrBuilder() {
        if (typeInfoCase_ == 12) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.getDefaultInstance();
      }

      public static final int CHAR_INFO_FIELD_NUMBER = 13;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
       * @return Whether the charInfo field is set.
       */
      public boolean hasCharInfo() {
        return typeInfoCase_ == 13;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
       * @return The charInfo.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo getCharInfo() {
        if (typeInfoCase_ == 13) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfoOrBuilder getCharInfoOrBuilder() {
        if (typeInfoCase_ == 13) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.getDefaultInstance();
      }

      public static final int VAR_CHAR_INFO_FIELD_NUMBER = 14;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
       * @return Whether the varCharInfo field is set.
       */
      public boolean hasVarCharInfo() {
        return typeInfoCase_ == 14;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
       * @return The varCharInfo.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo getVarCharInfo() {
        if (typeInfoCase_ == 14) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfoOrBuilder getVarCharInfoOrBuilder() {
        if (typeInfoCase_ == 14) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.getDefaultInstance();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (typeName_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName.ROW.getNumber()) {
          output.writeEnum(1, typeName_);
        }
        if (nullable_ != false) {
          output.writeBool(2, nullable_);
        }
        if (typeInfoCase_ == 3) {
          output.writeMessage(3, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) typeInfo_);
        }
        if (typeInfoCase_ == 4) {
          output.writeMessage(4, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) typeInfo_);
        }
        if (typeInfoCase_ == 5) {
          output.writeMessage(5, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) typeInfo_);
        }
        if (typeInfoCase_ == 6) {
          output.writeMessage(6, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) typeInfo_);
        }
        if (typeInfoCase_ == 7) {
          output.writeMessage(7, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) typeInfo_);
        }
        if (typeInfoCase_ == 8) {
          output.writeMessage(8, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) typeInfo_);
        }
        if (typeInfoCase_ == 9) {
          output.writeMessage(9, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) typeInfo_);
        }
        if (typeInfoCase_ == 10) {
          output.writeMessage(10, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) typeInfo_);
        }
        if (typeInfoCase_ == 11) {
          output.writeMessage(11, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) typeInfo_);
        }
        if (typeInfoCase_ == 12) {
          output.writeMessage(12, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) typeInfo_);
        }
        if (typeInfoCase_ == 13) {
          output.writeMessage(13, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) typeInfo_);
        }
        if (typeInfoCase_ == 14) {
          output.writeMessage(14, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) typeInfo_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (typeName_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName.ROW.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, typeName_);
        }
        if (nullable_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(2, nullable_);
        }
        if (typeInfoCase_ == 3) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) typeInfo_);
        }
        if (typeInfoCase_ == 4) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) typeInfo_);
        }
        if (typeInfoCase_ == 5) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) typeInfo_);
        }
        if (typeInfoCase_ == 6) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) typeInfo_);
        }
        if (typeInfoCase_ == 7) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(7, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) typeInfo_);
        }
        if (typeInfoCase_ == 8) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(8, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) typeInfo_);
        }
        if (typeInfoCase_ == 9) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(9, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) typeInfo_);
        }
        if (typeInfoCase_ == 10) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) typeInfo_);
        }
        if (typeInfoCase_ == 11) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(11, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) typeInfo_);
        }
        if (typeInfoCase_ == 12) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(12, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) typeInfo_);
        }
        if (typeInfoCase_ == 13) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(13, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) typeInfo_);
        }
        if (typeInfoCase_ == 14) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(14, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) typeInfo_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) obj;

        if (typeName_ != other.typeName_) return false;
        if (getNullable()
            != other.getNullable()) return false;
        if (!getTypeInfoCase().equals(other.getTypeInfoCase())) return false;
        switch (typeInfoCase_) {
          case 3:
            if (!getCollectionElementType()
                .equals(other.getCollectionElementType())) return false;
            break;
          case 4:
            if (!getMapInfo()
                .equals(other.getMapInfo())) return false;
            break;
          case 5:
            if (!getRowSchema()
                .equals(other.getRowSchema())) return false;
            break;
          case 6:
            if (!getDecimalInfo()
                .equals(other.getDecimalInfo())) return false;
            break;
          case 7:
            if (!getTimeInfo()
                .equals(other.getTimeInfo())) return false;
            break;
          case 8:
            if (!getTimestampInfo()
                .equals(other.getTimestampInfo())) return false;
            break;
          case 9:
            if (!getLocalZonedTimestampInfo()
                .equals(other.getLocalZonedTimestampInfo())) return false;
            break;
          case 10:
            if (!getZonedTimestampInfo()
                .equals(other.getZonedTimestampInfo())) return false;
            break;
          case 11:
            if (!getBinaryInfo()
                .equals(other.getBinaryInfo())) return false;
            break;
          case 12:
            if (!getVarBinaryInfo()
                .equals(other.getVarBinaryInfo())) return false;
            break;
          case 13:
            if (!getCharInfo()
                .equals(other.getCharInfo())) return false;
            break;
          case 14:
            if (!getVarCharInfo()
                .equals(other.getVarCharInfo())) return false;
            break;
          case 0:
          default:
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + TYPE_NAME_FIELD_NUMBER;
        hash = (53 * hash) + typeName_;
        hash = (37 * hash) + NULLABLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getNullable());
        switch (typeInfoCase_) {
          case 3:
            hash = (37 * hash) + COLLECTION_ELEMENT_TYPE_FIELD_NUMBER;
            hash = (53 * hash) + getCollectionElementType().hashCode();
            break;
          case 4:
            hash = (37 * hash) + MAP_INFO_FIELD_NUMBER;
            hash = (53 * hash) + getMapInfo().hashCode();
            break;
          case 5:
            hash = (37 * hash) + ROW_SCHEMA_FIELD_NUMBER;
            hash = (53 * hash) + getRowSchema().hashCode();
            break;
          case 6:
            hash = (37 * hash) + DECIMAL_INFO_FIELD_NUMBER;
            hash = (53 * hash) + getDecimalInfo().hashCode();
            break;
          case 7:
            hash = (37 * hash) + TIME_INFO_FIELD_NUMBER;
            hash = (53 * hash) + getTimeInfo().hashCode();
            break;
          case 8:
            hash = (37 * hash) + TIMESTAMP_INFO_FIELD_NUMBER;
            hash = (53 * hash) + getTimestampInfo().hashCode();
            break;
          case 9:
            hash = (37 * hash) + LOCAL_ZONED_TIMESTAMP_INFO_FIELD_NUMBER;
            hash = (53 * hash) + getLocalZonedTimestampInfo().hashCode();
            break;
          case 10:
            hash = (37 * hash) + ZONED_TIMESTAMP_INFO_FIELD_NUMBER;
            hash = (53 * hash) + getZonedTimestampInfo().hashCode();
            break;
          case 11:
            hash = (37 * hash) + BINARY_INFO_FIELD_NUMBER;
            hash = (53 * hash) + getBinaryInfo().hashCode();
            break;
          case 12:
            hash = (37 * hash) + VAR_BINARY_INFO_FIELD_NUMBER;
            hash = (53 * hash) + getVarBinaryInfo().hashCode();
            break;
          case 13:
            hash = (37 * hash) + CHAR_INFO_FIELD_NUMBER;
            hash = (53 * hash) + getCharInfo().hashCode();
            break;
          case 14:
            hash = (37 * hash) + VAR_CHAR_INFO_FIELD_NUMBER;
            hash = (53 * hash) + getVarCharInfo().hashCode();
            break;
          case 0:
          default:
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.FieldType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.FieldType)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_FieldType_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_FieldType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          typeName_ = 0;

          nullable_ = false;

          typeInfoCase_ = 0;
          typeInfo_ = null;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_FieldType_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType(this);
          result.typeName_ = typeName_;
          result.nullable_ = nullable_;
          if (typeInfoCase_ == 3) {
            if (collectionElementTypeBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = collectionElementTypeBuilder_.build();
            }
          }
          if (typeInfoCase_ == 4) {
            if (mapInfoBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = mapInfoBuilder_.build();
            }
          }
          if (typeInfoCase_ == 5) {
            if (rowSchemaBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = rowSchemaBuilder_.build();
            }
          }
          if (typeInfoCase_ == 6) {
            if (decimalInfoBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = decimalInfoBuilder_.build();
            }
          }
          if (typeInfoCase_ == 7) {
            if (timeInfoBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = timeInfoBuilder_.build();
            }
          }
          if (typeInfoCase_ == 8) {
            if (timestampInfoBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = timestampInfoBuilder_.build();
            }
          }
          if (typeInfoCase_ == 9) {
            if (localZonedTimestampInfoBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = localZonedTimestampInfoBuilder_.build();
            }
          }
          if (typeInfoCase_ == 10) {
            if (zonedTimestampInfoBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = zonedTimestampInfoBuilder_.build();
            }
          }
          if (typeInfoCase_ == 11) {
            if (binaryInfoBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = binaryInfoBuilder_.build();
            }
          }
          if (typeInfoCase_ == 12) {
            if (varBinaryInfoBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = varBinaryInfoBuilder_.build();
            }
          }
          if (typeInfoCase_ == 13) {
            if (charInfoBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = charInfoBuilder_.build();
            }
          }
          if (typeInfoCase_ == 14) {
            if (varCharInfoBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = varCharInfoBuilder_.build();
            }
          }
          result.typeInfoCase_ = typeInfoCase_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance()) return this;
          if (other.typeName_ != 0) {
            setTypeNameValue(other.getTypeNameValue());
          }
          if (other.getNullable() != false) {
            setNullable(other.getNullable());
          }
          switch (other.getTypeInfoCase()) {
            case COLLECTION_ELEMENT_TYPE: {
              mergeCollectionElementType(other.getCollectionElementType());
              break;
            }
            case MAP_INFO: {
              mergeMapInfo(other.getMapInfo());
              break;
            }
            case ROW_SCHEMA: {
              mergeRowSchema(other.getRowSchema());
              break;
            }
            case DECIMAL_INFO: {
              mergeDecimalInfo(other.getDecimalInfo());
              break;
            }
            case TIME_INFO: {
              mergeTimeInfo(other.getTimeInfo());
              break;
            }
            case TIMESTAMP_INFO: {
              mergeTimestampInfo(other.getTimestampInfo());
              break;
            }
            case LOCAL_ZONED_TIMESTAMP_INFO: {
              mergeLocalZonedTimestampInfo(other.getLocalZonedTimestampInfo());
              break;
            }
            case ZONED_TIMESTAMP_INFO: {
              mergeZonedTimestampInfo(other.getZonedTimestampInfo());
              break;
            }
            case BINARY_INFO: {
              mergeBinaryInfo(other.getBinaryInfo());
              break;
            }
            case VAR_BINARY_INFO: {
              mergeVarBinaryInfo(other.getVarBinaryInfo());
              break;
            }
            case CHAR_INFO: {
              mergeCharInfo(other.getCharInfo());
              break;
            }
            case VAR_CHAR_INFO: {
              mergeVarCharInfo(other.getVarCharInfo());
              break;
            }
            case TYPEINFO_NOT_SET: {
              break;
            }
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int typeInfoCase_ = 0;
        private java.lang.Object typeInfo_;
        public TypeInfoCase
            getTypeInfoCase() {
          return TypeInfoCase.forNumber(
              typeInfoCase_);
        }

        public Builder clearTypeInfo() {
          typeInfoCase_ = 0;
          typeInfo_ = null;
          onChanged();
          return this;
        }


        private int typeName_ = 0;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TypeName type_name = 1;</code>
         * @return The enum numeric value on the wire for typeName.
         */
        public int getTypeNameValue() {
          return typeName_;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TypeName type_name = 1;</code>
         * @param value The enum numeric value on the wire for typeName to set.
         * @return This builder for chaining.
         */
        public Builder setTypeNameValue(int value) {
          typeName_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TypeName type_name = 1;</code>
         * @return The typeName.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName getTypeName() {
          @SuppressWarnings("deprecation")
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName result = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName.valueOf(typeName_);
          return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName.UNRECOGNIZED : result;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TypeName type_name = 1;</code>
         * @param value The typeName to set.
         * @return This builder for chaining.
         */
        public Builder setTypeName(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          typeName_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TypeName type_name = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearTypeName() {
          
          typeName_ = 0;
          onChanged();
          return this;
        }

        private boolean nullable_ ;
        /**
         * <code>bool nullable = 2;</code>
         * @return The nullable.
         */
        public boolean getNullable() {
          return nullable_;
        }
        /**
         * <code>bool nullable = 2;</code>
         * @param value The nullable to set.
         * @return This builder for chaining.
         */
        public Builder setNullable(boolean value) {
          
          nullable_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>bool nullable = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearNullable() {
          
          nullable_ = false;
          onChanged();
          return this;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> collectionElementTypeBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
         * @return Whether the collectionElementType field is set.
         */
        public boolean hasCollectionElementType() {
          return typeInfoCase_ == 3;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
         * @return The collectionElementType.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getCollectionElementType() {
          if (collectionElementTypeBuilder_ == null) {
            if (typeInfoCase_ == 3) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 3) {
              return collectionElementTypeBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
         */
        public Builder setCollectionElementType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
          if (collectionElementTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            collectionElementTypeBuilder_.setMessage(value);
          }
          typeInfoCase_ = 3;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
         */
        public Builder setCollectionElementType(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder builderForValue) {
          if (collectionElementTypeBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            collectionElementTypeBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 3;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
         */
        public Builder mergeCollectionElementType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
          if (collectionElementTypeBuilder_ == null) {
            if (typeInfoCase_ == 3 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 3) {
              collectionElementTypeBuilder_.mergeFrom(value);
            }
            collectionElementTypeBuilder_.setMessage(value);
          }
          typeInfoCase_ = 3;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
         */
        public Builder clearCollectionElementType() {
          if (collectionElementTypeBuilder_ == null) {
            if (typeInfoCase_ == 3) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 3) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            collectionElementTypeBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder getCollectionElementTypeBuilder() {
          return getCollectionElementTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getCollectionElementTypeOrBuilder() {
          if ((typeInfoCase_ == 3) && (collectionElementTypeBuilder_ != null)) {
            return collectionElementTypeBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 3) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> 
            getCollectionElementTypeFieldBuilder() {
          if (collectionElementTypeBuilder_ == null) {
            if (!(typeInfoCase_ == 3)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance();
            }
            collectionElementTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 3;
          onChanged();;
          return collectionElementTypeBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfoOrBuilder> mapInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
         * @return Whether the mapInfo field is set.
         */
        public boolean hasMapInfo() {
          return typeInfoCase_ == 4;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
         * @return The mapInfo.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo getMapInfo() {
          if (mapInfoBuilder_ == null) {
            if (typeInfoCase_ == 4) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 4) {
              return mapInfoBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
         */
        public Builder setMapInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo value) {
          if (mapInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            mapInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 4;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
         */
        public Builder setMapInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.Builder builderForValue) {
          if (mapInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            mapInfoBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 4;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
         */
        public Builder mergeMapInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo value) {
          if (mapInfoBuilder_ == null) {
            if (typeInfoCase_ == 4 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 4) {
              mapInfoBuilder_.mergeFrom(value);
            }
            mapInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 4;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
         */
        public Builder clearMapInfo() {
          if (mapInfoBuilder_ == null) {
            if (typeInfoCase_ == 4) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 4) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            mapInfoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.Builder getMapInfoBuilder() {
          return getMapInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfoOrBuilder getMapInfoOrBuilder() {
          if ((typeInfoCase_ == 4) && (mapInfoBuilder_ != null)) {
            return mapInfoBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 4) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfoOrBuilder> 
            getMapInfoFieldBuilder() {
          if (mapInfoBuilder_ == null) {
            if (!(typeInfoCase_ == 4)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.getDefaultInstance();
            }
            mapInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfoOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 4;
          onChanged();;
          return mapInfoBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder> rowSchemaBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
         * @return Whether the rowSchema field is set.
         */
        public boolean hasRowSchema() {
          return typeInfoCase_ == 5;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
         * @return The rowSchema.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getRowSchema() {
          if (rowSchemaBuilder_ == null) {
            if (typeInfoCase_ == 5) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 5) {
              return rowSchemaBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
         */
        public Builder setRowSchema(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema value) {
          if (rowSchemaBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            rowSchemaBuilder_.setMessage(value);
          }
          typeInfoCase_ = 5;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
         */
        public Builder setRowSchema(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder builderForValue) {
          if (rowSchemaBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            rowSchemaBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 5;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
         */
        public Builder mergeRowSchema(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema value) {
          if (rowSchemaBuilder_ == null) {
            if (typeInfoCase_ == 5 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 5) {
              rowSchemaBuilder_.mergeFrom(value);
            }
            rowSchemaBuilder_.setMessage(value);
          }
          typeInfoCase_ = 5;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
         */
        public Builder clearRowSchema() {
          if (rowSchemaBuilder_ == null) {
            if (typeInfoCase_ == 5) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 5) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            rowSchemaBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder getRowSchemaBuilder() {
          return getRowSchemaFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder getRowSchemaOrBuilder() {
          if ((typeInfoCase_ == 5) && (rowSchemaBuilder_ != null)) {
            return rowSchemaBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 5) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder> 
            getRowSchemaFieldBuilder() {
          if (rowSchemaBuilder_ == null) {
            if (!(typeInfoCase_ == 5)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance();
            }
            rowSchemaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 5;
          onChanged();;
          return rowSchemaBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfoOrBuilder> decimalInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
         * @return Whether the decimalInfo field is set.
         */
        public boolean hasDecimalInfo() {
          return typeInfoCase_ == 6;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
         * @return The decimalInfo.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo getDecimalInfo() {
          if (decimalInfoBuilder_ == null) {
            if (typeInfoCase_ == 6) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 6) {
              return decimalInfoBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
         */
        public Builder setDecimalInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo value) {
          if (decimalInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            decimalInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 6;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
         */
        public Builder setDecimalInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.Builder builderForValue) {
          if (decimalInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            decimalInfoBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 6;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
         */
        public Builder mergeDecimalInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo value) {
          if (decimalInfoBuilder_ == null) {
            if (typeInfoCase_ == 6 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 6) {
              decimalInfoBuilder_.mergeFrom(value);
            }
            decimalInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 6;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
         */
        public Builder clearDecimalInfo() {
          if (decimalInfoBuilder_ == null) {
            if (typeInfoCase_ == 6) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 6) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            decimalInfoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.Builder getDecimalInfoBuilder() {
          return getDecimalInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfoOrBuilder getDecimalInfoOrBuilder() {
          if ((typeInfoCase_ == 6) && (decimalInfoBuilder_ != null)) {
            return decimalInfoBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 6) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfoOrBuilder> 
            getDecimalInfoFieldBuilder() {
          if (decimalInfoBuilder_ == null) {
            if (!(typeInfoCase_ == 6)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.getDefaultInstance();
            }
            decimalInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfoOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 6;
          onChanged();;
          return decimalInfoBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfoOrBuilder> timeInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
         * @return Whether the timeInfo field is set.
         */
        public boolean hasTimeInfo() {
          return typeInfoCase_ == 7;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
         * @return The timeInfo.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo getTimeInfo() {
          if (timeInfoBuilder_ == null) {
            if (typeInfoCase_ == 7) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 7) {
              return timeInfoBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
         */
        public Builder setTimeInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo value) {
          if (timeInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            timeInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 7;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
         */
        public Builder setTimeInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.Builder builderForValue) {
          if (timeInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            timeInfoBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 7;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
         */
        public Builder mergeTimeInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo value) {
          if (timeInfoBuilder_ == null) {
            if (typeInfoCase_ == 7 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 7) {
              timeInfoBuilder_.mergeFrom(value);
            }
            timeInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 7;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
         */
        public Builder clearTimeInfo() {
          if (timeInfoBuilder_ == null) {
            if (typeInfoCase_ == 7) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 7) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            timeInfoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.Builder getTimeInfoBuilder() {
          return getTimeInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfoOrBuilder getTimeInfoOrBuilder() {
          if ((typeInfoCase_ == 7) && (timeInfoBuilder_ != null)) {
            return timeInfoBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 7) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfoOrBuilder> 
            getTimeInfoFieldBuilder() {
          if (timeInfoBuilder_ == null) {
            if (!(typeInfoCase_ == 7)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.getDefaultInstance();
            }
            timeInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfoOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 7;
          onChanged();;
          return timeInfoBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfoOrBuilder> timestampInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
         * @return Whether the timestampInfo field is set.
         */
        public boolean hasTimestampInfo() {
          return typeInfoCase_ == 8;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
         * @return The timestampInfo.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo getTimestampInfo() {
          if (timestampInfoBuilder_ == null) {
            if (typeInfoCase_ == 8) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 8) {
              return timestampInfoBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
         */
        public Builder setTimestampInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo value) {
          if (timestampInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            timestampInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 8;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
         */
        public Builder setTimestampInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.Builder builderForValue) {
          if (timestampInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            timestampInfoBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 8;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
         */
        public Builder mergeTimestampInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo value) {
          if (timestampInfoBuilder_ == null) {
            if (typeInfoCase_ == 8 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 8) {
              timestampInfoBuilder_.mergeFrom(value);
            }
            timestampInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 8;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
         */
        public Builder clearTimestampInfo() {
          if (timestampInfoBuilder_ == null) {
            if (typeInfoCase_ == 8) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 8) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            timestampInfoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.Builder getTimestampInfoBuilder() {
          return getTimestampInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfoOrBuilder getTimestampInfoOrBuilder() {
          if ((typeInfoCase_ == 8) && (timestampInfoBuilder_ != null)) {
            return timestampInfoBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 8) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfoOrBuilder> 
            getTimestampInfoFieldBuilder() {
          if (timestampInfoBuilder_ == null) {
            if (!(typeInfoCase_ == 8)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.getDefaultInstance();
            }
            timestampInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfoOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 8;
          onChanged();;
          return timestampInfoBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfoOrBuilder> localZonedTimestampInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
         * @return Whether the localZonedTimestampInfo field is set.
         */
        public boolean hasLocalZonedTimestampInfo() {
          return typeInfoCase_ == 9;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
         * @return The localZonedTimestampInfo.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo getLocalZonedTimestampInfo() {
          if (localZonedTimestampInfoBuilder_ == null) {
            if (typeInfoCase_ == 9) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 9) {
              return localZonedTimestampInfoBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
         */
        public Builder setLocalZonedTimestampInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo value) {
          if (localZonedTimestampInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            localZonedTimestampInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 9;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
         */
        public Builder setLocalZonedTimestampInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.Builder builderForValue) {
          if (localZonedTimestampInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            localZonedTimestampInfoBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 9;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
         */
        public Builder mergeLocalZonedTimestampInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo value) {
          if (localZonedTimestampInfoBuilder_ == null) {
            if (typeInfoCase_ == 9 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 9) {
              localZonedTimestampInfoBuilder_.mergeFrom(value);
            }
            localZonedTimestampInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 9;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
         */
        public Builder clearLocalZonedTimestampInfo() {
          if (localZonedTimestampInfoBuilder_ == null) {
            if (typeInfoCase_ == 9) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 9) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            localZonedTimestampInfoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.Builder getLocalZonedTimestampInfoBuilder() {
          return getLocalZonedTimestampInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfoOrBuilder getLocalZonedTimestampInfoOrBuilder() {
          if ((typeInfoCase_ == 9) && (localZonedTimestampInfoBuilder_ != null)) {
            return localZonedTimestampInfoBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 9) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfoOrBuilder> 
            getLocalZonedTimestampInfoFieldBuilder() {
          if (localZonedTimestampInfoBuilder_ == null) {
            if (!(typeInfoCase_ == 9)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.getDefaultInstance();
            }
            localZonedTimestampInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfoOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 9;
          onChanged();;
          return localZonedTimestampInfoBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfoOrBuilder> zonedTimestampInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
         * @return Whether the zonedTimestampInfo field is set.
         */
        public boolean hasZonedTimestampInfo() {
          return typeInfoCase_ == 10;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
         * @return The zonedTimestampInfo.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo getZonedTimestampInfo() {
          if (zonedTimestampInfoBuilder_ == null) {
            if (typeInfoCase_ == 10) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 10) {
              return zonedTimestampInfoBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
         */
        public Builder setZonedTimestampInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo value) {
          if (zonedTimestampInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            zonedTimestampInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 10;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
         */
        public Builder setZonedTimestampInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.Builder builderForValue) {
          if (zonedTimestampInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            zonedTimestampInfoBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 10;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
         */
        public Builder mergeZonedTimestampInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo value) {
          if (zonedTimestampInfoBuilder_ == null) {
            if (typeInfoCase_ == 10 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 10) {
              zonedTimestampInfoBuilder_.mergeFrom(value);
            }
            zonedTimestampInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 10;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
         */
        public Builder clearZonedTimestampInfo() {
          if (zonedTimestampInfoBuilder_ == null) {
            if (typeInfoCase_ == 10) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 10) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            zonedTimestampInfoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.Builder getZonedTimestampInfoBuilder() {
          return getZonedTimestampInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfoOrBuilder getZonedTimestampInfoOrBuilder() {
          if ((typeInfoCase_ == 10) && (zonedTimestampInfoBuilder_ != null)) {
            return zonedTimestampInfoBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 10) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfoOrBuilder> 
            getZonedTimestampInfoFieldBuilder() {
          if (zonedTimestampInfoBuilder_ == null) {
            if (!(typeInfoCase_ == 10)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.getDefaultInstance();
            }
            zonedTimestampInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfoOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 10;
          onChanged();;
          return zonedTimestampInfoBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfoOrBuilder> binaryInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
         * @return Whether the binaryInfo field is set.
         */
        public boolean hasBinaryInfo() {
          return typeInfoCase_ == 11;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
         * @return The binaryInfo.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo getBinaryInfo() {
          if (binaryInfoBuilder_ == null) {
            if (typeInfoCase_ == 11) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 11) {
              return binaryInfoBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
         */
        public Builder setBinaryInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo value) {
          if (binaryInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            binaryInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 11;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
         */
        public Builder setBinaryInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.Builder builderForValue) {
          if (binaryInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            binaryInfoBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 11;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
         */
        public Builder mergeBinaryInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo value) {
          if (binaryInfoBuilder_ == null) {
            if (typeInfoCase_ == 11 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 11) {
              binaryInfoBuilder_.mergeFrom(value);
            }
            binaryInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 11;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
         */
        public Builder clearBinaryInfo() {
          if (binaryInfoBuilder_ == null) {
            if (typeInfoCase_ == 11) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 11) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            binaryInfoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.Builder getBinaryInfoBuilder() {
          return getBinaryInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfoOrBuilder getBinaryInfoOrBuilder() {
          if ((typeInfoCase_ == 11) && (binaryInfoBuilder_ != null)) {
            return binaryInfoBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 11) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfoOrBuilder> 
            getBinaryInfoFieldBuilder() {
          if (binaryInfoBuilder_ == null) {
            if (!(typeInfoCase_ == 11)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.getDefaultInstance();
            }
            binaryInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfoOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 11;
          onChanged();;
          return binaryInfoBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfoOrBuilder> varBinaryInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
         * @return Whether the varBinaryInfo field is set.
         */
        public boolean hasVarBinaryInfo() {
          return typeInfoCase_ == 12;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
         * @return The varBinaryInfo.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo getVarBinaryInfo() {
          if (varBinaryInfoBuilder_ == null) {
            if (typeInfoCase_ == 12) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 12) {
              return varBinaryInfoBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
         */
        public Builder setVarBinaryInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo value) {
          if (varBinaryInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            varBinaryInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 12;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
         */
        public Builder setVarBinaryInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.Builder builderForValue) {
          if (varBinaryInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            varBinaryInfoBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 12;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
         */
        public Builder mergeVarBinaryInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo value) {
          if (varBinaryInfoBuilder_ == null) {
            if (typeInfoCase_ == 12 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 12) {
              varBinaryInfoBuilder_.mergeFrom(value);
            }
            varBinaryInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 12;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
         */
        public Builder clearVarBinaryInfo() {
          if (varBinaryInfoBuilder_ == null) {
            if (typeInfoCase_ == 12) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 12) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            varBinaryInfoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.Builder getVarBinaryInfoBuilder() {
          return getVarBinaryInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfoOrBuilder getVarBinaryInfoOrBuilder() {
          if ((typeInfoCase_ == 12) && (varBinaryInfoBuilder_ != null)) {
            return varBinaryInfoBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 12) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfoOrBuilder> 
            getVarBinaryInfoFieldBuilder() {
          if (varBinaryInfoBuilder_ == null) {
            if (!(typeInfoCase_ == 12)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.getDefaultInstance();
            }
            varBinaryInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfoOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 12;
          onChanged();;
          return varBinaryInfoBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfoOrBuilder> charInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
         * @return Whether the charInfo field is set.
         */
        public boolean hasCharInfo() {
          return typeInfoCase_ == 13;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
         * @return The charInfo.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo getCharInfo() {
          if (charInfoBuilder_ == null) {
            if (typeInfoCase_ == 13) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 13) {
              return charInfoBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
         */
        public Builder setCharInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo value) {
          if (charInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            charInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 13;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
         */
        public Builder setCharInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.Builder builderForValue) {
          if (charInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            charInfoBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 13;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
         */
        public Builder mergeCharInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo value) {
          if (charInfoBuilder_ == null) {
            if (typeInfoCase_ == 13 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 13) {
              charInfoBuilder_.mergeFrom(value);
            }
            charInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 13;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
         */
        public Builder clearCharInfo() {
          if (charInfoBuilder_ == null) {
            if (typeInfoCase_ == 13) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 13) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            charInfoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.Builder getCharInfoBuilder() {
          return getCharInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfoOrBuilder getCharInfoOrBuilder() {
          if ((typeInfoCase_ == 13) && (charInfoBuilder_ != null)) {
            return charInfoBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 13) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfoOrBuilder> 
            getCharInfoFieldBuilder() {
          if (charInfoBuilder_ == null) {
            if (!(typeInfoCase_ == 13)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.getDefaultInstance();
            }
            charInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfoOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 13;
          onChanged();;
          return charInfoBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfoOrBuilder> varCharInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
         * @return Whether the varCharInfo field is set.
         */
        public boolean hasVarCharInfo() {
          return typeInfoCase_ == 14;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
         * @return The varCharInfo.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo getVarCharInfo() {
          if (varCharInfoBuilder_ == null) {
            if (typeInfoCase_ == 14) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 14) {
              return varCharInfoBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
         */
        public Builder setVarCharInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo value) {
          if (varCharInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            varCharInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 14;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
         */
        public Builder setVarCharInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.Builder builderForValue) {
          if (varCharInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            varCharInfoBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 14;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
         */
        public Builder mergeVarCharInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo value) {
          if (varCharInfoBuilder_ == null) {
            if (typeInfoCase_ == 14 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 14) {
              varCharInfoBuilder_.mergeFrom(value);
            }
            varCharInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 14;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
         */
        public Builder clearVarCharInfo() {
          if (varCharInfoBuilder_ == null) {
            if (typeInfoCase_ == 14) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 14) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            varCharInfoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.Builder getVarCharInfoBuilder() {
          return getVarCharInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfoOrBuilder getVarCharInfoOrBuilder() {
          if ((typeInfoCase_ == 14) && (varCharInfoBuilder_ != null)) {
            return varCharInfoBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 14) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfoOrBuilder> 
            getVarCharInfoFieldBuilder() {
          if (varCharInfoBuilder_ == null) {
            if (!(typeInfoCase_ == 14)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.getDefaultInstance();
            }
            varCharInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfoOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 14;
          onChanged();;
          return varCharInfoBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.FieldType)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.FieldType)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<FieldType>
          PARSER = new com.google.protobuf.AbstractParser<FieldType>() {
        @java.lang.Override
        public FieldType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new FieldType(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<FieldType> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<FieldType> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface FieldOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.Field)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string name = 1;</code>
       * @return The name.
       */
      java.lang.String getName();
      /**
       * <code>string name = 1;</code>
       * @return The bytes for name.
       */
      com.google.protobuf.ByteString
          getNameBytes();

      /**
       * <code>string description = 2;</code>
       * @return The description.
       */
      java.lang.String getDescription();
      /**
       * <code>string description = 2;</code>
       * @return The bytes for description.
       */
      com.google.protobuf.ByteString
          getDescriptionBytes();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
       * @return Whether the type field is set.
       */
      boolean hasType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
       * @return The type.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getTypeOrBuilder();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.Field}
     */
    public  static final class Field extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.Field)
        FieldOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Field.newBuilder() to construct.
      private Field(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Field() {
        name_ = "";
        description_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Field();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Field(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                name_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                description_ = s;
                break;
              }
              case 26: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder subBuilder = null;
                if (type_ != null) {
                  subBuilder = type_.toBuilder();
                }
                type_ = input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(type_);
                  type_ = subBuilder.buildPartial();
                }

                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_Field_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_Field_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder.class);
      }

      public static final int NAME_FIELD_NUMBER = 1;
      private volatile java.lang.Object name_;
      /**
       * <code>string name = 1;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        }
      }
      /**
       * <code>string name = 1;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int DESCRIPTION_FIELD_NUMBER = 2;
      private volatile java.lang.Object description_;
      /**
       * <code>string description = 2;</code>
       * @return The description.
       */
      public java.lang.String getDescription() {
        java.lang.Object ref = description_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          description_ = s;
          return s;
        }
      }
      /**
       * <code>string description = 2;</code>
       * @return The bytes for description.
       */
      public com.google.protobuf.ByteString
          getDescriptionBytes() {
        java.lang.Object ref = description_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          description_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int TYPE_FIELD_NUMBER = 3;
      private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType type_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
       * @return Whether the type field is set.
       */
      public boolean hasType() {
        return type_ != null;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
       * @return The type.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getType() {
        return type_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : type_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getTypeOrBuilder() {
        return getType();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getNameBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
        }
        if (!getDescriptionBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, description_);
        }
        if (type_ != null) {
          output.writeMessage(3, getType());
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getNameBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
        }
        if (!getDescriptionBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, description_);
        }
        if (type_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getType());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field) obj;

        if (!getName()
            .equals(other.getName())) return false;
        if (!getDescription()
            .equals(other.getDescription())) return false;
        if (hasType() != other.hasType()) return false;
        if (hasType()) {
          if (!getType()
              .equals(other.getType())) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
        hash = (37 * hash) + DESCRIPTION_FIELD_NUMBER;
        hash = (53 * hash) + getDescription().hashCode();
        if (hasType()) {
          hash = (37 * hash) + TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getType().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.Field}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.Field)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_Field_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_Field_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          name_ = "";

          description_ = "";

          if (typeBuilder_ == null) {
            type_ = null;
          } else {
            type_ = null;
            typeBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_Field_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field(this);
          result.name_ = name_;
          result.description_ = description_;
          if (typeBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = typeBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.getDefaultInstance()) return this;
          if (!other.getName().isEmpty()) {
            name_ = other.name_;
            onChanged();
          }
          if (!other.getDescription().isEmpty()) {
            description_ = other.description_;
            onChanged();
          }
          if (other.hasType()) {
            mergeType(other.getType());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object name_ = "";
        /**
         * <code>string name = 1;</code>
         * @return The name.
         */
        public java.lang.String getName() {
          java.lang.Object ref = name_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            name_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string name = 1;</code>
         * @return The bytes for name.
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string name = 1;</code>
         * @param value The name to set.
         * @return This builder for chaining.
         */
        public Builder setName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          name_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string name = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearName() {
          
          name_ = getDefaultInstance().getName();
          onChanged();
          return this;
        }
        /**
         * <code>string name = 1;</code>
         * @param value The bytes for name to set.
         * @return This builder for chaining.
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          name_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object description_ = "";
        /**
         * <code>string description = 2;</code>
         * @return The description.
         */
        public java.lang.String getDescription() {
          java.lang.Object ref = description_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            description_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string description = 2;</code>
         * @return The bytes for description.
         */
        public com.google.protobuf.ByteString
            getDescriptionBytes() {
          java.lang.Object ref = description_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            description_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string description = 2;</code>
         * @param value The description to set.
         * @return This builder for chaining.
         */
        public Builder setDescription(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          description_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string description = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearDescription() {
          
          description_ = getDefaultInstance().getDescription();
          onChanged();
          return this;
        }
        /**
         * <code>string description = 2;</code>
         * @param value The bytes for description to set.
         * @return This builder for chaining.
         */
        public Builder setDescriptionBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          description_ = value;
          onChanged();
          return this;
        }

        private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType type_;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> typeBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
         * @return Whether the type field is set.
         */
        public boolean hasType() {
          return typeBuilder_ != null || type_ != null;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
         * @return The type.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getType() {
          if (typeBuilder_ == null) {
            return type_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : type_;
          } else {
            return typeBuilder_.getMessage();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
         */
        public Builder setType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
          if (typeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            type_ = value;
            onChanged();
          } else {
            typeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
         */
        public Builder setType(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder builderForValue) {
          if (typeBuilder_ == null) {
            type_ = builderForValue.build();
            onChanged();
          } else {
            typeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
         */
        public Builder mergeType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
          if (typeBuilder_ == null) {
            if (type_ != null) {
              type_ =
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.newBuilder(type_).mergeFrom(value).buildPartial();
            } else {
              type_ = value;
            }
            onChanged();
          } else {
            typeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
         */
        public Builder clearType() {
          if (typeBuilder_ == null) {
            type_ = null;
            onChanged();
          } else {
            type_ = null;
            typeBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder getTypeBuilder() {
          
          onChanged();
          return getTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getTypeOrBuilder() {
          if (typeBuilder_ != null) {
            return typeBuilder_.getMessageOrBuilder();
          } else {
            return type_ == null ?
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : type_;
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> 
            getTypeFieldBuilder() {
          if (typeBuilder_ == null) {
            typeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder>(
                    getType(),
                    getParentForChildren(),
                    isClean());
            type_ = null;
          }
          return typeBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.Field)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.Field)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Field>
          PARSER = new com.google.protobuf.AbstractParser<Field>() {
        @java.lang.Override
        public Field parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Field(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Field> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Field> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int FIELDS_FIELD_NUMBER = 1;
    private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field> fields_;
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
     */
    public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field> getFieldsList() {
      return fields_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
     */
    public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldOrBuilder> 
        getFieldsOrBuilderList() {
      return fields_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
     */
    public int getFieldsCount() {
      return fields_.size();
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field getFields(int index) {
      return fields_.get(index);
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldOrBuilder getFieldsOrBuilder(
        int index) {
      return fields_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < fields_.size(); i++) {
        output.writeMessage(1, fields_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < fields_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, fields_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema)) {
        return super.equals(obj);
      }
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) obj;

      if (!getFieldsList()
          .equals(other.getFieldsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getFieldsCount() > 0) {
        hash = (37 * hash) + FIELDS_FIELD_NUMBER;
        hash = (53 * hash) + getFieldsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A representation of the data schema.
     * </pre>
     *
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema)
        org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder.class);
      }

      // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFieldsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (fieldsBuilder_ == null) {
          fields_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          fieldsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getDefaultInstanceForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema build() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema buildPartial() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema(this);
        int from_bitField0_ = bitField0_;
        if (fieldsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            fields_ = java.util.Collections.unmodifiableList(fields_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.fields_ = fields_;
        } else {
          result.fields_ = fieldsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) {
          return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema other) {
        if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance()) return this;
        if (fieldsBuilder_ == null) {
          if (!other.fields_.isEmpty()) {
            if (fields_.isEmpty()) {
              fields_ = other.fields_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFieldsIsMutable();
              fields_.addAll(other.fields_);
            }
            onChanged();
          }
        } else {
          if (!other.fields_.isEmpty()) {
            if (fieldsBuilder_.isEmpty()) {
              fieldsBuilder_.dispose();
              fieldsBuilder_ = null;
              fields_ = other.fields_;
              bitField0_ = (bitField0_ & ~0x00000001);
              fieldsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getFieldsFieldBuilder() : null;
            } else {
              fieldsBuilder_.addAllMessages(other.fields_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field> fields_ =
        java.util.Collections.emptyList();
      private void ensureFieldsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          fields_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field>(fields_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldOrBuilder> fieldsBuilder_;

      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field> getFieldsList() {
        if (fieldsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(fields_);
        } else {
          return fieldsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public int getFieldsCount() {
        if (fieldsBuilder_ == null) {
          return fields_.size();
        } else {
          return fieldsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field getFields(int index) {
        if (fieldsBuilder_ == null) {
          return fields_.get(index);
        } else {
          return fieldsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public Builder setFields(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field value) {
        if (fieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldsIsMutable();
          fields_.set(index, value);
          onChanged();
        } else {
          fieldsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public Builder setFields(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder builderForValue) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.set(index, builderForValue.build());
          onChanged();
        } else {
          fieldsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public Builder addFields(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field value) {
        if (fieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldsIsMutable();
          fields_.add(value);
          onChanged();
        } else {
          fieldsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public Builder addFields(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field value) {
        if (fieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldsIsMutable();
          fields_.add(index, value);
          onChanged();
        } else {
          fieldsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public Builder addFields(
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder builderForValue) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.add(builderForValue.build());
          onChanged();
        } else {
          fieldsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public Builder addFields(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder builderForValue) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.add(index, builderForValue.build());
          onChanged();
        } else {
          fieldsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public Builder addAllFields(
          java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field> values) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, fields_);
          onChanged();
        } else {
          fieldsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public Builder clearFields() {
        if (fieldsBuilder_ == null) {
          fields_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          fieldsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public Builder removeFields(int index) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.remove(index);
          onChanged();
        } else {
          fieldsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder getFieldsBuilder(
          int index) {
        return getFieldsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldOrBuilder getFieldsOrBuilder(
          int index) {
        if (fieldsBuilder_ == null) {
          return fields_.get(index);  } else {
          return fieldsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldOrBuilder> 
           getFieldsOrBuilderList() {
        if (fieldsBuilder_ != null) {
          return fieldsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(fields_);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder addFieldsBuilder() {
        return getFieldsFieldBuilder().addBuilder(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder addFieldsBuilder(
          int index) {
        return getFieldsFieldBuilder().addBuilder(
            index, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder> 
           getFieldsBuilderList() {
        return getFieldsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldOrBuilder> 
          getFieldsFieldBuilder() {
        if (fieldsBuilder_ == null) {
          fieldsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldOrBuilder>(
                  fields_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          fields_ = null;
        }
        return fieldsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema)
    private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema();
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Schema>
        PARSER = new com.google.protobuf.AbstractParser<Schema>() {
      @java.lang.Override
      public Schema parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Schema(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Schema> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Schema> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TypeInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.TypeInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
     */
    java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field> 
        getFieldList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field getField(int index);
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
     */
    int getFieldCount();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
     */
    java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldOrBuilder> 
        getFieldOrBuilderList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldOrBuilder getFieldOrBuilder(
        int index);
  }
  /**
   * <pre>
   * A representation of the data type information in DataStream.
   * </pre>
   *
   * Protobuf type {@code org.apache.flink.fn_execution.v1.TypeInfo}
   */
  public  static final class TypeInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.TypeInfo)
      TypeInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TypeInfo.newBuilder() to construct.
    private TypeInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TypeInfo() {
      field_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TypeInfo();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TypeInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                field_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field>();
                mutable_bitField0_ |= 0x00000001;
              }
              field_.add(
                  input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          field_ = java.util.Collections.unmodifiableList(field_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder.class);
    }

    /**
     * Protobuf enum {@code org.apache.flink.fn_execution.v1.TypeInfo.TypeName}
     */
    public enum TypeName
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>ROW = 0;</code>
       */
      ROW(0),
      /**
       * <code>STRING = 1;</code>
       */
      STRING(1),
      /**
       * <code>BYTE = 2;</code>
       */
      BYTE(2),
      /**
       * <code>BOOLEAN = 3;</code>
       */
      BOOLEAN(3),
      /**
       * <code>SHORT = 4;</code>
       */
      SHORT(4),
      /**
       * <code>INT = 5;</code>
       */
      INT(5),
      /**
       * <code>LONG = 6;</code>
       */
      LONG(6),
      /**
       * <code>FLOAT = 7;</code>
       */
      FLOAT(7),
      /**
       * <code>DOUBLE = 8;</code>
       */
      DOUBLE(8),
      /**
       * <code>CHAR = 9;</code>
       */
      CHAR(9),
      /**
       * <code>BIG_INT = 10;</code>
       */
      BIG_INT(10),
      /**
       * <code>BIG_DEC = 11;</code>
       */
      BIG_DEC(11),
      /**
       * <code>SQL_DATE = 12;</code>
       */
      SQL_DATE(12),
      /**
       * <code>SQL_TIME = 13;</code>
       */
      SQL_TIME(13),
      /**
       * <code>SQL_TIMESTAMP = 14;</code>
       */
      SQL_TIMESTAMP(14),
      /**
       * <code>BASIC_ARRAY = 15;</code>
       */
      BASIC_ARRAY(15),
      /**
       * <code>PICKLED_BYTES = 16;</code>
       */
      PICKLED_BYTES(16),
      /**
       * <code>TUPLE = 17;</code>
       */
      TUPLE(17),
      /**
       * <code>PRIMITIVE_ARRAY = 18;</code>
       */
      PRIMITIVE_ARRAY(18),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>ROW = 0;</code>
       */
      public static final int ROW_VALUE = 0;
      /**
       * <code>STRING = 1;</code>
       */
      public static final int STRING_VALUE = 1;
      /**
       * <code>BYTE = 2;</code>
       */
      public static final int BYTE_VALUE = 2;
      /**
       * <code>BOOLEAN = 3;</code>
       */
      public static final int BOOLEAN_VALUE = 3;
      /**
       * <code>SHORT = 4;</code>
       */
      public static final int SHORT_VALUE = 4;
      /**
       * <code>INT = 5;</code>
       */
      public static final int INT_VALUE = 5;
      /**
       * <code>LONG = 6;</code>
       */
      public static final int LONG_VALUE = 6;
      /**
       * <code>FLOAT = 7;</code>
       */
      public static final int FLOAT_VALUE = 7;
      /**
       * <code>DOUBLE = 8;</code>
       */
      public static final int DOUBLE_VALUE = 8;
      /**
       * <code>CHAR = 9;</code>
       */
      public static final int CHAR_VALUE = 9;
      /**
       * <code>BIG_INT = 10;</code>
       */
      public static final int BIG_INT_VALUE = 10;
      /**
       * <code>BIG_DEC = 11;</code>
       */
      public static final int BIG_DEC_VALUE = 11;
      /**
       * <code>SQL_DATE = 12;</code>
       */
      public static final int SQL_DATE_VALUE = 12;
      /**
       * <code>SQL_TIME = 13;</code>
       */
      public static final int SQL_TIME_VALUE = 13;
      /**
       * <code>SQL_TIMESTAMP = 14;</code>
       */
      public static final int SQL_TIMESTAMP_VALUE = 14;
      /**
       * <code>BASIC_ARRAY = 15;</code>
       */
      public static final int BASIC_ARRAY_VALUE = 15;
      /**
       * <code>PICKLED_BYTES = 16;</code>
       */
      public static final int PICKLED_BYTES_VALUE = 16;
      /**
       * <code>TUPLE = 17;</code>
       */
      public static final int TUPLE_VALUE = 17;
      /**
       * <code>PRIMITIVE_ARRAY = 18;</code>
       */
      public static final int PRIMITIVE_ARRAY_VALUE = 18;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TypeName valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static TypeName forNumber(int value) {
        switch (value) {
          case 0: return ROW;
          case 1: return STRING;
          case 2: return BYTE;
          case 3: return BOOLEAN;
          case 4: return SHORT;
          case 5: return INT;
          case 6: return LONG;
          case 7: return FLOAT;
          case 8: return DOUBLE;
          case 9: return CHAR;
          case 10: return BIG_INT;
          case 11: return BIG_DEC;
          case 12: return SQL_DATE;
          case 13: return SQL_TIME;
          case 14: return SQL_TIMESTAMP;
          case 15: return BASIC_ARRAY;
          case 16: return PICKLED_BYTES;
          case 17: return TUPLE;
          case 18: return PRIMITIVE_ARRAY;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TypeName>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          TypeName> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TypeName>() {
              public TypeName findValueByNumber(int number) {
                return TypeName.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDescriptor().getEnumTypes().get(0);
      }

      private static final TypeName[] VALUES = values();

      public static TypeName valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private TypeName(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.apache.flink.fn_execution.v1.TypeInfo.TypeName)
    }

    public interface FieldTypeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.TypeInfo.FieldType)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TypeName type_name = 1;</code>
       * @return The enum numeric value on the wire for typeName.
       */
      int getTypeNameValue();
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TypeName type_name = 1;</code>
       * @return The typeName.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName getTypeName();

      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType collection_element_type = 2;</code>
       * @return Whether the collectionElementType field is set.
       */
      boolean hasCollectionElementType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType collection_element_type = 2;</code>
       * @return The collectionElementType.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType getCollectionElementType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType collection_element_type = 2;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldTypeOrBuilder getCollectionElementTypeOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo row_type_info = 3;</code>
       * @return Whether the rowTypeInfo field is set.
       */
      boolean hasRowTypeInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo row_type_info = 3;</code>
       * @return The rowTypeInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getRowTypeInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo row_type_info = 3;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getRowTypeInfoOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo tuple_type_info = 4;</code>
       * @return Whether the tupleTypeInfo field is set.
       */
      boolean hasTupleTypeInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo tuple_type_info = 4;</code>
       * @return The tupleTypeInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getTupleTypeInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo tuple_type_info = 4;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getTupleTypeInfoOrBuilder();

      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.TypeInfoCase getTypeInfoCase();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.TypeInfo.FieldType}
     */
    public  static final class FieldType extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.TypeInfo.FieldType)
        FieldTypeOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use FieldType.newBuilder() to construct.
      private FieldType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private FieldType() {
        typeName_ = 0;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new FieldType();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private FieldType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int rawValue = input.readEnum();

                typeName_ = rawValue;
                break;
              }
              case 18: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.Builder subBuilder = null;
                if (typeInfoCase_ == 2) {
                  subBuilder = ((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType) typeInfo_).toBuilder();
                }
                typeInfo_ =
                    input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType) typeInfo_);
                  typeInfo_ = subBuilder.buildPartial();
                }
                typeInfoCase_ = 2;
                break;
              }
              case 26: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder subBuilder = null;
                if (typeInfoCase_ == 3) {
                  subBuilder = ((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_).toBuilder();
                }
                typeInfo_ =
                    input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_);
                  typeInfo_ = subBuilder.buildPartial();
                }
                typeInfoCase_ = 3;
                break;
              }
              case 34: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder subBuilder = null;
                if (typeInfoCase_ == 4) {
                  subBuilder = ((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_).toBuilder();
                }
                typeInfo_ =
                    input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_);
                  typeInfo_ = subBuilder.buildPartial();
                }
                typeInfoCase_ = 4;
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_FieldType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_FieldType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.class, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.Builder.class);
      }

      private int typeInfoCase_ = 0;
      private java.lang.Object typeInfo_;
      public enum TypeInfoCase
          implements com.google.protobuf.Internal.EnumLite,
              com.google.protobuf.AbstractMessage.InternalOneOfEnum {
        COLLECTION_ELEMENT_TYPE(2),
        ROW_TYPE_INFO(3),
        TUPLE_TYPE_INFO(4),
        TYPEINFO_NOT_SET(0);
        private final int value;
        private TypeInfoCase(int value) {
          this.value = value;
        }
        /**
         * @param value The number of the enum to look for.
         * @return The enum associated with the given number.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static TypeInfoCase valueOf(int value) {
          return forNumber(value);
        }

        public static TypeInfoCase forNumber(int value) {
          switch (value) {
            case 2: return COLLECTION_ELEMENT_TYPE;
            case 3: return ROW_TYPE_INFO;
            case 4: return TUPLE_TYPE_INFO;
            case 0: return TYPEINFO_NOT_SET;
            default: return null;
          }
        }
        public int getNumber() {
          return this.value;
        }
      };

      public TypeInfoCase
      getTypeInfoCase() {
        return TypeInfoCase.forNumber(
            typeInfoCase_);
      }

      public static final int TYPE_NAME_FIELD_NUMBER = 1;
      private int typeName_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TypeName type_name = 1;</code>
       * @return The enum numeric value on the wire for typeName.
       */
      public int getTypeNameValue() {
        return typeName_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TypeName type_name = 1;</code>
       * @return The typeName.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName getTypeName() {
        @SuppressWarnings("deprecation")
        org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName result = org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName.valueOf(typeName_);
        return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName.UNRECOGNIZED : result;
      }

      public static final int COLLECTION_ELEMENT_TYPE_FIELD_NUMBER = 2;
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType collection_element_type = 2;</code>
       * @return Whether the collectionElementType field is set.
       */
      public boolean hasCollectionElementType() {
        return typeInfoCase_ == 2;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType collection_element_type = 2;</code>
       * @return The collectionElementType.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType getCollectionElementType() {
        if (typeInfoCase_ == 2) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType collection_element_type = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldTypeOrBuilder getCollectionElementTypeOrBuilder() {
        if (typeInfoCase_ == 2) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.getDefaultInstance();
      }

      public static final int ROW_TYPE_INFO_FIELD_NUMBER = 3;
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo row_type_info = 3;</code>
       * @return Whether the rowTypeInfo field is set.
       */
      public boolean hasRowTypeInfo() {
        return typeInfoCase_ == 3;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo row_type_info = 3;</code>
       * @return The rowTypeInfo.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getRowTypeInfo() {
        if (typeInfoCase_ == 3) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo row_type_info = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getRowTypeInfoOrBuilder() {
        if (typeInfoCase_ == 3) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance();
      }

      public static final int TUPLE_TYPE_INFO_FIELD_NUMBER = 4;
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo tuple_type_info = 4;</code>
       * @return Whether the tupleTypeInfo field is set.
       */
      public boolean hasTupleTypeInfo() {
        return typeInfoCase_ == 4;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo tuple_type_info = 4;</code>
       * @return The tupleTypeInfo.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getTupleTypeInfo() {
        if (typeInfoCase_ == 4) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo tuple_type_info = 4;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getTupleTypeInfoOrBuilder() {
        if (typeInfoCase_ == 4) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (typeName_ != org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName.ROW.getNumber()) {
          output.writeEnum(1, typeName_);
        }
        if (typeInfoCase_ == 2) {
          output.writeMessage(2, (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType) typeInfo_);
        }
        if (typeInfoCase_ == 3) {
          output.writeMessage(3, (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_);
        }
        if (typeInfoCase_ == 4) {
          output.writeMessage(4, (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (typeName_ != org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName.ROW.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, typeName_);
        }
        if (typeInfoCase_ == 2) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType) typeInfo_);
        }
        if (typeInfoCase_ == 3) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_);
        }
        if (typeInfoCase_ == 4) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType other = (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType) obj;

        if (typeName_ != other.typeName_) return false;
        if (!getTypeInfoCase().equals(other.getTypeInfoCase())) return false;
        switch (typeInfoCase_) {
          case 2:
            if (!getCollectionElementType()
                .equals(other.getCollectionElementType())) return false;
            break;
          case 3:
            if (!getRowTypeInfo()
                .equals(other.getRowTypeInfo())) return false;
            break;
          case 4:
            if (!getTupleTypeInfo()
                .equals(other.getTupleTypeInfo())) return false;
            break;
          case 0:
          default:
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + TYPE_NAME_FIELD_NUMBER;
        hash = (53 * hash) + typeName_;
        switch (typeInfoCase_) {
          case 2:
            hash = (37 * hash) + COLLECTION_ELEMENT_TYPE_FIELD_NUMBER;
            hash = (53 * hash) + getCollectionElementType().hashCode();
            break;
          case 3:
            hash = (37 * hash) + ROW_TYPE_INFO_FIELD_NUMBER;
            hash = (53 * hash) + getRowTypeInfo().hashCode();
            break;
          case 4:
            hash = (37 * hash) + TUPLE_TYPE_INFO_FIELD_NUMBER;
            hash = (53 * hash) + getTupleTypeInfo().hashCode();
            break;
          case 0:
          default:
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.TypeInfo.FieldType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.TypeInfo.FieldType)
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_FieldType_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_FieldType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.class, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          typeName_ = 0;

          typeInfoCase_ = 0;
          typeInfo_ = null;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_FieldType_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType result = new org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType(this);
          result.typeName_ = typeName_;
          if (typeInfoCase_ == 2) {
            if (collectionElementTypeBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = collectionElementTypeBuilder_.build();
            }
          }
          if (typeInfoCase_ == 3) {
            if (rowTypeInfoBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = rowTypeInfoBuilder_.build();
            }
          }
          if (typeInfoCase_ == 4) {
            if (tupleTypeInfoBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = tupleTypeInfoBuilder_.build();
            }
          }
          result.typeInfoCase_ = typeInfoCase_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.getDefaultInstance()) return this;
          if (other.typeName_ != 0) {
            setTypeNameValue(other.getTypeNameValue());
          }
          switch (other.getTypeInfoCase()) {
            case COLLECTION_ELEMENT_TYPE: {
              mergeCollectionElementType(other.getCollectionElementType());
              break;
            }
            case ROW_TYPE_INFO: {
              mergeRowTypeInfo(other.getRowTypeInfo());
              break;
            }
            case TUPLE_TYPE_INFO: {
              mergeTupleTypeInfo(other.getTupleTypeInfo());
              break;
            }
            case TYPEINFO_NOT_SET: {
              break;
            }
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int typeInfoCase_ = 0;
        private java.lang.Object typeInfo_;
        public TypeInfoCase
            getTypeInfoCase() {
          return TypeInfoCase.forNumber(
              typeInfoCase_);
        }

        public Builder clearTypeInfo() {
          typeInfoCase_ = 0;
          typeInfo_ = null;
          onChanged();
          return this;
        }


        private int typeName_ = 0;
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TypeName type_name = 1;</code>
         * @return The enum numeric value on the wire for typeName.
         */
        public int getTypeNameValue() {
          return typeName_;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TypeName type_name = 1;</code>
         * @param value The enum numeric value on the wire for typeName to set.
         * @return This builder for chaining.
         */
        public Builder setTypeNameValue(int value) {
          typeName_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TypeName type_name = 1;</code>
         * @return The typeName.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName getTypeName() {
          @SuppressWarnings("deprecation")
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName result = org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName.valueOf(typeName_);
          return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName.UNRECOGNIZED : result;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TypeName type_name = 1;</code>
         * @param value The typeName to set.
         * @return This builder for chaining.
         */
        public Builder setTypeName(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          typeName_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TypeName type_name = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearTypeName() {
          
          typeName_ = 0;
          onChanged();
          return this;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldTypeOrBuilder> collectionElementTypeBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType collection_element_type = 2;</code>
         * @return Whether the collectionElementType field is set.
         */
        public boolean hasCollectionElementType() {
          return typeInfoCase_ == 2;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType collection_element_type = 2;</code>
         * @return The collectionElementType.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType getCollectionElementType() {
          if (collectionElementTypeBuilder_ == null) {
            if (typeInfoCase_ == 2) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 2) {
              return collectionElementTypeBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType collection_element_type = 2;</code>
         */
        public Builder setCollectionElementType(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType value) {
          if (collectionElementTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            collectionElementTypeBuilder_.setMessage(value);
          }
          typeInfoCase_ = 2;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType collection_element_type = 2;</code>
         */
        public Builder setCollectionElementType(
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.Builder builderForValue) {
          if (collectionElementTypeBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            collectionElementTypeBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 2;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType collection_element_type = 2;</code>
         */
        public Builder mergeCollectionElementType(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType value) {
          if (collectionElementTypeBuilder_ == null) {
            if (typeInfoCase_ == 2 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 2) {
              collectionElementTypeBuilder_.mergeFrom(value);
            }
            collectionElementTypeBuilder_.setMessage(value);
          }
          typeInfoCase_ = 2;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType collection_element_type = 2;</code>
         */
        public Builder clearCollectionElementType() {
          if (collectionElementTypeBuilder_ == null) {
            if (typeInfoCase_ == 2) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 2) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            collectionElementTypeBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType collection_element_type = 2;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.Builder getCollectionElementTypeBuilder() {
          return getCollectionElementTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType collection_element_type = 2;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldTypeOrBuilder getCollectionElementTypeOrBuilder() {
          if ((typeInfoCase_ == 2) && (collectionElementTypeBuilder_ != null)) {
            return collectionElementTypeBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 2) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType collection_element_type = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldTypeOrBuilder> 
            getCollectionElementTypeFieldBuilder() {
          if (collectionElementTypeBuilder_ == null) {
            if (!(typeInfoCase_ == 2)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.getDefaultInstance();
            }
            collectionElementTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldTypeOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 2;
          onChanged();;
          return collectionElementTypeBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> rowTypeInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo row_type_info = 3;</code>
         * @return Whether the rowTypeInfo field is set.
         */
        public boolean hasRowTypeInfo() {
          return typeInfoCase_ == 3;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo row_type_info = 3;</code>
         * @return The rowTypeInfo.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getRowTypeInfo() {
          if (rowTypeInfoBuilder_ == null) {
            if (typeInfoCase_ == 3) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 3) {
              return rowTypeInfoBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo row_type_info = 3;</code>
         */
        public Builder setRowTypeInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo value) {
          if (rowTypeInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            rowTypeInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 3;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo row_type_info = 3;</code>
         */
        public Builder setRowTypeInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder builderForValue) {
          if (rowTypeInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            rowTypeInfoBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 3;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo row_type_info = 3;</code>
         */
        public Builder mergeRowTypeInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo value) {
          if (rowTypeInfoBuilder_ == null) {
            if (typeInfoCase_ == 3 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 3) {
              rowTypeInfoBuilder_.mergeFrom(value);
            }
            rowTypeInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 3;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo row_type_info = 3;</code>
         */
        public Builder clearRowTypeInfo() {
          if (rowTypeInfoBuilder_ == null) {
            if (typeInfoCase_ == 3) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 3) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            rowTypeInfoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo row_type_info = 3;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder getRowTypeInfoBuilder() {
          return getRowTypeInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo row_type_info = 3;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getRowTypeInfoOrBuilder() {
          if ((typeInfoCase_ == 3) && (rowTypeInfoBuilder_ != null)) {
            return rowTypeInfoBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 3) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo row_type_info = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> 
            getRowTypeInfoFieldBuilder() {
          if (rowTypeInfoBuilder_ == null) {
            if (!(typeInfoCase_ == 3)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance();
            }
            rowTypeInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 3;
          onChanged();;
          return rowTypeInfoBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> tupleTypeInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo tuple_type_info = 4;</code>
         * @return Whether the tupleTypeInfo field is set.
         */
        public boolean hasTupleTypeInfo() {
          return typeInfoCase_ == 4;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo tuple_type_info = 4;</code>
         * @return The tupleTypeInfo.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getTupleTypeInfo() {
          if (tupleTypeInfoBuilder_ == null) {
            if (typeInfoCase_ == 4) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 4) {
              return tupleTypeInfoBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo tuple_type_info = 4;</code>
         */
        public Builder setTupleTypeInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo value) {
          if (tupleTypeInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            tupleTypeInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 4;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo tuple_type_info = 4;</code>
         */
        public Builder setTupleTypeInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder builderForValue) {
          if (tupleTypeInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            tupleTypeInfoBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 4;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo tuple_type_info = 4;</code>
         */
        public Builder mergeTupleTypeInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo value) {
          if (tupleTypeInfoBuilder_ == null) {
            if (typeInfoCase_ == 4 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 4) {
              tupleTypeInfoBuilder_.mergeFrom(value);
            }
            tupleTypeInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 4;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo tuple_type_info = 4;</code>
         */
        public Builder clearTupleTypeInfo() {
          if (tupleTypeInfoBuilder_ == null) {
            if (typeInfoCase_ == 4) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 4) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            tupleTypeInfoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo tuple_type_info = 4;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder getTupleTypeInfoBuilder() {
          return getTupleTypeInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo tuple_type_info = 4;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getTupleTypeInfoOrBuilder() {
          if ((typeInfoCase_ == 4) && (tupleTypeInfoBuilder_ != null)) {
            return tupleTypeInfoBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 4) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo tuple_type_info = 4;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> 
            getTupleTypeInfoFieldBuilder() {
          if (tupleTypeInfoBuilder_ == null) {
            if (!(typeInfoCase_ == 4)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance();
            }
            tupleTypeInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 4;
          onChanged();;
          return tupleTypeInfoBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.TypeInfo.FieldType)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.TypeInfo.FieldType)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<FieldType>
          PARSER = new com.google.protobuf.AbstractParser<FieldType>() {
        @java.lang.Override
        public FieldType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new FieldType(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<FieldType> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<FieldType> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface FieldOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.TypeInfo.Field)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string name = 1;</code>
       * @return The name.
       */
      java.lang.String getName();
      /**
       * <code>string name = 1;</code>
       * @return The bytes for name.
       */
      com.google.protobuf.ByteString
          getNameBytes();

      /**
       * <pre>
       *description is used in Table schema, no need in DataStream.
       * </pre>
       *
       * <code>string description = 2;</code>
       * @return The description.
       */
      java.lang.String getDescription();
      /**
       * <pre>
       *description is used in Table schema, no need in DataStream.
       * </pre>
       *
       * <code>string description = 2;</code>
       * @return The bytes for description.
       */
      com.google.protobuf.ByteString
          getDescriptionBytes();

      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType type = 3;</code>
       * @return Whether the type field is set.
       */
      boolean hasType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType type = 3;</code>
       * @return The type.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType getType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType type = 3;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldTypeOrBuilder getTypeOrBuilder();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.TypeInfo.Field}
     */
    public  static final class Field extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.TypeInfo.Field)
        FieldOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Field.newBuilder() to construct.
      private Field(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Field() {
        name_ = "";
        description_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Field();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Field(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                name_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                description_ = s;
                break;
              }
              case 26: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.Builder subBuilder = null;
                if (type_ != null) {
                  subBuilder = type_.toBuilder();
                }
                type_ = input.readMessage(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(type_);
                  type_ = subBuilder.buildPartial();
                }

                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_Field_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_Field_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field.class, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field.Builder.class);
      }

      public static final int NAME_FIELD_NUMBER = 1;
      private volatile java.lang.Object name_;
      /**
       * <code>string name = 1;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        }
      }
      /**
       * <code>string name = 1;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int DESCRIPTION_FIELD_NUMBER = 2;
      private volatile java.lang.Object description_;
      /**
       * <pre>
       *description is used in Table schema, no need in DataStream.
       * </pre>
       *
       * <code>string description = 2;</code>
       * @return The description.
       */
      public java.lang.String getDescription() {
        java.lang.Object ref = description_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          description_ = s;
          return s;
        }
      }
      /**
       * <pre>
       *description is used in Table schema, no need in DataStream.
       * </pre>
       *
       * <code>string description = 2;</code>
       * @return The bytes for description.
       */
      public com.google.protobuf.ByteString
          getDescriptionBytes() {
        java.lang.Object ref = description_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          description_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int TYPE_FIELD_NUMBER = 3;
      private org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType type_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType type = 3;</code>
       * @return Whether the type field is set.
       */
      public boolean hasType() {
        return type_ != null;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType type = 3;</code>
       * @return The type.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType getType() {
        return type_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.getDefaultInstance() : type_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType type = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldTypeOrBuilder getTypeOrBuilder() {
        return getType();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getNameBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
        }
        if (!getDescriptionBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, description_);
        }
        if (type_ != null) {
          output.writeMessage(3, getType());
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getNameBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
        }
        if (!getDescriptionBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, description_);
        }
        if (type_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getType());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field other = (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field) obj;

        if (!getName()
            .equals(other.getName())) return false;
        if (!getDescription()
            .equals(other.getDescription())) return false;
        if (hasType() != other.hasType()) return false;
        if (hasType()) {
          if (!getType()
              .equals(other.getType())) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
        hash = (37 * hash) + DESCRIPTION_FIELD_NUMBER;
        hash = (53 * hash) + getDescription().hashCode();
        if (hasType()) {
          hash = (37 * hash) + TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getType().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.TypeInfo.Field}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.TypeInfo.Field)
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_Field_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_Field_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field.class, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          name_ = "";

          description_ = "";

          if (typeBuilder_ == null) {
            type_ = null;
          } else {
            type_ = null;
            typeBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_Field_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field result = new org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field(this);
          result.name_ = name_;
          result.description_ = description_;
          if (typeBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = typeBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field.getDefaultInstance()) return this;
          if (!other.getName().isEmpty()) {
            name_ = other.name_;
            onChanged();
          }
          if (!other.getDescription().isEmpty()) {
            description_ = other.description_;
            onChanged();
          }
          if (other.hasType()) {
            mergeType(other.getType());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object name_ = "";
        /**
         * <code>string name = 1;</code>
         * @return The name.
         */
        public java.lang.String getName() {
          java.lang.Object ref = name_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            name_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string name = 1;</code>
         * @return The bytes for name.
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string name = 1;</code>
         * @param value The name to set.
         * @return This builder for chaining.
         */
        public Builder setName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          name_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string name = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearName() {
          
          name_ = getDefaultInstance().getName();
          onChanged();
          return this;
        }
        /**
         * <code>string name = 1;</code>
         * @param value The bytes for name to set.
         * @return This builder for chaining.
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          name_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object description_ = "";
        /**
         * <pre>
         *description is used in Table schema, no need in DataStream.
         * </pre>
         *
         * <code>string description = 2;</code>
         * @return The description.
         */
        public java.lang.String getDescription() {
          java.lang.Object ref = description_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            description_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         *description is used in Table schema, no need in DataStream.
         * </pre>
         *
         * <code>string description = 2;</code>
         * @return The bytes for description.
         */
        public com.google.protobuf.ByteString
            getDescriptionBytes() {
          java.lang.Object ref = description_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            description_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         *description is used in Table schema, no need in DataStream.
         * </pre>
         *
         * <code>string description = 2;</code>
         * @param value The description to set.
         * @return This builder for chaining.
         */
        public Builder setDescription(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          description_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *description is used in Table schema, no need in DataStream.
         * </pre>
         *
         * <code>string description = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearDescription() {
          
          description_ = getDefaultInstance().getDescription();
          onChanged();
          return this;
        }
        /**
         * <pre>
         *description is used in Table schema, no need in DataStream.
         * </pre>
         *
         * <code>string description = 2;</code>
         * @param value The bytes for description to set.
         * @return This builder for chaining.
         */
        public Builder setDescriptionBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          description_ = value;
          onChanged();
          return this;
        }

        private org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType type_;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldTypeOrBuilder> typeBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType type = 3;</code>
         * @return Whether the type field is set.
         */
        public boolean hasType() {
          return typeBuilder_ != null || type_ != null;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType type = 3;</code>
         * @return The type.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType getType() {
          if (typeBuilder_ == null) {
            return type_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.getDefaultInstance() : type_;
          } else {
            return typeBuilder_.getMessage();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType type = 3;</code>
         */
        public Builder setType(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType value) {
          if (typeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            type_ = value;
            onChanged();
          } else {
            typeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType type = 3;</code>
         */
        public Builder setType(
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.Builder builderForValue) {
          if (typeBuilder_ == null) {
            type_ = builderForValue.build();
            onChanged();
          } else {
            typeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType type = 3;</code>
         */
        public Builder mergeType(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType value) {
          if (typeBuilder_ == null) {
            if (type_ != null) {
              type_ =
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.newBuilder(type_).mergeFrom(value).buildPartial();
            } else {
              type_ = value;
            }
            onChanged();
          } else {
            typeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType type = 3;</code>
         */
        public Builder clearType() {
          if (typeBuilder_ == null) {
            type_ = null;
            onChanged();
          } else {
            type_ = null;
            typeBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType type = 3;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.Builder getTypeBuilder() {
          
          onChanged();
          return getTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType type = 3;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldTypeOrBuilder getTypeOrBuilder() {
          if (typeBuilder_ != null) {
            return typeBuilder_.getMessageOrBuilder();
          } else {
            return type_ == null ?
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.getDefaultInstance() : type_;
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo.FieldType type = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldTypeOrBuilder> 
            getTypeFieldBuilder() {
          if (typeBuilder_ == null) {
            typeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldTypeOrBuilder>(
                    getType(),
                    getParentForChildren(),
                    isClean());
            type_ = null;
          }
          return typeBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.TypeInfo.Field)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.TypeInfo.Field)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Field>
          PARSER = new com.google.protobuf.AbstractParser<Field>() {
        @java.lang.Override
        public Field parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Field(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Field> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Field> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int FIELD_FIELD_NUMBER = 1;
    private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field> field_;
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
     */
    public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field> getFieldList() {
      return field_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
     */
    public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldOrBuilder> 
        getFieldOrBuilderList() {
      return field_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
     */
    public int getFieldCount() {
      return field_.size();
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field getField(int index) {
      return field_.get(index);
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
     */
    public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldOrBuilder getFieldOrBuilder(
        int index) {
      return field_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < field_.size(); i++) {
        output.writeMessage(1, field_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < field_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, field_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo)) {
        return super.equals(obj);
      }
      org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) obj;

      if (!getFieldList()
          .equals(other.getFieldList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getFieldCount() > 0) {
        hash = (37 * hash) + FIELD_FIELD_NUMBER;
        hash = (53 * hash) + getFieldList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A representation of the data type information in DataStream.
     * </pre>
     *
     * Protobuf type {@code org.apache.flink.fn_execution.v1.TypeInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.TypeInfo)
        org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder.class);
      }

      // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFieldFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (fieldBuilder_ == null) {
          field_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          fieldBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getDefaultInstanceForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo build() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo buildPartial() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo(this);
        int from_bitField0_ = bitField0_;
        if (fieldBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            field_ = java.util.Collections.unmodifiableList(field_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.field_ = field_;
        } else {
          result.field_ = fieldBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) {
          return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo other) {
        if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance()) return this;
        if (fieldBuilder_ == null) {
          if (!other.field_.isEmpty()) {
            if (field_.isEmpty()) {
              field_ = other.field_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFieldIsMutable();
              field_.addAll(other.field_);
            }
            onChanged();
          }
        } else {
          if (!other.field_.isEmpty()) {
            if (fieldBuilder_.isEmpty()) {
              fieldBuilder_.dispose();
              fieldBuilder_ = null;
              field_ = other.field_;
              bitField0_ = (bitField0_ & ~0x00000001);
              fieldBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getFieldFieldBuilder() : null;
            } else {
              fieldBuilder_.addAllMessages(other.field_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field> field_ =
        java.util.Collections.emptyList();
      private void ensureFieldIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          field_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field>(field_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldOrBuilder> fieldBuilder_;

      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field> getFieldList() {
        if (fieldBuilder_ == null) {
          return java.util.Collections.unmodifiableList(field_);
        } else {
          return fieldBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
       */
      public int getFieldCount() {
        if (fieldBuilder_ == null) {
          return field_.size();
        } else {
          return fieldBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field getField(int index) {
        if (fieldBuilder_ == null) {
          return field_.get(index);
        } else {
          return fieldBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
       */
      public Builder setField(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field value) {
        if (fieldBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldIsMutable();
          field_.set(index, value);
          onChanged();
        } else {
          fieldBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
       */
      public Builder setField(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field.Builder builderForValue) {
        if (fieldBuilder_ == null) {
          ensureFieldIsMutable();
          field_.set(index, builderForValue.build());
          onChanged();
        } else {
          fieldBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
       */
      public Builder addField(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field value) {
        if (fieldBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldIsMutable();
          field_.add(value);
          onChanged();
        } else {
          fieldBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
       */
      public Builder addField(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field value) {
        if (fieldBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldIsMutable();
          field_.add(index, value);
          onChanged();
        } else {
          fieldBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
       */
      public Builder addField(
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field.Builder builderForValue) {
        if (fieldBuilder_ == null) {
          ensureFieldIsMutable();
          field_.add(builderForValue.build());
          onChanged();
        } else {
          fieldBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
       */
      public Builder addField(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field.Builder builderForValue) {
        if (fieldBuilder_ == null) {
          ensureFieldIsMutable();
          field_.add(index, builderForValue.build());
          onChanged();
        } else {
          fieldBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
       */
      public Builder addAllField(
          java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field> values) {
        if (fieldBuilder_ == null) {
          ensureFieldIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, field_);
          onChanged();
        } else {
          fieldBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
       */
      public Builder clearField() {
        if (fieldBuilder_ == null) {
          field_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          fieldBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
       */
      public Builder removeField(int index) {
        if (fieldBuilder_ == null) {
          ensureFieldIsMutable();
          field_.remove(index);
          onChanged();
        } else {
          fieldBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field.Builder getFieldBuilder(
          int index) {
        return getFieldFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldOrBuilder getFieldOrBuilder(
          int index) {
        if (fieldBuilder_ == null) {
          return field_.get(index);  } else {
          return fieldBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
       */
      public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldOrBuilder> 
           getFieldOrBuilderList() {
        if (fieldBuilder_ != null) {
          return fieldBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(field_);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field.Builder addFieldBuilder() {
        return getFieldFieldBuilder().addBuilder(
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field.Builder addFieldBuilder(
          int index) {
        return getFieldFieldBuilder().addBuilder(
            index, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.Field field = 1;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field.Builder> 
           getFieldBuilderList() {
        return getFieldFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldOrBuilder> 
          getFieldFieldBuilder() {
        if (fieldBuilder_ == null) {
          fieldBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Field.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.FieldOrBuilder>(
                  field_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          field_ = null;
        }
        return fieldBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.TypeInfo)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.TypeInfo)
    private static final org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo();
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TypeInfo>
        PARSER = new com.google.protobuf.AbstractParser<TypeInfo>() {
      @java.lang.Override
      public TypeInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TypeInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TypeInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TypeInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Input_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Input_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunction_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunction_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunctions_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunctions_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_OverWindow_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_OverWindow_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_JobParameter_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_JobParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_RuntimeContext_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_RuntimeContext_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_ListView_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_ListView_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_MapView_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_MapView_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunctions_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunctions_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_MapInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_MapInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_TimeInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_TimeInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_TimestampInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_TimestampInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_LocalZonedTimestampInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_LocalZonedTimestampInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_ZonedTimestampInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_ZonedTimestampInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_DecimalInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_DecimalInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_BinaryInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_BinaryInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_VarBinaryInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_VarBinaryInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_CharInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_CharInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_VarCharInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_VarCharInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_FieldType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_FieldType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_Field_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_Field_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_TypeInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_FieldType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_TypeInfo_FieldType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_Field_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_TypeInfo_Field_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\030flink-fn-execution.proto\022 org.apache.f" +
      "link.fn_execution.v1\"\206\001\n\005Input\022D\n\003udf\030\001 " +
      "\001(\01325.org.apache.flink.fn_execution.v1.U" +
      "serDefinedFunctionH\000\022\025\n\013inputOffset\030\002 \001(" +
      "\005H\000\022\027\n\rinputConstant\030\003 \001(\014H\000B\007\n\005input\"u\n" +
      "\023UserDefinedFunction\022\017\n\007payload\030\001 \001(\014\0227\n" +
      "\006inputs\030\002 \003(\0132\'.org.apache.flink.fn_exec" +
      "ution.v1.Input\022\024\n\014window_index\030\003 \001(\005\"\262\001\n" +
      "\024UserDefinedFunctions\022C\n\004udfs\030\001 \003(\01325.or" +
      "g.apache.flink.fn_execution.v1.UserDefin" +
      "edFunction\022\026\n\016metric_enabled\030\002 \001(\010\022=\n\007wi" +
      "ndows\030\003 \003(\0132,.org.apache.flink.fn_execut" +
      "ion.v1.OverWindow\"\335\002\n\nOverWindow\022L\n\013wind" +
      "ow_type\030\001 \001(\01627.org.apache.flink.fn_exec" +
      "ution.v1.OverWindow.WindowType\022\026\n\016lower_" +
      "boundary\030\002 \001(\003\022\026\n\016upper_boundary\030\003 \001(\003\"\320" +
      "\001\n\nWindowType\022\023\n\017RANGE_UNBOUNDED\020\000\022\035\n\031RA" +
      "NGE_UNBOUNDED_PRECEDING\020\001\022\035\n\031RANGE_UNBOU" +
      "NDED_FOLLOWING\020\002\022\021\n\rRANGE_SLIDING\020\003\022\021\n\rR" +
      "OW_UNBOUNDED\020\004\022\033\n\027ROW_UNBOUNDED_PRECEDIN" +
      "G\020\005\022\033\n\027ROW_UNBOUNDED_FOLLOWING\020\006\022\017\n\013ROW_" +
      "SLIDING\020\007\"\300\006\n\035UserDefinedDataStreamFunct" +
      "ion\022c\n\rfunction_type\030\001 \001(\0162L.org.apache." +
      "flink.fn_execution.v1.UserDefinedDataStr" +
      "eamFunction.FunctionType\022g\n\017runtime_cont" +
      "ext\030\002 \001(\0132N.org.apache.flink.fn_executio" +
      "n.v1.UserDefinedDataStreamFunction.Runti" +
      "meContext\022\017\n\007payload\030\003 \001(\014\022\026\n\016metric_ena" +
      "bled\030\004 \001(\010\022A\n\rkey_type_info\030\005 \001(\0132*.org." +
      "apache.flink.fn_execution.v1.TypeInfo\032*\n" +
      "\014JobParameter\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(" +
      "\t\032\257\002\n\016RuntimeContext\022\021\n\ttask_name\030\001 \001(\t\022" +
      "\037\n\027task_name_with_subtasks\030\002 \001(\t\022#\n\033numb" +
      "er_of_parallel_subtasks\030\003 \001(\005\022\'\n\037max_num" +
      "ber_of_parallel_subtasks\030\004 \001(\005\022\035\n\025index_" +
      "of_this_subtask\030\005 \001(\005\022\026\n\016attempt_number\030" +
      "\006 \001(\005\022d\n\016job_parameters\030\007 \003(\0132L.org.apac" +
      "he.flink.fn_execution.v1.UserDefinedData" +
      "StreamFunction.JobParameter\"\206\001\n\014Function" +
      "Type\022\007\n\003MAP\020\000\022\014\n\010FLAT_MAP\020\001\022\n\n\006REDUCE\020\002\022" +
      "\n\n\006CO_MAP\020\003\022\017\n\013CO_FLAT_MAP\020\004\022\013\n\007PROCESS\020" +
      "\005\022\021\n\rKEYED_PROCESS\020\006\022\026\n\022TIMESTAMP_ASSIGN" +
      "ER\020\007\"\357\005\n\034UserDefinedAggregateFunction\022\017\n" +
      "\007payload\030\001 \001(\014\0227\n\006inputs\030\002 \003(\0132\'.org.apa" +
      "che.flink.fn_execution.v1.Input\022Z\n\005specs" +
      "\030\003 \003(\0132K.org.apache.flink.fn_execution.v" +
      "1.UserDefinedAggregateFunction.DataViewS" +
      "pec\022\022\n\nfilter_arg\030\004 \001(\005\022\020\n\010distinct\030\005 \001(" +
      "\010\032\202\004\n\014DataViewSpec\022\014\n\004name\030\001 \001(\t\022\023\n\013fiel" +
      "d_index\030\002 \001(\005\022i\n\tlist_view\030\003 \001(\0132T.org.a" +
      "pache.flink.fn_execution.v1.UserDefinedA" +
      "ggregateFunction.DataViewSpec.ListViewH\000" +
      "\022g\n\010map_view\030\004 \001(\0132S.org.apache.flink.fn" +
      "_execution.v1.UserDefinedAggregateFuncti" +
      "on.DataViewSpec.MapViewH\000\032T\n\010ListView\022H\n" +
      "\014element_type\030\001 \001(\01322.org.apache.flink.f" +
      "n_execution.v1.Schema.FieldType\032\227\001\n\007MapV" +
      "iew\022D\n\010key_type\030\001 \001(\01322.org.apache.flink" +
      ".fn_execution.v1.Schema.FieldType\022F\n\nval" +
      "ue_type\030\002 \001(\01322.org.apache.flink.fn_exec" +
      "ution.v1.Schema.FieldTypeB\013\n\tdata_view\"\270" +
      "\003\n\035UserDefinedAggregateFunctions\022L\n\004udfs" +
      "\030\001 \003(\0132>.org.apache.flink.fn_execution.v" +
      "1.UserDefinedAggregateFunction\022\026\n\016metric" +
      "_enabled\030\002 \001(\010\022\020\n\010grouping\030\003 \003(\005\022\036\n\026gene" +
      "rate_update_before\030\004 \001(\010\022D\n\010key_type\030\005 \001" +
      "(\01322.org.apache.flink.fn_execution.v1.Sc" +
      "hema.FieldType\022\033\n\023index_of_count_star\030\006 " +
      "\001(\005\022\036\n\026state_cleaning_enabled\030\007 \001(\010\022\030\n\020s" +
      "tate_cache_size\030\010 \001(\005\022!\n\031map_state_read_" +
      "cache_size\030\t \001(\005\022\"\n\032map_state_write_cach" +
      "e_size\030\n \001(\005\022\033\n\023count_star_inserted\030\013 \001(" +
      "\010\"\354\017\n\006Schema\022>\n\006fields\030\001 \003(\0132..org.apach" +
      "e.flink.fn_execution.v1.Schema.Field\032\227\001\n" +
      "\007MapInfo\022D\n\010key_type\030\001 \001(\01322.org.apache." +
      "flink.fn_execution.v1.Schema.FieldType\022F" +
      "\n\nvalue_type\030\002 \001(\01322.org.apache.flink.fn" +
      "_execution.v1.Schema.FieldType\032\035\n\010TimeIn" +
      "fo\022\021\n\tprecision\030\001 \001(\005\032\"\n\rTimestampInfo\022\021" +
      "\n\tprecision\030\001 \001(\005\032,\n\027LocalZonedTimestamp" +
      "Info\022\021\n\tprecision\030\001 \001(\005\032\'\n\022ZonedTimestam" +
      "pInfo\022\021\n\tprecision\030\001 \001(\005\032/\n\013DecimalInfo\022" +
      "\021\n\tprecision\030\001 \001(\005\022\r\n\005scale\030\002 \001(\005\032\034\n\nBin" +
      "aryInfo\022\016\n\006length\030\001 \001(\005\032\037\n\rVarBinaryInfo" +
      "\022\016\n\006length\030\001 \001(\005\032\032\n\010CharInfo\022\016\n\006length\030\001" +
      " \001(\005\032\035\n\013VarCharInfo\022\016\n\006length\030\001 \001(\005\032\260\010\n\t" +
      "FieldType\022D\n\ttype_name\030\001 \001(\01621.org.apach" +
      "e.flink.fn_execution.v1.Schema.TypeName\022" +
      "\020\n\010nullable\030\002 \001(\010\022U\n\027collection_element_" +
      "type\030\003 \001(\01322.org.apache.flink.fn_executi" +
      "on.v1.Schema.FieldTypeH\000\022D\n\010map_info\030\004 \001" +
      "(\01320.org.apache.flink.fn_execution.v1.Sc" +
      "hema.MapInfoH\000\022>\n\nrow_schema\030\005 \001(\0132(.org" +
      ".apache.flink.fn_execution.v1.SchemaH\000\022L" +
      "\n\014decimal_info\030\006 \001(\01324.org.apache.flink." +
      "fn_execution.v1.Schema.DecimalInfoH\000\022F\n\t" +
      "time_info\030\007 \001(\01321.org.apache.flink.fn_ex" +
      "ecution.v1.Schema.TimeInfoH\000\022P\n\016timestam" +
      "p_info\030\010 \001(\01326.org.apache.flink.fn_execu" +
      "tion.v1.Schema.TimestampInfoH\000\022f\n\032local_" +
      "zoned_timestamp_info\030\t \001(\0132@.org.apache." +
      "flink.fn_execution.v1.Schema.LocalZonedT" +
      "imestampInfoH\000\022[\n\024zoned_timestamp_info\030\n" +
      " \001(\0132;.org.apache.flink.fn_execution.v1." +
      "Schema.ZonedTimestampInfoH\000\022J\n\013binary_in" +
      "fo\030\013 \001(\01323.org.apache.flink.fn_execution" +
      ".v1.Schema.BinaryInfoH\000\022Q\n\017var_binary_in" +
      "fo\030\014 \001(\01326.org.apache.flink.fn_execution" +
      ".v1.Schema.VarBinaryInfoH\000\022F\n\tchar_info\030" +
      "\r \001(\01321.org.apache.flink.fn_execution.v1" +
      ".Schema.CharInfoH\000\022M\n\rvar_char_info\030\016 \001(" +
      "\01324.org.apache.flink.fn_execution.v1.Sch" +
      "ema.VarCharInfoH\000B\013\n\ttype_info\032l\n\005Field\022" +
      "\014\n\004name\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022@\n\004ty" +
      "pe\030\003 \001(\01322.org.apache.flink.fn_execution" +
      ".v1.Schema.FieldType\"\241\002\n\010TypeName\022\007\n\003ROW" +
      "\020\000\022\013\n\007TINYINT\020\001\022\014\n\010SMALLINT\020\002\022\007\n\003INT\020\003\022\n" +
      "\n\006BIGINT\020\004\022\013\n\007DECIMAL\020\005\022\t\n\005FLOAT\020\006\022\n\n\006DO" +
      "UBLE\020\007\022\010\n\004DATE\020\010\022\010\n\004TIME\020\t\022\r\n\tTIMESTAMP\020" +
      "\n\022\013\n\007BOOLEAN\020\013\022\n\n\006BINARY\020\014\022\r\n\tVARBINARY\020" +
      "\r\022\010\n\004CHAR\020\016\022\013\n\007VARCHAR\020\017\022\017\n\013BASIC_ARRAY\020" +
      "\020\022\007\n\003MAP\020\021\022\014\n\010MULTISET\020\022\022\031\n\025LOCAL_ZONED_" +
      "TIMESTAMP\020\023\022\023\n\017ZONED_TIMESTAMP\020\024\"\210\006\n\010Typ" +
      "eInfo\022?\n\005field\030\001 \003(\01320.org.apache.flink." +
      "fn_execution.v1.TypeInfo.Field\032\305\002\n\tField" +
      "Type\022F\n\ttype_name\030\001 \001(\01623.org.apache.fli" +
      "nk.fn_execution.v1.TypeInfo.TypeName\022W\n\027" +
      "collection_element_type\030\002 \001(\01324.org.apac" +
      "he.flink.fn_execution.v1.TypeInfo.FieldT" +
      "ypeH\000\022C\n\rrow_type_info\030\003 \001(\0132*.org.apach" +
      "e.flink.fn_execution.v1.TypeInfoH\000\022E\n\017tu" +
      "ple_type_info\030\004 \001(\0132*.org.apache.flink.f" +
      "n_execution.v1.TypeInfoH\000B\013\n\ttype_info\032n" +
      "\n\005Field\022\014\n\004name\030\001 \001(\t\022\023\n\013description\030\002 \001" +
      "(\t\022B\n\004type\030\003 \001(\01324.org.apache.flink.fn_e" +
      "xecution.v1.TypeInfo.FieldType\"\202\002\n\010TypeN" +
      "ame\022\007\n\003ROW\020\000\022\n\n\006STRING\020\001\022\010\n\004BYTE\020\002\022\013\n\007BO" +
      "OLEAN\020\003\022\t\n\005SHORT\020\004\022\007\n\003INT\020\005\022\010\n\004LONG\020\006\022\t\n" +
      "\005FLOAT\020\007\022\n\n\006DOUBLE\020\010\022\010\n\004CHAR\020\t\022\013\n\007BIG_IN" +
      "T\020\n\022\013\n\007BIG_DEC\020\013\022\014\n\010SQL_DATE\020\014\022\014\n\010SQL_TI" +
      "ME\020\r\022\021\n\rSQL_TIMESTAMP\020\016\022\017\n\013BASIC_ARRAY\020\017" +
      "\022\021\n\rPICKLED_BYTES\020\020\022\t\n\005TUPLE\020\021\022\023\n\017PRIMIT" +
      "IVE_ARRAY\020\022B-\n\037org.apache.flink.fnexecut" +
      "ion.v1B\nFlinkFnApib\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_org_apache_flink_fn_execution_v1_Input_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_apache_flink_fn_execution_v1_Input_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Input_descriptor,
        new java.lang.String[] { "Udf", "InputOffset", "InputConstant", "Input", });
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunction_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunction_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunction_descriptor,
        new java.lang.String[] { "Payload", "Inputs", "WindowIndex", });
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunctions_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunctions_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunctions_descriptor,
        new java.lang.String[] { "Udfs", "MetricEnabled", "Windows", });
    internal_static_org_apache_flink_fn_execution_v1_OverWindow_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_org_apache_flink_fn_execution_v1_OverWindow_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_OverWindow_descriptor,
        new java.lang.String[] { "WindowType", "LowerBoundary", "UpperBoundary", });
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_descriptor,
        new java.lang.String[] { "FunctionType", "RuntimeContext", "Payload", "MetricEnabled", "KeyTypeInfo", });
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_JobParameter_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_JobParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_JobParameter_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_RuntimeContext_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_descriptor.getNestedTypes().get(1);
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_RuntimeContext_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_RuntimeContext_descriptor,
        new java.lang.String[] { "TaskName", "TaskNameWithSubtasks", "NumberOfParallelSubtasks", "MaxNumberOfParallelSubtasks", "IndexOfThisSubtask", "AttemptNumber", "JobParameters", });
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_descriptor,
        new java.lang.String[] { "Payload", "Inputs", "Specs", "FilterArg", "Distinct", });
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_descriptor,
        new java.lang.String[] { "Name", "FieldIndex", "ListView", "MapView", "DataView", });
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_ListView_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_ListView_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_ListView_descriptor,
        new java.lang.String[] { "ElementType", });
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_MapView_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_descriptor.getNestedTypes().get(1);
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_MapView_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_MapView_descriptor,
        new java.lang.String[] { "KeyType", "ValueType", });
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunctions_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunctions_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunctions_descriptor,
        new java.lang.String[] { "Udfs", "MetricEnabled", "Grouping", "GenerateUpdateBefore", "KeyType", "IndexOfCountStar", "StateCleaningEnabled", "StateCacheSize", "MapStateReadCacheSize", "MapStateWriteCacheSize", "CountStarInserted", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_org_apache_flink_fn_execution_v1_Schema_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor,
        new java.lang.String[] { "Fields", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_MapInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_flink_fn_execution_v1_Schema_MapInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_MapInfo_descriptor,
        new java.lang.String[] { "KeyType", "ValueType", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_TimeInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(1);
    internal_static_org_apache_flink_fn_execution_v1_Schema_TimeInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_TimeInfo_descriptor,
        new java.lang.String[] { "Precision", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_TimestampInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(2);
    internal_static_org_apache_flink_fn_execution_v1_Schema_TimestampInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_TimestampInfo_descriptor,
        new java.lang.String[] { "Precision", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_LocalZonedTimestampInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(3);
    internal_static_org_apache_flink_fn_execution_v1_Schema_LocalZonedTimestampInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_LocalZonedTimestampInfo_descriptor,
        new java.lang.String[] { "Precision", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_ZonedTimestampInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(4);
    internal_static_org_apache_flink_fn_execution_v1_Schema_ZonedTimestampInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_ZonedTimestampInfo_descriptor,
        new java.lang.String[] { "Precision", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_DecimalInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(5);
    internal_static_org_apache_flink_fn_execution_v1_Schema_DecimalInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_DecimalInfo_descriptor,
        new java.lang.String[] { "Precision", "Scale", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_BinaryInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(6);
    internal_static_org_apache_flink_fn_execution_v1_Schema_BinaryInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_BinaryInfo_descriptor,
        new java.lang.String[] { "Length", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_VarBinaryInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(7);
    internal_static_org_apache_flink_fn_execution_v1_Schema_VarBinaryInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_VarBinaryInfo_descriptor,
        new java.lang.String[] { "Length", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_CharInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(8);
    internal_static_org_apache_flink_fn_execution_v1_Schema_CharInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_CharInfo_descriptor,
        new java.lang.String[] { "Length", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_VarCharInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(9);
    internal_static_org_apache_flink_fn_execution_v1_Schema_VarCharInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_VarCharInfo_descriptor,
        new java.lang.String[] { "Length", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_FieldType_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(10);
    internal_static_org_apache_flink_fn_execution_v1_Schema_FieldType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_FieldType_descriptor,
        new java.lang.String[] { "TypeName", "Nullable", "CollectionElementType", "MapInfo", "RowSchema", "DecimalInfo", "TimeInfo", "TimestampInfo", "LocalZonedTimestampInfo", "ZonedTimestampInfo", "BinaryInfo", "VarBinaryInfo", "CharInfo", "VarCharInfo", "TypeInfo", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_Field_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(11);
    internal_static_org_apache_flink_fn_execution_v1_Schema_Field_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_Field_descriptor,
        new java.lang.String[] { "Name", "Description", "Type", });
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_TypeInfo_descriptor,
        new java.lang.String[] { "Field", });
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_FieldType_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_TypeInfo_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_FieldType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_TypeInfo_FieldType_descriptor,
        new java.lang.String[] { "TypeName", "CollectionElementType", "RowTypeInfo", "TupleTypeInfo", "TypeInfo", });
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_Field_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_TypeInfo_descriptor.getNestedTypes().get(1);
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_Field_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_TypeInfo_Field_descriptor,
        new java.lang.String[] { "Name", "Description", "Type", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
